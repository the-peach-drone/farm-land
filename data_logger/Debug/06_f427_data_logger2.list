
06_f427_data_logger2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08013574  08013574  00023574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f7c  08013f7c  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08013f7c  08013f7c  00023f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f84  08013f84  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f84  08013f84  00023f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f88  08013f88  00023f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08013f8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a0  2**0
                  CONTENTS
 10 .bss          00001944  200001a0  200001a0  000301a0  2**2
                  ALLOC
 11 ._user_heap_stack 0000c004  20001ae4  20001ae4  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002718f  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056b7  00000000  00000000  0005735f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f88  00000000  00000000  0005ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d48  00000000  00000000  0005e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c0f8  00000000  00000000  000606e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029d17  00000000  00000000  0008c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb7aa  00000000  00000000  000b64f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a1ca1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000905c  00000000  00000000  001a1cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801355c 	.word	0x0801355c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0801355c 	.word	0x0801355c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Send_Uart>:
uint32_t total, free_space;

int a=0;

void Send_Uart (char *string)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe19 	bl	8000204 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <Send_Uart+0x28>)
 80005de:	f007 fca0 	bl	8007f22 <HAL_UART_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000adc 	.word	0x20000adc

080005f0 <send_file>:
void send_file(char *string)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(SensUART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff fe03 	bl	8000204 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <send_file+0x28>)
 800060a:	f007 fc8a 	bl	8007f22 <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000b64 	.word	0x20000b64

0800061c <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <Mount_SD+0x48>)
 800062a:	f010 f889 	bl	8010740 <f_mount>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <Mount_SD+0x4c>)
 8000634:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <Mount_SD+0x4c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <Mount_SD+0x3a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\r\n");
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <Mount_SD+0x50>)
 8000640:	f7ff ffc0 	bl	80005c4 <Send_Uart>
		Send_Uart ("\r\nReboot System!!\r\n");
 8000644:	480a      	ldr	r0, [pc, #40]	; (8000670 <Mount_SD+0x54>)
 8000646:	f7ff ffbd 	bl	80005c4 <Send_Uart>
		send_file ("\r\n********************Reboot System!!**************************\r\n");
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <Mount_SD+0x58>)
 800064c:	f7ff ffd0 	bl	80005f0 <send_file>
		HAL_NVIC_SystemReset();
 8000650:	f002 f91d 	bl	800288e <HAL_NVIC_SystemReset>
	}

	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000654:	e002      	b.n	800065c <Mount_SD+0x40>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <Mount_SD+0x5c>)
 8000658:	f7ff ffb4 	bl	80005c4 <Send_Uart>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001bc 	.word	0x200001bc
 8000668:	20000634 	.word	0x20000634
 800066c:	08013574 	.word	0x08013574
 8000670:	08013598 	.word	0x08013598
 8000674:	080135ac 	.word	0x080135ac
 8000678:	080135f0 	.word	0x080135f0

0800067c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2000      	movs	r0, #0
 800068a:	f010 f859 	bl	8010740 <f_mount>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <Unmount_SD+0x38>)
 8000694:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\r\n");
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <Unmount_SD+0x38>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <Unmount_SD+0x2a>
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <Unmount_SD+0x3c>)
 80006a0:	f7ff ff90 	bl	80005c4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
}
 80006a4:	e002      	b.n	80006ac <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <Unmount_SD+0x40>)
 80006a8:	f7ff ff8c 	bl	80005c4 <Send_Uart>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000634 	.word	0x20000634
 80006b8:	08013614 	.word	0x08013614
 80006bc:	08013638 	.word	0x08013638

080006c0 <Scan_SD>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD (char* pat)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b092      	sub	sp, #72	; 0x48
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = calloc(1,sizeof (char));
 80006c8:	2101      	movs	r1, #1
 80006ca:	2001      	movs	r0, #1
 80006cc:	f011 fc14 	bl	8011ef8 <calloc>
 80006d0:	4603      	mov	r3, r0
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
    sprintf (path, "%s",pat);
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4942      	ldr	r1, [pc, #264]	; (80007e0 <Scan_SD+0x120>)
 80006d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80006da:	f011 fd5d 	bl	8012198 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006e4:	4618      	mov	r0, r3
 80006e6:	f010 fd8b 	bl	8011200 <f_opendir>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <Scan_SD+0x124>)
 80006f0:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006f2:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <Scan_SD+0x124>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d169      	bne.n	80007ce <Scan_SD+0x10e>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	493a      	ldr	r1, [pc, #232]	; (80007e8 <Scan_SD+0x128>)
 8000700:	4618      	mov	r0, r3
 8000702:	f010 fe16 	bl	8011332 <f_readdir>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <Scan_SD+0x124>)
 800070c:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800070e:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <Scan_SD+0x124>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d156      	bne.n	80007c4 <Scan_SD+0x104>
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <Scan_SD+0x128>)
 8000718:	7a5b      	ldrb	r3, [r3, #9]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d052      	beq.n	80007c4 <Scan_SD+0x104>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <Scan_SD+0x128>)
 8000720:	7a1b      	ldrb	r3, [r3, #8]
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	2b00      	cmp	r3, #0
 8000728:	d033      	beq.n	8000792 <Scan_SD+0xd2>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800072a:	4930      	ldr	r1, [pc, #192]	; (80007ec <Scan_SD+0x12c>)
 800072c:	4830      	ldr	r0, [pc, #192]	; (80007f0 <Scan_SD+0x130>)
 800072e:	f7ff fd5f 	bl	80001f0 <strcmp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d042      	beq.n	80007be <Scan_SD+0xfe>
            	char *buf = malloc(30*sizeof(char));
 8000738:	201e      	movs	r0, #30
 800073a:	f011 fc0f 	bl	8011f5c <malloc>
 800073e:	4603      	mov	r3, r0
 8000740:	63fb      	str	r3, [r7, #60]	; 0x3c
            	sprintf (buf, "Dir: %s\r\n", fno.fname);
 8000742:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <Scan_SD+0x12c>)
 8000744:	492b      	ldr	r1, [pc, #172]	; (80007f4 <Scan_SD+0x134>)
 8000746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000748:	f011 fd26 	bl	8012198 <siprintf>
            	Send_Uart(buf);
 800074c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800074e:	f7ff ff39 	bl	80005c4 <Send_Uart>
            	free(buf);
 8000752:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000754:	f011 fc0a 	bl	8011f6c <free>
                i = strlen(path);
 8000758:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800075a:	f7ff fd53 	bl	8000204 <strlen>
 800075e:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000764:	4413      	add	r3, r2
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <Scan_SD+0x12c>)
 8000768:	4923      	ldr	r1, [pc, #140]	; (80007f8 <Scan_SD+0x138>)
 800076a:	4618      	mov	r0, r3
 800076c:	f011 fd14 	bl	8012198 <siprintf>
                fresult = Scan_SD(path);                     /* Enter the directory */
 8000770:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000772:	f7ff ffa5 	bl	80006c0 <Scan_SD>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <Scan_SD+0x124>)
 800077c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <Scan_SD+0x124>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d11d      	bne.n	80007c2 <Scan_SD+0x102>
                path[i] = 0;
 8000786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800078a:	4413      	add	r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e7b3      	b.n	80006fa <Scan_SD+0x3a>
            }
            else
            {   /* It is a file. */
           	   char *buf = calloc(1, sizeof(char));
 8000792:	2101      	movs	r1, #1
 8000794:	2001      	movs	r0, #1
 8000796:	f011 fbaf 	bl	8011ef8 <calloc>
 800079a:	4603      	mov	r3, r0
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
               sprintf(buf,"File: %s/%s\r\n", path, fno.fname);
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <Scan_SD+0x12c>)
 80007a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007a2:	4916      	ldr	r1, [pc, #88]	; (80007fc <Scan_SD+0x13c>)
 80007a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007a6:	f011 fcf7 	bl	8012198 <siprintf>
               Send_Uart(buf);
 80007aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007ac:	f7ff ff0a 	bl	80005c4 <Send_Uart>
               send_file(buf);
 80007b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007b2:	f7ff ff1d 	bl	80005f0 <send_file>
               free(buf);
 80007b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007b8:	f011 fbd8 	bl	8011f6c <free>
 80007bc:	e79d      	b.n	80006fa <Scan_SD+0x3a>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80007be:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80007c0:	e79b      	b.n	80006fa <Scan_SD+0x3a>
                if (fresult != FR_OK) break;
 80007c2:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f010 fd8c 	bl	80112e6 <f_closedir>
    }
    free(path);
 80007ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80007d0:	f011 fbcc 	bl	8011f6c <free>
    return fresult;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <Scan_SD+0x124>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3748      	adds	r7, #72	; 0x48
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0801365c 	.word	0x0801365c
 80007e4:	20000634 	.word	0x20000634
 80007e8:	2000061c 	.word	0x2000061c
 80007ec:	20000625 	.word	0x20000625
 80007f0:	08013660 	.word	0x08013660
 80007f4:	0801366c 	.word	0x0801366c
 80007f8:	08013678 	.word	0x08013678
 80007fc:	0801367c 	.word	0x0801367c

08000800 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000808:	495a      	ldr	r1, [pc, #360]	; (8000974 <Read_File+0x174>)
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f010 fdce 	bl	80113ac <f_stat>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b58      	ldr	r3, [pc, #352]	; (8000978 <Read_File+0x178>)
 8000816:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000818:	4b57      	ldr	r3, [pc, #348]	; (8000978 <Read_File+0x178>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d012      	beq.n	8000846 <Read_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f011 fb9b 	bl	8011f5c <malloc>
 8000826:	4603      	mov	r3, r0
 8000828:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4953      	ldr	r1, [pc, #332]	; (800097c <Read_File+0x17c>)
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f011 fcb2 	bl	8012198 <siprintf>
		Send_Uart (buf);
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f7ff fec5 	bl	80005c4 <Send_Uart>
		free(buf);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f011 fb96 	bl	8011f6c <free>
	    return fresult;
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <Read_File+0x178>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	e091      	b.n	800096a <Read_File+0x16a>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8000846:	2201      	movs	r2, #1
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	484d      	ldr	r0, [pc, #308]	; (8000980 <Read_File+0x180>)
 800084c:	f00f ffbe 	bl	80107cc <f_open>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <Read_File+0x178>)
 8000856:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000858:	4b47      	ldr	r3, [pc, #284]	; (8000978 <Read_File+0x178>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d015      	beq.n	800088c <Read_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f011 fb7b 	bl	8011f5c <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <Read_File+0x178>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4944      	ldr	r1, [pc, #272]	; (8000984 <Read_File+0x184>)
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f011 fc8f 	bl	8012198 <siprintf>
		    Send_Uart(buf);
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff fea2 	bl	80005c4 <Send_Uart>
		    free(buf);
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f011 fb73 	bl	8011f6c <free>
		    return fresult;
 8000886:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <Read_File+0x178>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	e06e      	b.n	800096a <Read_File+0x16a>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(f_size(&fil));
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <Read_File+0x180>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4618      	mov	r0, r3
 8000892:	f011 fb63 	bl	8011f5c <malloc>
 8000896:	4603      	mov	r3, r0
 8000898:	61fb      	str	r3, [r7, #28]
		memset(buffer,0,f_size(&fil)+1);
 800089a:	4b39      	ldr	r3, [pc, #228]	; (8000980 <Read_File+0x180>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	69f8      	ldr	r0, [r7, #28]
 80008a6:	f011 fb69 	bl	8011f7c <memset>
		fresult = f_read (&fil, buffer, (f_size(&fil)), &br);
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <Read_File+0x180>)
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <Read_File+0x188>)
 80008b0:	69f9      	ldr	r1, [r7, #28]
 80008b2:	4833      	ldr	r0, [pc, #204]	; (8000980 <Read_File+0x180>)
 80008b4:	f010 f948 	bl	8010b48 <f_read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <Read_File+0x178>)
 80008be:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Read_File+0x178>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d016      	beq.n	80008f6 <Read_File+0xf6>
		{
			char *buf = malloc(100*sizeof(char));
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f011 fb47 	bl	8011f5c <malloc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	613b      	str	r3, [r7, #16]
			free(buffer);
 80008d2:	69f8      	ldr	r0, [r7, #28]
 80008d4:	f011 fb4a 	bl	8011f6c <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <Read_File+0x178>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	492a      	ldr	r1, [pc, #168]	; (800098c <Read_File+0x18c>)
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f011 fc58 	bl	8012198 <siprintf>
		  	Send_Uart(buf);
 80008e8:	6938      	ldr	r0, [r7, #16]
 80008ea:	f7ff fe6b 	bl	80005c4 <Send_Uart>
		  	free(buf);
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f011 fb3c 	bl	8011f6c <free>
 80008f4:	e037      	b.n	8000966 <Read_File+0x166>
		}

		else
		{
			send_file(buffer);
 80008f6:	69f8      	ldr	r0, [r7, #28]
 80008f8:	f7ff fe7a 	bl	80005f0 <send_file>
			send_file("****File_read_successful!!\r\n");
 80008fc:	4824      	ldr	r0, [pc, #144]	; (8000990 <Read_File+0x190>)
 80008fe:	f7ff fe77 	bl	80005f0 <send_file>
			free(buffer);
 8000902:	69f8      	ldr	r0, [r7, #28]
 8000904:	f011 fb32 	bl	8011f6c <free>

			/* Close file */
			fresult = f_close(&fil);
 8000908:	481d      	ldr	r0, [pc, #116]	; (8000980 <Read_File+0x180>)
 800090a:	f010 fc4f 	bl	80111ac <f_close>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <Read_File+0x178>)
 8000914:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <Read_File+0x178>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d013      	beq.n	8000946 <Read_File+0x146>
			{
				char *buf = malloc(100*sizeof(char));
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f011 fb1c 	bl	8011f5c <malloc>
 8000924:	4603      	mov	r3, r0
 8000926:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <Read_File+0x178>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4918      	ldr	r1, [pc, #96]	; (8000994 <Read_File+0x194>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f011 fc30 	bl	8012198 <siprintf>
				Send_Uart(buf);
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f7ff fe43 	bl	80005c4 <Send_Uart>
				free(buf);
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f011 fb14 	bl	8011f6c <free>
 8000944:	e00f      	b.n	8000966 <Read_File+0x166>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8000946:	2064      	movs	r0, #100	; 0x64
 8000948:	f011 fb08 	bl	8011f5c <malloc>
 800094c:	4603      	mov	r3, r0
 800094e:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4911      	ldr	r1, [pc, #68]	; (8000998 <Read_File+0x198>)
 8000954:	69b8      	ldr	r0, [r7, #24]
 8000956:	f011 fc1f 	bl	8012198 <siprintf>
				Send_Uart(buf);
 800095a:	69b8      	ldr	r0, [r7, #24]
 800095c:	f7ff fe32 	bl	80005c4 <Send_Uart>
				free(buf);
 8000960:	69b8      	ldr	r0, [r7, #24]
 8000962:	f011 fb03 	bl	8011f6c <free>
			}
		}

	    return fresult;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <Read_File+0x178>)
 8000968:	781b      	ldrb	r3, [r3, #0]
	}

}
 800096a:	4618      	mov	r0, r3
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000061c 	.word	0x2000061c
 8000978:	20000634 	.word	0x20000634
 800097c:	08013774 	.word	0x08013774
 8000980:	200003ec 	.word	0x200003ec
 8000984:	08013798 	.word	0x08013798
 8000988:	20000638 	.word	0x20000638
 800098c:	080137c0 	.word	0x080137c0
 8000990:	080137e8 	.word	0x080137e8
 8000994:	08013808 	.word	0x08013808
 8000998:	08013830 	.word	0x08013830

0800099c <Create_File>:


FRESULT Create_File (char *name)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80009a4:	4943      	ldr	r1, [pc, #268]	; (8000ab4 <Create_File+0x118>)
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f010 fd00 	bl	80113ac <f_stat>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <Create_File+0x11c>)
 80009b2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80009b4:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <Create_File+0x11c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d112      	bne.n	80009e2 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f011 facd 	bl	8011f5c <malloc>
 80009c2:	4603      	mov	r3, r0
 80009c4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \r\n",name);
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	493c      	ldr	r1, [pc, #240]	; (8000abc <Create_File+0x120>)
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f011 fbe4 	bl	8012198 <siprintf>
		Send_Uart(buf);
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fdf7 	bl	80005c4 <Send_Uart>
		free(buf);
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f011 fac8 	bl	8011f6c <free>
	    return fresult;
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <Create_File+0x11c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	e063      	b.n	8000aaa <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80009e2:	220b      	movs	r2, #11
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	4836      	ldr	r0, [pc, #216]	; (8000ac0 <Create_File+0x124>)
 80009e8:	f00f fef0 	bl	80107cc <f_open>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <Create_File+0x11c>)
 80009f2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <Create_File+0x11c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d015      	beq.n	8000a28 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f011 faad 	bl	8011f5c <malloc>
 8000a02:	4603      	mov	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <Create_File+0x11c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	492d      	ldr	r1, [pc, #180]	; (8000ac4 <Create_File+0x128>)
 8000a10:	6938      	ldr	r0, [r7, #16]
 8000a12:	f011 fbc1 	bl	8012198 <siprintf>
			Send_Uart(buf);
 8000a16:	6938      	ldr	r0, [r7, #16]
 8000a18:	f7ff fdd4 	bl	80005c4 <Send_Uart>
			free(buf);
 8000a1c:	6938      	ldr	r0, [r7, #16]
 8000a1e:	f011 faa5 	bl	8011f6c <free>
		    return fresult;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <Create_File+0x11c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e040      	b.n	8000aaa <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f011 fa97 	bl	8011f5c <malloc>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <Create_File+0x12c>)
 8000a36:	69f8      	ldr	r0, [r7, #28]
 8000a38:	f011 fbae 	bl	8012198 <siprintf>
			Send_Uart(buf);
 8000a3c:	69f8      	ldr	r0, [r7, #28]
 8000a3e:	f7ff fdc1 	bl	80005c4 <Send_Uart>
			free(buf);
 8000a42:	69f8      	ldr	r0, [r7, #28]
 8000a44:	f011 fa92 	bl	8011f6c <free>
		}

		fresult = f_close(&fil);
 8000a48:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <Create_File+0x124>)
 8000a4a:	f010 fbaf 	bl	80111ac <f_close>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <Create_File+0x11c>)
 8000a54:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <Create_File+0x11c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d013      	beq.n	8000a86 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f011 fa7c 	bl	8011f5c <malloc>
 8000a64:	4603      	mov	r3, r0
 8000a66:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\r\n", fresult, name);
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <Create_File+0x11c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4916      	ldr	r1, [pc, #88]	; (8000acc <Create_File+0x130>)
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f011 fb90 	bl	8012198 <siprintf>
			Send_Uart(buf);
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f7ff fda3 	bl	80005c4 <Send_Uart>
			free(buf);
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f011 fa74 	bl	8011f6c <free>
 8000a84:	e00f      	b.n	8000aa6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f011 fa68 	bl	8011f5c <malloc>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	490f      	ldr	r1, [pc, #60]	; (8000ad0 <Create_File+0x134>)
 8000a94:	69b8      	ldr	r0, [r7, #24]
 8000a96:	f011 fb7f 	bl	8012198 <siprintf>
			Send_Uart(buf);
 8000a9a:	69b8      	ldr	r0, [r7, #24]
 8000a9c:	f7ff fd92 	bl	80005c4 <Send_Uart>
			free(buf);
 8000aa0:	69b8      	ldr	r0, [r7, #24]
 8000aa2:	f011 fa63 	bl	8011f6c <free>
		}
	}
    return fresult;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <Create_File+0x11c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000061c 	.word	0x2000061c
 8000ab8:	20000634 	.word	0x20000634
 8000abc:	08013850 	.word	0x08013850
 8000ac0:	200003ec 	.word	0x200003ec
 8000ac4:	08013888 	.word	0x08013888
 8000ac8:	080138b0 	.word	0x080138b0
 8000acc:	080138f0 	.word	0x080138f0
 8000ad0:	08013830 	.word	0x08013830

08000ad4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000ade:	4956      	ldr	r1, [pc, #344]	; (8000c38 <Update_File+0x164>)
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f010 fc63 	bl	80113ac <f_stat>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <Update_File+0x168>)
 8000aec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000aee:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <Update_File+0x168>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d012      	beq.n	8000b1c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f011 fa30 	bl	8011f5c <malloc>
 8000afc:	4603      	mov	r3, r0
 8000afe:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\r\n", name);
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	494f      	ldr	r1, [pc, #316]	; (8000c40 <Update_File+0x16c>)
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f011 fb47 	bl	8012198 <siprintf>
		Send_Uart (buf);
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f7ff fd5a 	bl	80005c4 <Send_Uart>
		free(buf);
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f011 fa2b 	bl	8011f6c <free>
	    return fresult;
 8000b16:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <Update_File+0x168>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	e088      	b.n	8000c2e <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000b1c:	2232      	movs	r2, #50	; 0x32
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	4848      	ldr	r0, [pc, #288]	; (8000c44 <Update_File+0x170>)
 8000b22:	f00f fe53 	bl	80107cc <f_open>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <Update_File+0x168>)
 8000b2c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b2e:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <Update_File+0x168>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d015      	beq.n	8000b62 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b36:	2064      	movs	r0, #100	; 0x64
 8000b38:	f011 fa10 	bl	8011f5c <malloc>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\r\n", fresult, name);
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <Update_File+0x168>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	493f      	ldr	r1, [pc, #252]	; (8000c48 <Update_File+0x174>)
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f011 fb24 	bl	8012198 <siprintf>
	    	Send_Uart(buf);
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fd37 	bl	80005c4 <Send_Uart>
	        free(buf);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f011 fa08 	bl	8011f6c <free>
	        return fresult;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <Update_File+0x168>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	e065      	b.n	8000c2e <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff fb4e 	bl	8000204 <strlen>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <Update_File+0x178>)
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	4835      	ldr	r0, [pc, #212]	; (8000c44 <Update_File+0x170>)
 8000b70:	f010 f929 	bl	8010dc6 <f_write>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <Update_File+0x168>)
 8000b7a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <Update_File+0x168>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f011 f9e9 	bl	8011f5c <malloc>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\r\n", fresult, name);
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <Update_File+0x168>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	492e      	ldr	r1, [pc, #184]	; (8000c50 <Update_File+0x17c>)
 8000b98:	69b8      	ldr	r0, [r7, #24]
 8000b9a:	f011 fafd 	bl	8012198 <siprintf>
	    	Send_Uart(buf);
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f7ff fd10 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000ba4:	69b8      	ldr	r0, [r7, #24]
 8000ba6:	f011 f9e1 	bl	8011f6c <free>
 8000baa:	e00f      	b.n	8000bcc <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f011 f9d5 	bl	8011f5c <malloc>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\r\n", name);
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4926      	ldr	r1, [pc, #152]	; (8000c54 <Update_File+0x180>)
 8000bba:	69f8      	ldr	r0, [r7, #28]
 8000bbc:	f011 faec 	bl	8012198 <siprintf>
	    	Send_Uart(buf);
 8000bc0:	69f8      	ldr	r0, [r7, #28]
 8000bc2:	f7ff fcff 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000bc6:	69f8      	ldr	r0, [r7, #28]
 8000bc8:	f011 f9d0 	bl	8011f6c <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000bcc:	481d      	ldr	r0, [pc, #116]	; (8000c44 <Update_File+0x170>)
 8000bce:	f010 faed 	bl	80111ac <f_close>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <Update_File+0x168>)
 8000bd8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <Update_File+0x168>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d013      	beq.n	8000c0a <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000be2:	2064      	movs	r0, #100	; 0x64
 8000be4:	f011 f9ba 	bl	8011f5c <malloc>
 8000be8:	4603      	mov	r3, r0
 8000bea:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\r\n", fresult, name);
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <Update_File+0x168>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4918      	ldr	r1, [pc, #96]	; (8000c58 <Update_File+0x184>)
 8000bf6:	6938      	ldr	r0, [r7, #16]
 8000bf8:	f011 face 	bl	8012198 <siprintf>
	    	Send_Uart(buf);
 8000bfc:	6938      	ldr	r0, [r7, #16]
 8000bfe:	f7ff fce1 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000c02:	6938      	ldr	r0, [r7, #16]
 8000c04:	f011 f9b2 	bl	8011f6c <free>
 8000c08:	e00f      	b.n	8000c2a <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f011 f9a6 	bl	8011f5c <malloc>
 8000c10:	4603      	mov	r3, r0
 8000c12:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\r\n", name);
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4911      	ldr	r1, [pc, #68]	; (8000c5c <Update_File+0x188>)
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f011 fabd 	bl	8012198 <siprintf>
	    	Send_Uart(buf);
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff fcd0 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000c24:	6978      	ldr	r0, [r7, #20]
 8000c26:	f011 f9a1 	bl	8011f6c <free>
	     }
	}
    return fresult;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <Update_File+0x168>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000061c 	.word	0x2000061c
 8000c3c:	20000634 	.word	0x20000634
 8000c40:	08013690 	.word	0x08013690
 8000c44:	200003ec 	.word	0x200003ec
 8000c48:	080136b0 	.word	0x080136b0
 8000c4c:	2000063c 	.word	0x2000063c
 8000c50:	08013914 	.word	0x08013914
 8000c54:	0801393c 	.word	0x0801393c
 8000c58:	08013958 	.word	0x08013958
 8000c5c:	08013980 	.word	0x08013980

08000c60 <RTC_CalendarShow>:
uint8_t Y;
uint8_t M;
uint8_t D;

void RTC_CalendarShow(uint8_t *showtime, uint8_t *showdate)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <RTC_CalendarShow+0x5c>)
 8000c74:	f004 fe0e 	bl	8005894 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480e      	ldr	r0, [pc, #56]	; (8000cbc <RTC_CalendarShow+0x5c>)
 8000c82:	f004 fee9 	bl	8005a58 <HAL_RTC_GetDate>



  /* Display time Format: hh:mm:ss */
  sprintf((char*)showtime,"%02d:%02d:%02d",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000c86:	7a3b      	ldrb	r3, [r7, #8]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	7a7b      	ldrb	r3, [r7, #9]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	7abb      	ldrb	r3, [r7, #10]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	460b      	mov	r3, r1
 8000c94:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <RTC_CalendarShow+0x60>)
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f011 fa7e 	bl	8012198 <siprintf>
  /* Display date Format: mm-dd-yy */
  sprintf((char*)showdate,"%02d%02d%02d",2000+sdatestructureget.Year, sdatestructureget.Month,sdatestructureget.Date);
 8000c9c:	7ffb      	ldrb	r3, [r7, #31]
 8000c9e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000ca2:	7f7b      	ldrb	r3, [r7, #29]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	7fbb      	ldrb	r3, [r7, #30]
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	460b      	mov	r3, r1
 8000cac:	4905      	ldr	r1, [pc, #20]	; (8000cc4 <RTC_CalendarShow+0x64>)
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f011 fa72 	bl	8012198 <siprintf>

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200008cc 	.word	0x200008cc
 8000cc0:	08013ae0 	.word	0x08013ae0
 8000cc4:	08013af0 	.word	0x08013af0

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cd4:	f002 fbbf 	bl	8003456 <HAL_GPIO_TogglePin>
	if(htim->Instance ==TIM7)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d111      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{

		i++;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cea:	6013      	str	r3, [r2, #0]
		if(i>9)
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	dd08      	ble.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			HAL_UART_Transmit(&huart7, aSensDatacall, sizeof(aSensDatacall), 1);
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	2218      	movs	r2, #24
 8000cf8:	4908      	ldr	r1, [pc, #32]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cfc:	f007 f911 	bl	8007f22 <HAL_UART_Transmit>
			i=0;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40001400 	.word	0x40001400
 8000d18:	20000d88 	.word	0x20000d88
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000a98 	.word	0x20000a98

08000d24 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4980      	ldr	r1, [pc, #512]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f004 fdaf 	bl	8005894 <HAL_RTC_GetTime>
	if (sTime.Minutes==00 || sTime.Minutes==10 || sTime.Minutes==20 || sTime.Minutes==30 || sTime.Minutes==40 || sTime.Minutes==50)
 8000d36:	4b7e      	ldr	r3, [pc, #504]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d014      	beq.n	8000d68 <HAL_RTC_AlarmAEventCallback+0x44>
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d010      	beq.n	8000d68 <HAL_RTC_AlarmAEventCallback+0x44>
 8000d46:	4b7a      	ldr	r3, [pc, #488]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	2b14      	cmp	r3, #20
 8000d4c:	d00c      	beq.n	8000d68 <HAL_RTC_AlarmAEventCallback+0x44>
 8000d4e:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	2b1e      	cmp	r3, #30
 8000d54:	d008      	beq.n	8000d68 <HAL_RTC_AlarmAEventCallback+0x44>
 8000d56:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	2b28      	cmp	r3, #40	; 0x28
 8000d5c:	d004      	beq.n	8000d68 <HAL_RTC_AlarmAEventCallback+0x44>
 8000d5e:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <HAL_RTC_AlarmAEventCallback+0x20c>)
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	2b32      	cmp	r3, #50	; 0x32
 8000d64:	f040 80e0 	bne.w	8000f28 <HAL_RTC_AlarmAEventCallback+0x204>
	{
	strcpy(Fname, aShowDate);
 8000d68:	4972      	ldr	r1, [pc, #456]	; (8000f34 <HAL_RTC_AlarmAEventCallback+0x210>)
 8000d6a:	4873      	ldr	r0, [pc, #460]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000d6c:	f011 fa43 	bl	80121f6 <strcpy>
	strcat(Fname,".csv");
 8000d70:	4871      	ldr	r0, [pc, #452]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000d72:	f7ff fa47 	bl	8000204 <strlen>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a6f      	ldr	r2, [pc, #444]	; (8000f3c <HAL_RTC_AlarmAEventCallback+0x218>)
 8000d80:	6810      	ldr	r0, [r2, #0]
 8000d82:	6018      	str	r0, [r3, #0]
 8000d84:	7912      	ldrb	r2, [r2, #4]
 8000d86:	711a      	strb	r2, [r3, #4]
	Mount_SD("/");
 8000d88:	486d      	ldr	r0, [pc, #436]	; (8000f40 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000d8a:	f7ff fc47 	bl	800061c <Mount_SD>
	afresult  =f_stat(Fname,&ano);
 8000d8e:	496d      	ldr	r1, [pc, #436]	; (8000f44 <HAL_RTC_AlarmAEventCallback+0x220>)
 8000d90:	4869      	ldr	r0, [pc, #420]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000d92:	f010 fb0b 	bl	80113ac <f_stat>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b6b      	ldr	r3, [pc, #428]	; (8000f48 <HAL_RTC_AlarmAEventCallback+0x224>)
 8000d9c:	701a      	strb	r2, [r3, #0]
	if(afresult != FR_OK)
 8000d9e:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <HAL_RTC_AlarmAEventCallback+0x224>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d010      	beq.n	8000dc8 <HAL_RTC_AlarmAEventCallback+0xa4>
	{
		Create_File(Fname);
 8000da6:	4864      	ldr	r0, [pc, #400]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000da8:	f7ff fdf8 	bl	800099c <Create_File>
		Update_File(Fname, "\r\nTime,Temp,Hum,Sun,Rain,Wind_d,Wind_s,SMO,STP,SEC\r\n");
 8000dac:	4967      	ldr	r1, [pc, #412]	; (8000f4c <HAL_RTC_AlarmAEventCallback+0x228>)
 8000dae:	4862      	ldr	r0, [pc, #392]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000db0:	f7ff fe90 	bl	8000ad4 <Update_File>
		Update_File(Fname, buffer);
 8000db4:	4966      	ldr	r1, [pc, #408]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000db6:	4860      	ldr	r0, [pc, #384]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000db8:	f7ff fe8c 	bl	8000ad4 <Update_File>
		Unmount_SD("/");
 8000dbc:	4860      	ldr	r0, [pc, #384]	; (8000f40 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000dbe:	f7ff fc5d 	bl	800067c <Unmount_SD>
		Mount_SD("/");
 8000dc2:	485f      	ldr	r0, [pc, #380]	; (8000f40 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000dc4:	f7ff fc2a 	bl	800061c <Mount_SD>
	}

	RTC_CalendarShow(aShowTime, aShowDate);
 8000dc8:	495a      	ldr	r1, [pc, #360]	; (8000f34 <HAL_RTC_AlarmAEventCallback+0x210>)
 8000dca:	4862      	ldr	r0, [pc, #392]	; (8000f54 <HAL_RTC_AlarmAEventCallback+0x230>)
 8000dcc:	f7ff ff48 	bl	8000c60 <RTC_CalendarShow>
	strcat(buffer, aShowTime);
 8000dd0:	4960      	ldr	r1, [pc, #384]	; (8000f54 <HAL_RTC_AlarmAEventCallback+0x230>)
 8000dd2:	485f      	ldr	r0, [pc, #380]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000dd4:	f011 fa00 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000dd8:	485d      	ldr	r0, [pc, #372]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000dda:	f7ff fa13 	bl	8000204 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000de4:	4413      	add	r3, r2
 8000de6:	495c      	ldr	r1, [pc, #368]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000de8:	461a      	mov	r2, r3
 8000dea:	460b      	mov	r3, r1
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Temp);
 8000df0:	495a      	ldr	r1, [pc, #360]	; (8000f5c <HAL_RTC_AlarmAEventCallback+0x238>)
 8000df2:	4857      	ldr	r0, [pc, #348]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000df4:	f011 f9f0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000df8:	4855      	ldr	r0, [pc, #340]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000dfa:	f7ff fa03 	bl	8000204 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e04:	4413      	add	r3, r2
 8000e06:	4954      	ldr	r1, [pc, #336]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000e08:	461a      	mov	r2, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Hum);
 8000e10:	4953      	ldr	r1, [pc, #332]	; (8000f60 <HAL_RTC_AlarmAEventCallback+0x23c>)
 8000e12:	484f      	ldr	r0, [pc, #316]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e14:	f011 f9e0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000e18:	484d      	ldr	r0, [pc, #308]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e1a:	f7ff f9f3 	bl	8000204 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e24:	4413      	add	r3, r2
 8000e26:	494c      	ldr	r1, [pc, #304]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000e28:	461a      	mov	r2, r3
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Sun);
 8000e30:	494c      	ldr	r1, [pc, #304]	; (8000f64 <HAL_RTC_AlarmAEventCallback+0x240>)
 8000e32:	4847      	ldr	r0, [pc, #284]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e34:	f011 f9d0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000e38:	4845      	ldr	r0, [pc, #276]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e3a:	f7ff f9e3 	bl	8000204 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e44:	4413      	add	r3, r2
 8000e46:	4944      	ldr	r1, [pc, #272]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000e48:	461a      	mov	r2, r3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Rain);
 8000e50:	4945      	ldr	r1, [pc, #276]	; (8000f68 <HAL_RTC_AlarmAEventCallback+0x244>)
 8000e52:	483f      	ldr	r0, [pc, #252]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e54:	f011 f9c0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000e58:	483d      	ldr	r0, [pc, #244]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e5a:	f7ff f9d3 	bl	8000204 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e64:	4413      	add	r3, r2
 8000e66:	493c      	ldr	r1, [pc, #240]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000e68:	461a      	mov	r2, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Wind_d);
 8000e70:	493e      	ldr	r1, [pc, #248]	; (8000f6c <HAL_RTC_AlarmAEventCallback+0x248>)
 8000e72:	4837      	ldr	r0, [pc, #220]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e74:	f011 f9b0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000e78:	4835      	ldr	r0, [pc, #212]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e7a:	f7ff f9c3 	bl	8000204 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e84:	4413      	add	r3, r2
 8000e86:	4934      	ldr	r1, [pc, #208]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000e88:	461a      	mov	r2, r3
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	8013      	strh	r3, [r2, #0]
	strcat(buffer, Wind_s);
 8000e90:	4937      	ldr	r1, [pc, #220]	; (8000f70 <HAL_RTC_AlarmAEventCallback+0x24c>)
 8000e92:	482f      	ldr	r0, [pc, #188]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e94:	f011 f9a0 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000e98:	482d      	ldr	r0, [pc, #180]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000e9a:	f7ff f9b3 	bl	8000204 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	492c      	ldr	r1, [pc, #176]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	460b      	mov	r3, r1
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	8013      	strh	r3, [r2, #0]
	strcat(buffer, SMO);
 8000eb0:	4930      	ldr	r1, [pc, #192]	; (8000f74 <HAL_RTC_AlarmAEventCallback+0x250>)
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000eb4:	f011 f990 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000eba:	f7ff f9a3 	bl	8000204 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000ec8:	461a      	mov	r2, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	8013      	strh	r3, [r2, #0]
	strcat(buffer, STP);
 8000ed0:	4929      	ldr	r1, [pc, #164]	; (8000f78 <HAL_RTC_AlarmAEventCallback+0x254>)
 8000ed2:	481f      	ldr	r0, [pc, #124]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000ed4:	f011 f980 	bl	80121d8 <strcat>
	strcat(buffer,",");
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000eda:	f7ff f993 	bl	8000204 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	491c      	ldr	r1, [pc, #112]	; (8000f58 <HAL_RTC_AlarmAEventCallback+0x234>)
 8000ee8:	461a      	mov	r2, r3
 8000eea:	460b      	mov	r3, r1
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	8013      	strh	r3, [r2, #0]
	strcat(buffer, SEC);
 8000ef0:	4922      	ldr	r1, [pc, #136]	; (8000f7c <HAL_RTC_AlarmAEventCallback+0x258>)
 8000ef2:	4817      	ldr	r0, [pc, #92]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000ef4:	f011 f970 	bl	80121d8 <strcat>
	strcat(buffer,"\r\n");
 8000ef8:	4815      	ldr	r0, [pc, #84]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000efa:	f7ff f983 	bl	8000204 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000f04:	4413      	add	r3, r2
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_RTC_AlarmAEventCallback+0x25c>)
 8000f08:	8811      	ldrh	r1, [r2, #0]
 8000f0a:	7892      	ldrb	r2, [r2, #2]
 8000f0c:	8019      	strh	r1, [r3, #0]
 8000f0e:	709a      	strb	r2, [r3, #2]


	Update_File(Fname, buffer);
 8000f10:	490f      	ldr	r1, [pc, #60]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_RTC_AlarmAEventCallback+0x214>)
 8000f14:	f7ff fdde 	bl	8000ad4 <Update_File>
	memset(buffer, 0, sizeof(buffer));
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <HAL_RTC_AlarmAEventCallback+0x22c>)
 8000f1e:	f011 f82d 	bl	8011f7c <memset>

	Unmount_SD("/");
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000f24:	f7ff fbaa 	bl	800067c <Unmount_SD>
	}
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000668 	.word	0x20000668
 8000f34:	20000c78 	.word	0x20000c78
 8000f38:	20000d8c 	.word	0x20000d8c
 8000f3c:	08013b00 	.word	0x08013b00
 8000f40:	08013b08 	.word	0x08013b08
 8000f44:	20000680 	.word	0x20000680
 8000f48:	20000698 	.word	0x20000698
 8000f4c:	08013b0c 	.word	0x08013b0c
 8000f50:	20000c08 	.word	0x20000c08
 8000f54:	20000c6c 	.word	0x20000c6c
 8000f58:	08013b44 	.word	0x08013b44
 8000f5c:	20000d1c 	.word	0x20000d1c
 8000f60:	20000d28 	.word	0x20000d28
 8000f64:	20000d34 	.word	0x20000d34
 8000f68:	20000d40 	.word	0x20000d40
 8000f6c:	20000d50 	.word	0x20000d50
 8000f70:	20000d5c 	.word	0x20000d5c
 8000f74:	20000d64 	.word	0x20000d64
 8000f78:	20000d70 	.word	0x20000d70
 8000f7c:	20000d7c 	.word	0x20000d7c
 8000f80:	08013b48 	.word	0x08013b48

08000f84 <sensdataget>:
void command();
void sensdataget()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	if (SensData!= '\0' && SensData_index<150)
 8000f8a:	4b77      	ldr	r3, [pc, #476]	; (8001168 <sensdataget+0x1e4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d011      	beq.n	8000fb6 <sensdataget+0x32>
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <sensdataget+0x1e8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b95      	cmp	r3, #149	; 0x95
 8000f98:	d80d      	bhi.n	8000fb6 <sensdataget+0x32>
	{
		aSensData[SensData_index]=SensData;
 8000f9a:	4b74      	ldr	r3, [pc, #464]	; (800116c <sensdataget+0x1e8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b71      	ldr	r3, [pc, #452]	; (8001168 <sensdataget+0x1e4>)
 8000fa2:	7819      	ldrb	r1, [r3, #0]
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <sensdataget+0x1ec>)
 8000fa6:	5499      	strb	r1, [r3, r2]
		SensData_index++;
 8000fa8:	4b70      	ldr	r3, [pc, #448]	; (800116c <sensdataget+0x1e8>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	; (800116c <sensdataget+0x1e8>)
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e0ce      	b.n	8001154 <sensdataget+0x1d0>
	}
	else
	{
		char *str;
		char *str2=NULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
		str=strtok_r(aSensData,"{=,}",&str2);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	496d      	ldr	r1, [pc, #436]	; (8001174 <sensdataget+0x1f0>)
 8000fc0:	486b      	ldr	r0, [pc, #428]	; (8001170 <sensdataget+0x1ec>)
 8000fc2:	f011 f97d 	bl	80122c0 <strtok_r>
 8000fc6:	6078      	str	r0, [r7, #4]

		while(str != NULL)
 8000fc8:	e0b8      	b.n	800113c <sensdataget+0x1b8>
		{
			str=strtok_r(NULL,"{=,}",&str2);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4969      	ldr	r1, [pc, #420]	; (8001174 <sensdataget+0x1f0>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f011 f975 	bl	80122c0 <strtok_r>
 8000fd6:	6078      	str	r0, [r7, #4]
			if(strcmp(str,"ST001")==0)
 8000fd8:	4967      	ldr	r1, [pc, #412]	; (8001178 <sensdataget+0x1f4>)
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f908 	bl	80001f0 <strcmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10b      	bne.n	8000ffe <sensdataget+0x7a>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4962      	ldr	r1, [pc, #392]	; (8001174 <sensdataget+0x1f0>)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f011 f967 	bl	80122c0 <strtok_r>
 8000ff2:	6078      	str	r0, [r7, #4]
				strcpy(Temp, str);
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4861      	ldr	r0, [pc, #388]	; (800117c <sensdataget+0x1f8>)
 8000ff8:	f011 f8fd 	bl	80121f6 <strcpy>
 8000ffc:	e09e      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"ST002")==0)
 8000ffe:	4960      	ldr	r1, [pc, #384]	; (8001180 <sensdataget+0x1fc>)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff f8f5 	bl	80001f0 <strcmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10b      	bne.n	8001024 <sensdataget+0xa0>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 800100c:	463b      	mov	r3, r7
 800100e:	461a      	mov	r2, r3
 8001010:	4958      	ldr	r1, [pc, #352]	; (8001174 <sensdataget+0x1f0>)
 8001012:	2000      	movs	r0, #0
 8001014:	f011 f954 	bl	80122c0 <strtok_r>
 8001018:	6078      	str	r0, [r7, #4]
				strcpy(Hum, str);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4859      	ldr	r0, [pc, #356]	; (8001184 <sensdataget+0x200>)
 800101e:	f011 f8ea 	bl	80121f6 <strcpy>
 8001022:	e08b      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"ST008")==0)
 8001024:	4958      	ldr	r1, [pc, #352]	; (8001188 <sensdataget+0x204>)
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff f8e2 	bl	80001f0 <strcmp>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10b      	bne.n	800104a <sensdataget+0xc6>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 8001032:	463b      	mov	r3, r7
 8001034:	461a      	mov	r2, r3
 8001036:	494f      	ldr	r1, [pc, #316]	; (8001174 <sensdataget+0x1f0>)
 8001038:	2000      	movs	r0, #0
 800103a:	f011 f941 	bl	80122c0 <strtok_r>
 800103e:	6078      	str	r0, [r7, #4]
				strcpy(Sun, str);
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4852      	ldr	r0, [pc, #328]	; (800118c <sensdataget+0x208>)
 8001044:	f011 f8d7 	bl	80121f6 <strcpy>
 8001048:	e078      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"ST010")==0)
 800104a:	4951      	ldr	r1, [pc, #324]	; (8001190 <sensdataget+0x20c>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff f8cf 	bl	80001f0 <strcmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d113      	bne.n	8001080 <sensdataget+0xfc>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 8001058:	463b      	mov	r3, r7
 800105a:	461a      	mov	r2, r3
 800105c:	4945      	ldr	r1, [pc, #276]	; (8001174 <sensdataget+0x1f0>)
 800105e:	2000      	movs	r0, #0
 8001060:	f011 f92e 	bl	80122c0 <strtok_r>
 8001064:	6078      	str	r0, [r7, #4]
				strcpy(Wind_direction, str);
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <sensdataget+0x210>)
 800106a:	f011 f8c4 	bl	80121f6 <strcpy>
				strcpy(Wind_d, str);
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4849      	ldr	r0, [pc, #292]	; (8001198 <sensdataget+0x214>)
 8001072:	f011 f8c0 	bl	80121f6 <strcpy>
				strcpy(Wind_direction, str);
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4846      	ldr	r0, [pc, #280]	; (8001194 <sensdataget+0x210>)
 800107a:	f011 f8bc 	bl	80121f6 <strcpy>
 800107e:	e05d      	b.n	800113c <sensdataget+0x1b8>

			}
			else if(strcmp(str,"ST009")==0)
 8001080:	4946      	ldr	r1, [pc, #280]	; (800119c <sensdataget+0x218>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff f8b4 	bl	80001f0 <strcmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10b      	bne.n	80010a6 <sensdataget+0x122>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 800108e:	463b      	mov	r3, r7
 8001090:	461a      	mov	r2, r3
 8001092:	4938      	ldr	r1, [pc, #224]	; (8001174 <sensdataget+0x1f0>)
 8001094:	2000      	movs	r0, #0
 8001096:	f011 f913 	bl	80122c0 <strtok_r>
 800109a:	6078      	str	r0, [r7, #4]
				strcpy(Wind_s, str);
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4840      	ldr	r0, [pc, #256]	; (80011a0 <sensdataget+0x21c>)
 80010a0:	f011 f8a9 	bl	80121f6 <strcpy>
 80010a4:	e04a      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"ST014")==0)
 80010a6:	493f      	ldr	r1, [pc, #252]	; (80011a4 <sensdataget+0x220>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff f8a1 	bl	80001f0 <strcmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <sensdataget+0x148>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 80010b4:	463b      	mov	r3, r7
 80010b6:	461a      	mov	r2, r3
 80010b8:	492e      	ldr	r1, [pc, #184]	; (8001174 <sensdataget+0x1f0>)
 80010ba:	2000      	movs	r0, #0
 80010bc:	f011 f900 	bl	80122c0 <strtok_r>
 80010c0:	6078      	str	r0, [r7, #4]
				strcpy(Rain, str);
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4838      	ldr	r0, [pc, #224]	; (80011a8 <sensdataget+0x224>)
 80010c6:	f011 f896 	bl	80121f6 <strcpy>
 80010ca:	e037      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"SMO")==0)
 80010cc:	4937      	ldr	r1, [pc, #220]	; (80011ac <sensdataget+0x228>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f88e 	bl	80001f0 <strcmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <sensdataget+0x16e>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 80010da:	463b      	mov	r3, r7
 80010dc:	461a      	mov	r2, r3
 80010de:	4925      	ldr	r1, [pc, #148]	; (8001174 <sensdataget+0x1f0>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f011 f8ed 	bl	80122c0 <strtok_r>
 80010e6:	6078      	str	r0, [r7, #4]
				strcpy(SMO, str);
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <sensdataget+0x22c>)
 80010ec:	f011 f883 	bl	80121f6 <strcpy>
 80010f0:	e024      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"STP")==0)
 80010f2:	4930      	ldr	r1, [pc, #192]	; (80011b4 <sensdataget+0x230>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff f87b 	bl	80001f0 <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <sensdataget+0x194>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 8001100:	463b      	mov	r3, r7
 8001102:	461a      	mov	r2, r3
 8001104:	491b      	ldr	r1, [pc, #108]	; (8001174 <sensdataget+0x1f0>)
 8001106:	2000      	movs	r0, #0
 8001108:	f011 f8da 	bl	80122c0 <strtok_r>
 800110c:	6078      	str	r0, [r7, #4]
				strcpy(STP, str);
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4829      	ldr	r0, [pc, #164]	; (80011b8 <sensdataget+0x234>)
 8001112:	f011 f870 	bl	80121f6 <strcpy>
 8001116:	e011      	b.n	800113c <sensdataget+0x1b8>
			}
			else if(strcmp(str,"SEC")==0)
 8001118:	4928      	ldr	r1, [pc, #160]	; (80011bc <sensdataget+0x238>)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f868 	bl	80001f0 <strcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10a      	bne.n	800113c <sensdataget+0x1b8>
			{
				str=strtok_r(NULL,"{=,}",&str2);
 8001126:	463b      	mov	r3, r7
 8001128:	461a      	mov	r2, r3
 800112a:	4912      	ldr	r1, [pc, #72]	; (8001174 <sensdataget+0x1f0>)
 800112c:	2000      	movs	r0, #0
 800112e:	f011 f8c7 	bl	80122c0 <strtok_r>
 8001132:	6078      	str	r0, [r7, #4]
				strcpy(SEC, str);
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4822      	ldr	r0, [pc, #136]	; (80011c0 <sensdataget+0x23c>)
 8001138:	f011 f85d 	bl	80121f6 <strcpy>
		while(str != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f af43 	bne.w	8000fca <sensdataget+0x46>
			}
		}
		SensData_index=0;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <sensdataget+0x1e8>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
		memset(aSensData,0,sizeof(aSensData));
 800114a:	2296      	movs	r2, #150	; 0x96
 800114c:	2100      	movs	r1, #0
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <sensdataget+0x1ec>)
 8001150:	f010 ff14 	bl	8011f7c <memset>
	}
	HAL_UART_Receive_IT(&huart7, &SensData, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	4904      	ldr	r1, [pc, #16]	; (8001168 <sensdataget+0x1e4>)
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <sensdataget+0x240>)
 800115a:	f006 ff74 	bl	8008046 <HAL_UART_Receive_IT>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000d1a 	.word	0x20000d1a
 800116c:	20000d1b 	.word	0x20000d1b
 8001170:	20000c84 	.word	0x20000c84
 8001174:	08013b4c 	.word	0x08013b4c
 8001178:	08013b54 	.word	0x08013b54
 800117c:	20000d1c 	.word	0x20000d1c
 8001180:	08013b5c 	.word	0x08013b5c
 8001184:	20000d28 	.word	0x20000d28
 8001188:	08013b64 	.word	0x08013b64
 800118c:	20000d34 	.word	0x20000d34
 8001190:	08013b6c 	.word	0x08013b6c
 8001194:	20000d44 	.word	0x20000d44
 8001198:	20000d50 	.word	0x20000d50
 800119c:	08013b74 	.word	0x08013b74
 80011a0:	20000d5c 	.word	0x20000d5c
 80011a4:	08013b7c 	.word	0x08013b7c
 80011a8:	20000d40 	.word	0x20000d40
 80011ac:	08013b84 	.word	0x08013b84
 80011b0:	20000d64 	.word	0x20000d64
 80011b4:	08013b88 	.word	0x08013b88
 80011b8:	20000d70 	.word	0x20000d70
 80011bc:	08013b8c 	.word	0x08013b8c
 80011c0:	20000d7c 	.word	0x20000d7c
 80011c4:	20000a98 	.word	0x20000a98

080011c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart7.Instance)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_UART_RxCpltCallback+0x30>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d101      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0x18>
	{
		sensdataget();
 80011dc:	f7ff fed2 	bl	8000f84 <sensdataget>
	}
	if(huart->Instance==huart3.Instance)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_UART_RxCpltCallback+0x34>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d101      	bne.n	80011f0 <HAL_UART_RxCpltCallback+0x28>
	{
		command();
 80011ec:	f000 fb3a 	bl	8001864 <command>
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000a98 	.word	0x20000a98
 80011fc:	20000b64 	.word	0x20000b64

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f001 f960 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f86e 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 fab0 	bl	8001770 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001210:	f000 f972 	bl	80014f8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001214:	f00a f872 	bl	800b2fc <MX_FATFS_Init>
  MX_UART8_Init();
 8001218:	f000 f9ee 	bl	80015f8 <MX_UART8_Init>
  MX_RTC_Init();
 800121c:	f000 f8d0 	bl	80013c0 <MX_RTC_Init>
  MX_TIM7_Init();
 8001220:	f000 f98a 	bl	8001538 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001224:	f000 fa3c 	bl	80016a0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001228:	f000 fa64 	bl	80016f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800122c:	f000 fa0e 	bl	800164c <MX_USART1_UART_Init>
  MX_UART7_Init();
 8001230:	f000 f9b8 	bl	80015a4 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8001234:	f010 f950 	bl	80114d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2101      	movs	r1, #1
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <main+0xb0>)
 800123e:	f002 f8f1 	bl	8003424 <HAL_GPIO_WritePin>
  afresult = f_mount(&afs, "/", 1);
 8001242:	2201      	movs	r2, #1
 8001244:	491b      	ldr	r1, [pc, #108]	; (80012b4 <main+0xb4>)
 8001246:	481c      	ldr	r0, [pc, #112]	; (80012b8 <main+0xb8>)
 8001248:	f00f fa7a 	bl	8010740 <f_mount>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <main+0xbc>)
 8001252:	701a      	strb	r2, [r3, #0]
  if (afresult!=FR_OK)
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <main+0xbc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <main+0x66>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <main+0xb0>)
 8001262:	f002 f8df 	bl	8003424 <HAL_GPIO_WritePin>
  }

  Unmount_SD("/");
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <main+0xb4>)
 8001268:	f7ff fa08 	bl	800067c <Unmount_SD>

  HAL_TIM_Base_Start_IT(&htim7);
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <main+0xc0>)
 800126e:	f006 fb3b 	bl	80078e8 <HAL_TIM_Base_Start_IT>
  sAlarm.AlarmTime.Seconds=0x00;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <main+0xc4>)
 8001274:	2200      	movs	r2, #0
 8001276:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <main+0xc4>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <main+0xc8>)
 800127c:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_A;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <main+0xc4>)
 8001280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
 8001286:	2201      	movs	r2, #1
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <main+0xc4>)
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <main+0xcc>)
 800128c:	f004 fc34 	bl	8005af8 <HAL_RTC_SetAlarm_IT>
  HAL_UART_Receive_IT(&huart3, &cm_Rx, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	490f      	ldr	r1, [pc, #60]	; (80012d0 <main+0xd0>)
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <main+0xd4>)
 8001296:	f006 fed6 	bl	8008046 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart7, &SensData, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <main+0xd8>)
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <main+0xdc>)
 80012a0:	f006 fed1 	bl	8008046 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  RTC_CalendarShow(aShowTime, aShowDate);
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <main+0xe0>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <main+0xe4>)
 80012a8:	f7ff fcda 	bl	8000c60 <RTC_CalendarShow>
 80012ac:	e7fa      	b.n	80012a4 <main+0xa4>
 80012ae:	bf00      	nop
 80012b0:	40020000 	.word	0x40020000
 80012b4:	08013b08 	.word	0x08013b08
 80012b8:	2000069c 	.word	0x2000069c
 80012bc:	20000698 	.word	0x20000698
 80012c0:	20000a50 	.word	0x20000a50
 80012c4:	20000640 	.word	0x20000640
 80012c8:	80808000 	.word	0x80808000
 80012cc:	200008cc 	.word	0x200008cc
 80012d0:	20000de0 	.word	0x20000de0
 80012d4:	20000b64 	.word	0x20000b64
 80012d8:	20000d1a 	.word	0x20000d1a
 80012dc:	20000a98 	.word	0x20000a98
 80012e0:	20000c78 	.word	0x20000c78
 80012e4:	20000c6c 	.word	0x20000c6c

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f010 fe40 	bl	8011f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemClock_Config+0xd0>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <SystemClock_Config+0xd0>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <SystemClock_Config+0xd0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemClock_Config+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <SystemClock_Config+0xd4>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001344:	2305      	movs	r3, #5
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800134e:	2301      	movs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800135c:	230c      	movs	r3, #12
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001360:	23a8      	movs	r3, #168	; 0xa8
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fb35 	bl	80049e0 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800137c:	f000 fc48 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2105      	movs	r1, #5
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fd96 	bl	8004ed0 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013aa:	f000 fc31 	bl	8001c10 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	; 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	; 0x40
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2228      	movs	r2, #40	; 0x28
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f010 fdcb 	bl	8011f7c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <MX_RTC_Init+0x130>)
 80013e8:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <MX_RTC_Init+0x134>)
 80013ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <MX_RTC_Init+0x130>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <MX_RTC_Init+0x130>)
 80013f4:	227f      	movs	r2, #127	; 0x7f
 80013f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MX_RTC_Init+0x130>)
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <MX_RTC_Init+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_RTC_Init+0x130>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <MX_RTC_Init+0x130>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001410:	4837      	ldr	r0, [pc, #220]	; (80014f0 <MX_RTC_Init+0x130>)
 8001412:	f004 f8fd 	bl	8005610 <HAL_RTC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800141c:	f000 fbf8 	bl	8001c10 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) !=0x32F2)
 8001420:	2100      	movs	r1, #0
 8001422:	4833      	ldr	r0, [pc, #204]	; (80014f0 <MX_RTC_Init+0x130>)
 8001424:	f004 fdf1 	bl	800600a <HAL_RTCEx_BKUPRead>
 8001428:	4603      	mov	r3, r0
 800142a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800142e:	4293      	cmp	r3, r2
 8001430:	d059      	beq.n	80014e6 <MX_RTC_Init+0x126>
    {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8001432:	2317      	movs	r3, #23
 8001434:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 59;
 8001438:	233b      	movs	r3, #59	; 0x3b
 800143a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 59;
 800143e:	233b      	movs	r3, #59	; 0x3b
 8001440:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800144c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	4826      	ldr	r0, [pc, #152]	; (80014f0 <MX_RTC_Init+0x130>)
 8001456:	f004 f983 	bl	8005760 <HAL_RTC_SetTime>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001460:	f000 fbd6 	bl	8001c10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 8001476:	2316      	movs	r3, #22
 8001478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800147c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_RTC_Init+0x130>)
 8001486:	f004 fa63 	bl	8005950 <HAL_RTC_SetDate>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8001490:	f000 fbbe 	bl	8001c10 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80014be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <MX_RTC_Init+0x130>)
 80014cc:	f004 fb14 	bl	8005af8 <HAL_RTC_SetAlarm_IT>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 80014d6:	f000 fb9b 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
 	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 80014da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80014de:	2100      	movs	r1, #0
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_RTC_Init+0x130>)
 80014e2:	f004 fd78 	bl	8005fd6 <HAL_RTCEx_BKUPWrite>
   }
  /* USER CODE END RTC_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200008cc 	.word	0x200008cc
 80014f4:	40002800 	.word	0x40002800

080014f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <MX_SDIO_SD_Init+0x3c>)
 8001500:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <MX_SDIO_SD_Init+0x38>)
 8001522:	220a      	movs	r2, #10
 8001524:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	2000090c 	.word	0x2000090c
 8001534:	40012c00 	.word	0x40012c00

08001538 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM7_Init+0x64>)
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_TIM7_Init+0x68>)
 800154a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_TIM7_Init+0x64>)
 800154e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001552:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_TIM7_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_TIM7_Init+0x64>)
 800155c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001560:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_TIM7_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_TIM7_Init+0x64>)
 800156a:	f006 f96e 	bl	800784a <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001574:	f000 fb4c 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_TIM7_Init+0x64>)
 8001586:	f006 fbef 	bl	8007d68 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 fb3e 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000a50 	.word	0x20000a50
 80015a0:	40001400 	.word	0x40001400

080015a4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_UART7_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_UART7_Init+0x4c>)
 80015dc:	f006 fc54 	bl	8007e88 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80015e6:	f000 fb13 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000a98 	.word	0x20000a98
 80015f4:	40007800 	.word	0x40007800

080015f8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_UART8_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MX_UART8_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_UART8_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_UART8_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_UART8_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_UART8_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_UART8_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_UART8_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_UART8_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_UART8_Init+0x4c>)
 8001630:	f006 fc2a 	bl	8007e88 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800163a:	f000 fae9 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000adc 	.word	0x20000adc
 8001648:	40007c00 	.word	0x40007c00

0800164c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART1_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001684:	f006 fc00 	bl	8007e88 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f000 fabf 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000b20 	.word	0x20000b20
 800169c:	40011000 	.word	0x40011000

080016a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_USART3_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016da:	f006 fbd5 	bl	8007e88 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80016e4:	f000 fa94 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000b64 	.word	0x20000b64
 80016f0:	40004800 	.word	0x40004800

080016f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_DMA_Init+0x78>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a1a      	ldr	r2, [pc, #104]	; (800176c <MX_DMA_Init+0x78>)
 8001704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_DMA_Init+0x78>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_DMA_Init+0x78>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_DMA_Init+0x78>)
 8001720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_DMA_Init+0x78>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200e      	movs	r0, #14
 8001738:	f001 f871 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800173c:	200e      	movs	r0, #14
 800173e:	f001 f88a 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	203b      	movs	r0, #59	; 0x3b
 8001748:	f001 f869 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800174c:	203b      	movs	r0, #59	; 0x3b
 800174e:	f001 f882 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2045      	movs	r0, #69	; 0x45
 8001758:	f001 f861 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800175c:	2045      	movs	r0, #69	; 0x45
 800175e:	f001 f87a 	bl	8002856 <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <MX_GPIO_Init+0xec>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a33      	ldr	r2, [pc, #204]	; (800185c <MX_GPIO_Init+0xec>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <MX_GPIO_Init+0xec>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xec>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <MX_GPIO_Init+0xec>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_GPIO_Init+0xec>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_GPIO_Init+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <MX_GPIO_Init+0xec>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_GPIO_Init+0xec>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_GPIO_Init+0xec>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <MX_GPIO_Init+0xec>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_GPIO_Init+0xec>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_GPIO_Init+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_GPIO_Init+0xec>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_GPIO_Init+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_GPIO_Init+0xec>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <MX_GPIO_Init+0xec>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_GPIO_Init+0xec>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2103      	movs	r1, #3
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <MX_GPIO_Init+0xf0>)
 8001834:	f001 fdf6 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001838:	2303      	movs	r3, #3
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_GPIO_Init+0xf0>)
 8001850:	f001 fc3c 	bl	80030cc <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <command>:

/* USER CODE BEGIN 4 */
void command()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af02      	add	r7, sp, #8
	int cnt_read=0;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (cm_Rx!= '*' && rx_index < 64)
 800186e:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <command+0x1f0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b2a      	cmp	r3, #42	; 0x2a
 8001874:	d00f      	beq.n	8001896 <command+0x32>
 8001876:	4b78      	ldr	r3, [pc, #480]	; (8001a58 <command+0x1f4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b3f      	cmp	r3, #63	; 0x3f
 800187c:	d80b      	bhi.n	8001896 <command+0x32>
	{
		recvbf[rx_index++]=cm_Rx;
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <command+0x1f4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	b2d1      	uxtb	r1, r2
 8001886:	4a74      	ldr	r2, [pc, #464]	; (8001a58 <command+0x1f4>)
 8001888:	7011      	strb	r1, [r2, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <command+0x1f0>)
 800188e:	7819      	ldrb	r1, [r3, #0]
 8001890:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <command+0x1f8>)
 8001892:	5499      	strb	r1, [r3, r2]
 8001894:	e198      	b.n	8001bc8 <command+0x364>
	}
	else
	{
		if(recvbf[0]=='#')
 8001896:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <command+0x1f8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b23      	cmp	r3, #35	; 0x23
 800189c:	f040 8191 	bne.w	8001bc2 <command+0x35e>
		{
			if(recvbf[1]=='$')
 80018a0:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <command+0x1f8>)
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	2b24      	cmp	r3, #36	; 0x24
 80018a6:	d12d      	bne.n	8001904 <command+0xa0>
			{
				for( cnt_read=0; cnt_read<64; cnt_read++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e011      	b.n	80018d2 <command+0x6e>
				{
					if(recvbf[2+cnt_read]!='%')
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	3302      	adds	r3, #2
 80018b2:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <command+0x1f8>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	2b25      	cmp	r3, #37	; 0x25
 80018b8:	d008      	beq.n	80018cc <command+0x68>
					{
						readF[cnt_read]=recvbf[2+cnt_read];
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	3302      	adds	r3, #2
 80018be:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <command+0x1f8>)
 80018c0:	5cd1      	ldrb	r1, [r2, r3]
 80018c2:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <command+0x1fc>)
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	4413      	add	r3, r2
 80018c8:	460a      	mov	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
				for( cnt_read=0; cnt_read<64; cnt_read++)
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	3301      	adds	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	2b3f      	cmp	r3, #63	; 0x3f
 80018d6:	ddea      	ble.n	80018ae <command+0x4a>
					}
				}
				cnt_read=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
				Mount_SD("/");
 80018dc:	4861      	ldr	r0, [pc, #388]	; (8001a64 <command+0x200>)
 80018de:	f7fe fe9d 	bl	800061c <Mount_SD>
				Read_File(readF);
 80018e2:	485f      	ldr	r0, [pc, #380]	; (8001a60 <command+0x1fc>)
 80018e4:	f7fe ff8c 	bl	8000800 <Read_File>
				Unmount_SD("/");
 80018e8:	485e      	ldr	r0, [pc, #376]	; (8001a64 <command+0x200>)
 80018ea:	f7fe fec7 	bl	800067c <Unmount_SD>
				memset(readF, 0, sizeof(readF));
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	2100      	movs	r1, #0
 80018f2:	485b      	ldr	r0, [pc, #364]	; (8001a60 <command+0x1fc>)
 80018f4:	f010 fb42 	bl	8011f7c <memset>
				memset(recvbf, 0, sizeof(recvbf));
 80018f8:	2240      	movs	r2, #64	; 0x40
 80018fa:	2100      	movs	r1, #0
 80018fc:	4857      	ldr	r0, [pc, #348]	; (8001a5c <command+0x1f8>)
 80018fe:	f010 fb3d 	bl	8011f7c <memset>
 8001902:	e15e      	b.n	8001bc2 <command+0x35e>

			}
			else if(recvbf[1]=='t')//time setup
 8001904:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <command+0x1f8>)
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b74      	cmp	r3, #116	; 0x74
 800190a:	f040 8085 	bne.w	8001a18 <command+0x1b4>
			{
				for(int i=0; i<64; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
 8001912:	e011      	b.n	8001938 <command+0xd4>
				{
					if(recvbf[2+i]=='%')
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	3302      	adds	r3, #2
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <command+0x1f8>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b25      	cmp	r3, #37	; 0x25
 800191e:	d00f      	beq.n	8001940 <command+0xdc>
					{
						break;
					}
					else
					{
						readF[i]=recvbf[2+i];
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	3302      	adds	r3, #2
 8001924:	4a4d      	ldr	r2, [pc, #308]	; (8001a5c <command+0x1f8>)
 8001926:	5cd1      	ldrb	r1, [r2, r3]
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <command+0x1fc>)
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	4413      	add	r3, r2
 800192e:	460a      	mov	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<64; i++)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	3301      	adds	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	2b3f      	cmp	r3, #63	; 0x3f
 800193c:	ddea      	ble.n	8001914 <command+0xb0>
 800193e:	e000      	b.n	8001942 <command+0xde>
						break;
 8001940:	bf00      	nop
					}
				}
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001942:	2200      	movs	r2, #0
 8001944:	4948      	ldr	r1, [pc, #288]	; (8001a68 <command+0x204>)
 8001946:	4849      	ldr	r0, [pc, #292]	; (8001a6c <command+0x208>)
 8001948:	f003 ffa4 	bl	8005894 <HAL_RTC_GetTime>

				h=atoi(strtok(readF,"."));
 800194c:	4948      	ldr	r1, [pc, #288]	; (8001a70 <command+0x20c>)
 800194e:	4844      	ldr	r0, [pc, #272]	; (8001a60 <command+0x1fc>)
 8001950:	f010 fc5a 	bl	8012208 <strtok>
 8001954:	4603      	mov	r3, r0
 8001956:	4618      	mov	r0, r3
 8001958:	f010 faca 	bl	8011ef0 <atoi>
 800195c:	4603      	mov	r3, r0
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <command+0x210>)
 8001962:	701a      	strb	r2, [r3, #0]
				m=atoi(strtok(NULL,"."));
 8001964:	4942      	ldr	r1, [pc, #264]	; (8001a70 <command+0x20c>)
 8001966:	2000      	movs	r0, #0
 8001968:	f010 fc4e 	bl	8012208 <strtok>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f010 fabe 	bl	8011ef0 <atoi>
 8001974:	4603      	mov	r3, r0
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <command+0x214>)
 800197a:	701a      	strb	r2, [r3, #0]
				s=atoi(strtok(NULL,"."));
 800197c:	493c      	ldr	r1, [pc, #240]	; (8001a70 <command+0x20c>)
 800197e:	2000      	movs	r0, #0
 8001980:	f010 fc42 	bl	8012208 <strtok>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	f010 fab2 	bl	8011ef0 <atoi>
 800198c:	4603      	mov	r3, r0
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <command+0x218>)
 8001992:	701a      	strb	r2, [r3, #0]

				sTime.Hours=h;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <command+0x210>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <command+0x204>)
 800199a:	701a      	strb	r2, [r3, #0]
				sTime.Minutes=m;
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <command+0x214>)
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <command+0x204>)
 80019a2:	705a      	strb	r2, [r3, #1]
				sTime.Seconds=s;
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <command+0x218>)
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <command+0x204>)
 80019aa:	709a      	strb	r2, [r3, #2]
				sTime.TimeFormat = RTC_HOURFORMAT_24;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <command+0x204>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	70da      	strb	r2, [r3, #3]
				char bshowtime[32]={0};
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	619a      	str	r2, [r3, #24]
				sprintf(bshowtime,"\r\n**Time Setup %02d:%02d:%02d \r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <command+0x204>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <command+0x204>)
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <command+0x204>)
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	4638      	mov	r0, r7
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	4928      	ldr	r1, [pc, #160]	; (8001a80 <command+0x21c>)
 80019e0:	f010 fbda 	bl	8012198 <siprintf>
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019e4:	2200      	movs	r2, #0
 80019e6:	4920      	ldr	r1, [pc, #128]	; (8001a68 <command+0x204>)
 80019e8:	4820      	ldr	r0, [pc, #128]	; (8001a6c <command+0x208>)
 80019ea:	f003 feb9 	bl	8005760 <HAL_RTC_SetTime>
				HAL_UART_Transmit(&huart3, bshowtime, sizeof(bshowtime), HAL_MAX_DELAY);
 80019ee:	4639      	mov	r1, r7
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	2220      	movs	r2, #32
 80019f6:	4823      	ldr	r0, [pc, #140]	; (8001a84 <command+0x220>)
 80019f8:	f006 fa93 	bl	8007f22 <HAL_UART_Transmit>
				rx_index =0;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <command+0x1f4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
				memset(readF, 0, sizeof(readF));
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	2100      	movs	r1, #0
 8001a06:	4816      	ldr	r0, [pc, #88]	; (8001a60 <command+0x1fc>)
 8001a08:	f010 fab8 	bl	8011f7c <memset>
				memset(recvbf, 0, sizeof(recvbf));
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <command+0x1f8>)
 8001a12:	f010 fab3 	bl	8011f7c <memset>
 8001a16:	e0d4      	b.n	8001bc2 <command+0x35e>

			}
			else if(recvbf[1]=='d')//date setup
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <command+0x1f8>)
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	f040 809c 	bne.w	8001b5a <command+0x2f6>
			{
				for(int i=0; i<64; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e011      	b.n	8001a4c <command+0x1e8>
				{
					if(recvbf[2+i]=='%')
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <command+0x1f8>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	2b25      	cmp	r3, #37	; 0x25
 8001a32:	d029      	beq.n	8001a88 <command+0x224>
					{
						break;
					}
					else
					{
						readF[i]=recvbf[2+i];
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3302      	adds	r3, #2
 8001a38:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <command+0x1f8>)
 8001a3a:	5cd1      	ldrb	r1, [r2, r3]
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <command+0x1fc>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	4413      	add	r3, r2
 8001a42:	460a      	mov	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<64; i++)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a50:	ddea      	ble.n	8001a28 <command+0x1c4>
 8001a52:	e01a      	b.n	8001a8a <command+0x226>
 8001a54:	20000de0 	.word	0x20000de0
 8001a58:	20000de1 	.word	0x20000de1
 8001a5c:	20000da0 	.word	0x20000da0
 8001a60:	20000de4 	.word	0x20000de4
 8001a64:	08013b08 	.word	0x08013b08
 8001a68:	20000668 	.word	0x20000668
 8001a6c:	200008cc 	.word	0x200008cc
 8001a70:	08013b90 	.word	0x08013b90
 8001a74:	20000e24 	.word	0x20000e24
 8001a78:	20000e25 	.word	0x20000e25
 8001a7c:	20000e26 	.word	0x20000e26
 8001a80:	08013b94 	.word	0x08013b94
 8001a84:	20000b64 	.word	0x20000b64
						break;
 8001a88:	bf00      	nop
					}
				}

				Y=atoi(strtok(readF,"."));
 8001a8a:	4954      	ldr	r1, [pc, #336]	; (8001bdc <command+0x378>)
 8001a8c:	4854      	ldr	r0, [pc, #336]	; (8001be0 <command+0x37c>)
 8001a8e:	f010 fbbb 	bl	8012208 <strtok>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f010 fa2b 	bl	8011ef0 <atoi>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <command+0x380>)
 8001aa0:	701a      	strb	r2, [r3, #0]
				M=atoi(strtok(NULL,"."));
 8001aa2:	494e      	ldr	r1, [pc, #312]	; (8001bdc <command+0x378>)
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f010 fbaf 	bl	8012208 <strtok>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f010 fa1f 	bl	8011ef0 <atoi>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <command+0x384>)
 8001ab8:	701a      	strb	r2, [r3, #0]
				D=atoi(strtok(NULL,"."));
 8001aba:	4948      	ldr	r1, [pc, #288]	; (8001bdc <command+0x378>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f010 fba3 	bl	8012208 <strtok>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f010 fa13 	bl	8011ef0 <atoi>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <command+0x388>)
 8001ad0:	701a      	strb	r2, [r3, #0]
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4946      	ldr	r1, [pc, #280]	; (8001bf0 <command+0x38c>)
 8001ad6:	4847      	ldr	r0, [pc, #284]	; (8001bf4 <command+0x390>)
 8001ad8:	f003 ff3a 	bl	8005950 <HAL_RTC_SetDate>
				sDate.Year=Y;
 8001adc:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <command+0x380>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <command+0x38c>)
 8001ae2:	70da      	strb	r2, [r3, #3]
				sDate.Month=M;
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <command+0x384>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <command+0x38c>)
 8001aea:	705a      	strb	r2, [r3, #1]
				sDate.Date=D;
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <command+0x388>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <command+0x38c>)
 8001af2:	709a      	strb	r2, [r3, #2]
				char bshowdate[32]={0};
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	619a      	str	r2, [r3, #24]
				sprintf(bshowdate,"\r\n**Date Setup %02d.%02d.%02d. \r\n",sDate.Year, sDate.Month, sDate.Date);
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <command+0x38c>)
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <command+0x38c>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <command+0x38c>)
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <command+0x394>)
 8001b22:	f010 fb39 	bl	8012198 <siprintf>
				HAL_UART_Transmit(&huart3, bshowdate, sizeof(bshowdate), HAL_MAX_DELAY);
 8001b26:	4639      	mov	r1, r7
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	4833      	ldr	r0, [pc, #204]	; (8001bfc <command+0x398>)
 8001b30:	f006 f9f7 	bl	8007f22 <HAL_UART_Transmit>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001b34:	2200      	movs	r2, #0
 8001b36:	492e      	ldr	r1, [pc, #184]	; (8001bf0 <command+0x38c>)
 8001b38:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <command+0x390>)
 8001b3a:	f003 ff09 	bl	8005950 <HAL_RTC_SetDate>
				rx_index =0;
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <command+0x39c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
				memset(readF, 0, sizeof(readF));
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <command+0x37c>)
 8001b4a:	f010 fa17 	bl	8011f7c <memset>
				memset(recvbf, 0, sizeof(recvbf));
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	2100      	movs	r1, #0
 8001b52:	482c      	ldr	r0, [pc, #176]	; (8001c04 <command+0x3a0>)
 8001b54:	f010 fa12 	bl	8011f7c <memset>
 8001b58:	e033      	b.n	8001bc2 <command+0x35e>

			}
			else if(recvbf[1]=='s')//scan file
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <command+0x3a0>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2b73      	cmp	r3, #115	; 0x73
 8001b60:	d12f      	bne.n	8001bc2 <command+0x35e>
			{
				for(int i=0; i<64; i++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
 8001b66:	e011      	b.n	8001b8c <command+0x328>
				{
					if(recvbf[2+i]=='%')
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <command+0x3a0>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	2b25      	cmp	r3, #37	; 0x25
 8001b72:	d00f      	beq.n	8001b94 <command+0x330>
					{
						break;
					}
					else
					{
						readF[i]=recvbf[2+i];
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	3302      	adds	r3, #2
 8001b78:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <command+0x3a0>)
 8001b7a:	5cd1      	ldrb	r1, [r2, r3]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <command+0x37c>)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	4413      	add	r3, r2
 8001b82:	460a      	mov	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<64; i++)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b90:	ddea      	ble.n	8001b68 <command+0x304>
 8001b92:	e000      	b.n	8001b96 <command+0x332>
						break;
 8001b94:	bf00      	nop
					}
				}
				Mount_SD("/");
 8001b96:	481c      	ldr	r0, [pc, #112]	; (8001c08 <command+0x3a4>)
 8001b98:	f7fe fd40 	bl	800061c <Mount_SD>
				Scan_SD(readF);
 8001b9c:	4810      	ldr	r0, [pc, #64]	; (8001be0 <command+0x37c>)
 8001b9e:	f7fe fd8f 	bl	80006c0 <Scan_SD>
				Unmount_SD("/");
 8001ba2:	4819      	ldr	r0, [pc, #100]	; (8001c08 <command+0x3a4>)
 8001ba4:	f7fe fd6a 	bl	800067c <Unmount_SD>
				rx_index =0;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <command+0x39c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
				memset(readF, 0, sizeof(readF));
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <command+0x37c>)
 8001bb4:	f010 f9e2 	bl	8011f7c <memset>
				memset(recvbf, 0, sizeof(recvbf));
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4811      	ldr	r0, [pc, #68]	; (8001c04 <command+0x3a0>)
 8001bbe:	f010 f9dd 	bl	8011f7c <memset>

			}
		}
		rx_index =0;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <command+0x39c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, &cm_Rx, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4910      	ldr	r1, [pc, #64]	; (8001c0c <command+0x3a8>)
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <command+0x398>)
 8001bce:	f006 fa3a 	bl	8008046 <HAL_UART_Receive_IT>
}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	; 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08013b90 	.word	0x08013b90
 8001be0:	20000de4 	.word	0x20000de4
 8001be4:	20000e27 	.word	0x20000e27
 8001be8:	20000e28 	.word	0x20000e28
 8001bec:	20000e29 	.word	0x20000e29
 8001bf0:	2000067c 	.word	0x2000067c
 8001bf4:	200008cc 	.word	0x200008cc
 8001bf8:	08013bb8 	.word	0x08013bb8
 8001bfc:	20000b64 	.word	0x20000b64
 8001c00:	20000de1 	.word	0x20000de1
 8001c04:	20000da0 	.word	0x20000da0
 8001c08:	08013b08 	.word	0x08013b08
 8001c0c:	20000de0 	.word	0x20000de0

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4801      	ldr	r0, [pc, #4]	; (8001c24 <Error_Handler+0x14>)
 8001c1e:	f001 fc01 	bl	8003424 <HAL_GPIO_WritePin>
 8001c22:	e7f9      	b.n	8001c18 <Error_Handler+0x8>
 8001c24:	40020000 	.word	0x40020000

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2230      	movs	r2, #48	; 0x30
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f010 f977 	bl	8011f7c <memset>
  if(hrtc->Instance==RTC)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_RTC_MspInit+0x5c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d119      	bne.n	8001ccc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 faf2 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001cb2:	f7ff ffad 	bl	8001c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_RTC_MspInit+0x60>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	2029      	movs	r0, #41	; 0x29
 8001cc2:	f000 fdac 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cc6:	2029      	movs	r0, #41	; 0x29
 8001cc8:	f000 fdc5 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3738      	adds	r7, #56	; 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40002800 	.word	0x40002800
 8001cd8:	42470e3c 	.word	0x42470e3c

08001cdc <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_RTC_MspDeInit+0x28>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d105      	bne.n	8001cfa <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RTC_MspDeInit+0x2c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001cf4:	2029      	movs	r0, #41	; 0x29
 8001cf6:	f000 fdbc 	bl	8002872 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40002800 	.word	0x40002800
 8001d08:	42470e3c 	.word	0x42470e3c

08001d0c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a65      	ldr	r2, [pc, #404]	; (8001ec0 <HAL_SD_MspInit+0x1b4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 80c3 	bne.w	8001eb6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_SD_MspInit+0x1b8>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d96:	230c      	movs	r3, #12
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4849      	ldr	r0, [pc, #292]	; (8001ec8 <HAL_SD_MspInit+0x1bc>)
 8001da2:	f001 f993 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da6:	2304      	movs	r3, #4
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001db6:	230c      	movs	r3, #12
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4842      	ldr	r0, [pc, #264]	; (8001ecc <HAL_SD_MspInit+0x1c0>)
 8001dc2:	f001 f983 	bl	80030cc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_SD_MspInit+0x1c8>)
 8001dca:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001dcc:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dee:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e04:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e08:	2204      	movs	r2, #4
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e0e:	2203      	movs	r2, #3
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001e22:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e24:	f000 fd44 	bl	80028b0 <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001e2e:	f7ff feef 	bl	8001c10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_SD_MspInit+0x1c4>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_SD_MspInit+0x1d0>)
 8001e42:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e66:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e72:	2220      	movs	r2, #32
 8001e74:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e7c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e80:	2204      	movs	r2, #4
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e86:	2203      	movs	r2, #3
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001e9c:	f000 fd08 	bl	80028b0 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8001ea6:	f7ff feb3 	bl	8001c10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eb0:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_SD_MspInit+0x1cc>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	20000990 	.word	0x20000990
 8001ed4:	40026458 	.word	0x40026458
 8001ed8:	200009f0 	.word	0x200009f0
 8001edc:	400264a0 	.word	0x400264a0

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_TIM_Base_MspInit+0x48>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_TIM_Base_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2037      	movs	r0, #55	; 0x37
 8001f14:	f000 fc83 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f18:	2037      	movs	r0, #55	; 0x37
 8001f1a:	f000 fc9c 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40001400 	.word	0x40001400
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b090      	sub	sp, #64	; 0x40
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8c      	ldr	r2, [pc, #560]	; (8002180 <HAL_UART_MspInit+0x250>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d135      	bne.n	8001fbe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f56:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a8a      	ldr	r2, [pc, #552]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
 8001f72:	4b84      	ldr	r3, [pc, #528]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a83      	ldr	r2, [pc, #524]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4878      	ldr	r0, [pc, #480]	; (8002188 <HAL_UART_MspInit+0x258>)
 8001fa8:	f001 f890 	bl	80030cc <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2052      	movs	r0, #82	; 0x52
 8001fb2:	f000 fc34 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001fb6:	2052      	movs	r0, #82	; 0x52
 8001fb8:	f000 fc4d 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fbc:	e0db      	b.n	8002176 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==UART8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a72      	ldr	r2, [pc, #456]	; (800218c <HAL_UART_MspInit+0x25c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d134      	bne.n	8002032 <HAL_UART_MspInit+0x102>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a65      	ldr	r2, [pc, #404]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_UART_MspInit+0x254>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	2303      	movs	r3, #3
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002010:	2308      	movs	r3, #8
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	485b      	ldr	r0, [pc, #364]	; (8002188 <HAL_UART_MspInit+0x258>)
 800201c:	f001 f856 	bl	80030cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2102      	movs	r1, #2
 8002024:	2053      	movs	r0, #83	; 0x53
 8002026:	f000 fbfa 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800202a:	2053      	movs	r0, #83	; 0x53
 800202c:	f000 fc13 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 8002030:	e0a1      	b.n	8002176 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_UART_MspInit+0x260>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d134      	bne.n	80020a6 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART1_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_UART_MspInit+0x254>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_UART_MspInit+0x254>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_UART_MspInit+0x254>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_UART_MspInit+0x254>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_UART_MspInit+0x254>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	6313      	str	r3, [r2, #48]	; 0x30
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_UART_MspInit+0x254>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002074:	23c0      	movs	r3, #192	; 0xc0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002084:	2307      	movs	r3, #7
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	4841      	ldr	r0, [pc, #260]	; (8002194 <HAL_UART_MspInit+0x264>)
 8002090:	f001 f81c 	bl	80030cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2104      	movs	r1, #4
 8002098:	2025      	movs	r0, #37	; 0x25
 800209a:	f000 fbc0 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800209e:	2025      	movs	r0, #37	; 0x25
 80020a0:	f000 fbd9 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 80020a4:	e067      	b.n	8002176 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <HAL_UART_MspInit+0x268>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d162      	bne.n	8002176 <HAL_UART_MspInit+0x246>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_UART_MspInit+0x254>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fa:	2307      	movs	r3, #7
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	4825      	ldr	r0, [pc, #148]	; (800219c <HAL_UART_MspInit+0x26c>)
 8002106:	f000 ffe1 	bl	80030cc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800210c:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x274>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002116:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800214a:	4815      	ldr	r0, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800214c:	f000 fbb0 	bl	80028b0 <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8002156:	f7ff fd5b 	bl	8001c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_UART_MspInit+0x270>)
 800215e:	635a      	str	r2, [r3, #52]	; 0x34
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_UART_MspInit+0x270>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2103      	movs	r1, #3
 800216a:	2027      	movs	r0, #39	; 0x27
 800216c:	f000 fb57 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002170:	2027      	movs	r0, #39	; 0x27
 8002172:	f000 fb70 	bl	8002856 <HAL_NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3740      	adds	r7, #64	; 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40007800 	.word	0x40007800
 8002184:	40023800 	.word	0x40023800
 8002188:	40021000 	.word	0x40021000
 800218c:	40007c00 	.word	0x40007c00
 8002190:	40011000 	.word	0x40011000
 8002194:	40020400 	.word	0x40020400
 8002198:	40004800 	.word	0x40004800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	20000ba8 	.word	0x20000ba8
 80021a4:	40026058 	.word	0x40026058

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f000 f9ba 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA1_Stream3_IRQHandler+0x10>)
 8002202:	f000 fced 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000ba8 	.word	0x20000ba8

08002210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <USART1_IRQHandler+0x10>)
 8002216:	f005 ff47 	bl	80080a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000b20 	.word	0x20000b20

08002224 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <USART3_IRQHandler+0x10>)
 800222a:	f005 ff3d 	bl	80080a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000b64 	.word	0x20000b64

08002238 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <RTC_Alarm_IRQHandler+0x10>)
 800223e:	f003 fd9d 	bl	8005d7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200008cc 	.word	0x200008cc

0800224c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM7_IRQHandler+0x10>)
 8002252:	f005 fbb9 	bl	80079c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000a50 	.word	0x20000a50

08002260 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <DMA2_Stream3_IRQHandler+0x10>)
 8002266:	f000 fcbb 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000990 	.word	0x20000990

08002274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <OTG_FS_IRQHandler+0x10>)
 800227a:	f001 fa56 	bl	800372a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20001350 	.word	0x20001350

08002288 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <DMA2_Stream6_IRQHandler+0x10>)
 800228e:	f000 fca7 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200009f0 	.word	0x200009f0

0800229c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <UART7_IRQHandler+0x10>)
 80022a2:	f005 ff01 	bl	80080a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000a98 	.word	0x20000a98

080022b0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <UART8_IRQHandler+0x10>)
 80022b6:	f005 fef7 	bl	80080a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000adc 	.word	0x20000adc

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022de:	f00f fe13 	bl	8011f08 <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
	return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002306:	e7fe      	b.n	8002306 <_exit+0x12>

08002308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e00a      	b.n	8002330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800231a:	f3af 8000 	nop.w
 800231e:	4601      	mov	r1, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf0      	blt.n	800231a <_read+0x12>
	}

return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e009      	b.n	8002368 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	60ba      	str	r2, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	dbf1      	blt.n	8002354 <_write+0x12>
	}
	return len;
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_close>:

int _close(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	return -1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a2:	605a      	str	r2, [r3, #4]
	return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_isatty>:

int _isatty(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
	return 1;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f00f fd78 	bl	8011f08 <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20030000 	.word	0x20030000
 8002444:	00008000 	.word	0x00008000
 8002448:	20000e2c 	.word	0x20000e2c
 800244c:	20001ae8 	.word	0x20001ae8

08002450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002490:	4c0b      	ldr	r4, [pc, #44]	; (80024c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249e:	f7ff ffd7 	bl	8002450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f00f fd37 	bl	8011f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7fe feab 	bl	8001200 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80024b8:	08013f8c 	.word	0x08013f8c
  ldr r2, =_sbss
 80024bc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80024c0:	20001ae4 	.word	0x20001ae4

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_Init+0x40>)
 80024d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_Init+0x40>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_Init+0x40>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 f989 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f6:	200f      	movs	r0, #15
 80024f8:	f000 f808 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fc:	f7ff fb94 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x54>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x58>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f9b3 	bl	8002896 <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f969 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_InitTick+0x5c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000018 	.word	0x20000018
 8002564:	20000020 	.word	0x20000020
 8002568:	2000001c 	.word	0x2000001c

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000020 	.word	0x20000020
 8002590:	20000e30 	.word	0x20000e30

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000e30 	.word	0x20000e30

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000020 	.word	0x20000020

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db12      	blt.n	80026cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	490a      	ldr	r1, [pc, #40]	; (80026d8 <__NVIC_DisableIRQ+0x44>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	3320      	adds	r3, #32
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026c0:	f3bf 8f4f 	dsb	sy
}
 80026c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026c6:	f3bf 8f6f 	isb	sy
}
 80026ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800279c:	f3bf 8f4f 	dsb	sy
}
 80027a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <__NVIC_SystemReset+0x24>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027aa:	4904      	ldr	r1, [pc, #16]	; (80027bc <__NVIC_SystemReset+0x24>)
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_SystemReset+0x28>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027b2:	f3bf 8f4f 	dsb	sy
}
 80027b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <__NVIC_SystemReset+0x20>
 80027bc:	e000ed00 	.word	0xe000ed00
 80027c0:	05fa0004 	.word	0x05fa0004

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff78 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff feef 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff04 	bl	800263c <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff78 	bl	8002730 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff47 	bl	80026dc <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fef7 	bl	8002658 <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff07 	bl	8002694 <__NVIC_DisableIRQ>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002892:	f7ff ff81 	bl	8002798 <__NVIC_SystemReset>

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff90 	bl	80027c4 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff fe6a 	bl	8002594 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e099      	b.n	8002a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ec:	e00f      	b.n	800290e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ee:	f7ff fe51 	bl	8002594 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d908      	bls.n	800290e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2203      	movs	r2, #3
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e078      	b.n	8002a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e8      	bne.n	80028ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_DMA_Init+0x158>)
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2b04      	cmp	r3, #4
 8002966:	d107      	bne.n	8002978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4313      	orrs	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d117      	bne.n	80029d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb0d 	bl	8002fd4 <DMA_CheckFifoParam>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029ce:	2301      	movs	r3, #1
 80029d0:	e016      	b.n	8002a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fac4 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	223f      	movs	r2, #63	; 0x3f
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	f010803f 	.word	0xf010803f

08002a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Start_IT+0x26>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e040      	b.n	8002ab4 <HAL_DMA_Start_IT+0xa8>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12f      	bne.n	8002aa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa56 	bl	8002f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	223f      	movs	r2, #63	; 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0216 	orr.w	r2, r2, #22
 8002a7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0208 	orr.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e005      	b.n	8002ab2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fd63 	bl	8002594 <HAL_GetTick>
 8002ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e052      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_Abort+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	e013      	b.n	8002b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b40:	f7ff fd28 	bl	8002594 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d90c      	bls.n	8002b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e015      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e4      	bne.n	8002b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	223f      	movs	r2, #63	; 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00c      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bec:	4b8e      	ldr	r3, [pc, #568]	; (8002e28 <HAL_DMA_IRQHandler+0x248>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8e      	ldr	r2, [pc, #568]	; (8002e2c <HAL_DMA_IRQHandler+0x24c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2208      	movs	r2, #8
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2204      	movs	r2, #4
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d043      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2210      	movs	r2, #16
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e01f      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e016      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2220      	movs	r2, #32
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 808f 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8087 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2220      	movs	r2, #32
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d136      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0216 	bic.w	r2, r2, #22
 8002d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <HAL_DMA_IRQHandler+0x1da>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	223f      	movs	r2, #63	; 0x3f
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        }
        return;
 8002df6:	e079      	b.n	8002eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e02c      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
 8002e26:	bf00      	nop
 8002e28:	20000018 	.word	0x20000018
 8002e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d023      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e01e      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d032      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d307      	bcc.n	8002ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f2      	bne.n	8002eac <HAL_DMA_IRQHandler+0x2cc>
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eec:	bf00      	nop
    }
  }
}
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3b10      	subs	r3, #16
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <DMA_CalcBaseAndBitshift+0x64>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d909      	bls.n	8002faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa8:	e007      	b.n	8002fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	aaaaaaab 	.word	0xaaaaaaab
 8002fd0:	08013c74 	.word	0x08013c74

08002fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d856      	bhi.n	80030a2 <DMA_CheckFifoParam+0xce>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <DMA_CheckFifoParam+0x28>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301f 	.word	0x0800301f
 8003004:	0800300d 	.word	0x0800300d
 8003008:	080030a3 	.word	0x080030a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d046      	beq.n	80030a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e043      	b.n	80030a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003026:	d140      	bne.n	80030aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e03d      	b.n	80030aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d121      	bne.n	800307c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d837      	bhi.n	80030ae <DMA_CheckFifoParam+0xda>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <DMA_CheckFifoParam+0x70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	0800305b 	.word	0x0800305b
 800304c:	08003055 	.word	0x08003055
 8003050:	0800306d 	.word	0x0800306d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      break;
 8003058:	e030      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d025      	beq.n	80030b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e022      	b.n	80030b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003074:	d11f      	bne.n	80030b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307a:	e01c      	b.n	80030b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d903      	bls.n	800308a <DMA_CheckFifoParam+0xb6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003088:	e018      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	e015      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      break;
 80030a0:	e00b      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a2:	bf00      	nop
 80030a4:	e00a      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e008      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e006      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;   
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
    }
  } 
  
  return status; 
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e177      	b.n	80033d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8166 	bne.w	80033d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80c0 	beq.w	80033d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_GPIO_Init+0x324>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4a65      	ldr	r2, [pc, #404]	; (80033f0 <HAL_GPIO_Init+0x324>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_GPIO_Init+0x324>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <HAL_GPIO_Init+0x328>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_GPIO_Init+0x32c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d037      	beq.n	800330a <HAL_GPIO_Init+0x23e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_GPIO_Init+0x330>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d031      	beq.n	8003306 <HAL_GPIO_Init+0x23a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a56      	ldr	r2, [pc, #344]	; (8003400 <HAL_GPIO_Init+0x334>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02b      	beq.n	8003302 <HAL_GPIO_Init+0x236>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a55      	ldr	r2, [pc, #340]	; (8003404 <HAL_GPIO_Init+0x338>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d025      	beq.n	80032fe <HAL_GPIO_Init+0x232>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a54      	ldr	r2, [pc, #336]	; (8003408 <HAL_GPIO_Init+0x33c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01f      	beq.n	80032fa <HAL_GPIO_Init+0x22e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_GPIO_Init+0x340>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x22a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_GPIO_Init+0x344>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a51      	ldr	r2, [pc, #324]	; (8003414 <HAL_GPIO_Init+0x348>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x222>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_GPIO_Init+0x34c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x21e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4f      	ldr	r2, [pc, #316]	; (800341c <HAL_GPIO_Init+0x350>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x21a>
 80032e2:	2309      	movs	r3, #9
 80032e4:	e012      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032e6:	230a      	movs	r3, #10
 80032e8:	e010      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032ea:	2308      	movs	r3, #8
 80032ec:	e00e      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e00c      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e00a      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x240>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x240>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x240>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x240>
 800330a:	2300      	movs	r3, #0
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331c:	4935      	ldr	r1, [pc, #212]	; (80033f4 <HAL_GPIO_Init+0x328>)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_GPIO_Init+0x354>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334e:	4a34      	ldr	r2, [pc, #208]	; (8003420 <HAL_GPIO_Init+0x354>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003354:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_GPIO_Init+0x354>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <HAL_GPIO_Init+0x354>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_GPIO_Init+0x354>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a2:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_GPIO_Init+0x354>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_GPIO_Init+0x354>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <HAL_GPIO_Init+0x354>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	f67f ae84 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40021400 	.word	0x40021400
 8003410:	40021800 	.word	0x40021800
 8003414:	40021c00 	.word	0x40021c00
 8003418:	40022000 	.word	0x40022000
 800341c:	40022400 	.word	0x40022400
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003434:	787b      	ldrb	r3, [r7, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003440:	e003      	b.n	800344a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	041a      	lsls	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	619a      	str	r2, [r3, #24]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	041a      	lsls	r2, r3, #16
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43d9      	mvns	r1, r3
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	400b      	ands	r3, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800348a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348c:	b08f      	sub	sp, #60	; 0x3c
 800348e:	af0a      	add	r7, sp, #40	; 0x28
 8003490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e10f      	b.n	80036bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f00e f9e6 	bl	8011888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2203      	movs	r2, #3
 80034c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f006 fbd5 	bl	8009c8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	687e      	ldr	r6, [r7, #4]
 80034e8:	466d      	mov	r5, sp
 80034ea:	f106 0410 	add.w	r4, r6, #16
 80034ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80034fe:	1d33      	adds	r3, r6, #4
 8003500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003502:	6838      	ldr	r0, [r7, #0]
 8003504:	f006 faac 	bl	8009a60 <USB_CoreInit>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0d0      	b.n	80036bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f006 fbc3 	bl	8009cac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e04a      	b.n	80035c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	333d      	adds	r3, #61	; 0x3d
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	333c      	adds	r3, #60	; 0x3c
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	b298      	uxth	r0, r3
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3344      	adds	r3, #68	; 0x44
 8003568:	4602      	mov	r2, r0
 800356a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3340      	adds	r3, #64	; 0x40
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3348      	adds	r3, #72	; 0x48
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3354      	adds	r3, #84	; 0x54
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	3301      	adds	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3af      	bcc.n	800352c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e044      	b.n	800365c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3301      	adds	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d3b5      	bcc.n	80035d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	687e      	ldr	r6, [r7, #4]
 800366e:	466d      	mov	r5, sp
 8003670:	f106 0410 	add.w	r4, r6, #16
 8003674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003680:	e885 0003 	stmia.w	r5, {r0, r1}
 8003684:	1d33      	adds	r3, r6, #4
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f006 fb5b 	bl	8009d44 <USB_DevInit>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e00d      	b.n	80036bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f007 fcaa 	bl	800b00e <USB_DevDisconnect>

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_Start+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e020      	b.n	8003722 <HAL_PCD_Start+0x5e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d109      	bne.n	8003704 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d005      	beq.n	8003704 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f006 faad 	bl	8009c68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f007 fc5a 	bl	800afcc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b08d      	sub	sp, #52	; 0x34
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f007 fd18 	bl	800b176 <USB_GetMode>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	f040 848a 	bne.w	8004062 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f007 fc7c 	bl	800b050 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8480 	beq.w	8004060 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f007 fc69 	bl	800b050 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d107      	bne.n	8003798 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f002 0202 	and.w	r2, r2, #2
 8003796:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f007 fc57 	bl	800b050 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d161      	bne.n	8003870 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0210 	bic.w	r2, r2, #16
 80037ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	0c5b      	lsrs	r3, r3, #17
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d124      	bne.n	8003832 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d035      	beq.n	8003860 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	6a38      	ldr	r0, [r7, #32]
 8003808:	f007 fa8e 	bl	800ad28 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003818:	441a      	add	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382a:	441a      	add	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
 8003830:	e016      	b.n	8003860 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	0c5b      	lsrs	r3, r3, #17
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	2b06      	cmp	r3, #6
 800383c:	d110      	bne.n	8003860 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003844:	2208      	movs	r2, #8
 8003846:	4619      	mov	r1, r3
 8003848:	6a38      	ldr	r0, [r7, #32]
 800384a:	f007 fa6d 	bl	800ad28 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	441a      	add	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0210 	orr.w	r2, r2, #16
 800386e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f007 fbeb 	bl	800b050 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003880:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003884:	f040 80a7 	bne.w	80039d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f007 fbf0 	bl	800b076 <USB_ReadDevAllOutEpInterrupt>
 8003896:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003898:	e099      	b.n	80039ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808e 	beq.w	80039c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f007 fc14 	bl	800b0de <USB_ReadDevOutEPInterrupt>
 80038b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2301      	movs	r3, #1
 80038d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fef0 	bl	80046bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2308      	movs	r3, #8
 80038f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 ffc6 	bl	800488c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2310      	movs	r3, #16
 800391a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d030      	beq.n	8003988 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d109      	bne.n	8003946 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003944:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	78db      	ldrb	r3, [r3, #3]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d108      	bne.n	8003976 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f00e f88f 	bl	8011a94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003982:	461a      	mov	r2, r3
 8003984:	2302      	movs	r3, #2
 8003986:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	461a      	mov	r2, r3
 80039a0:	2320      	movs	r3, #32
 80039a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	3301      	adds	r3, #1
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f47f af62 	bne.w	800389a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f007 fb38 	bl	800b050 <USB_ReadInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ea:	f040 80db 	bne.w	8003ba4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f007 fb59 	bl	800b0aa <USB_ReadDevAllInEpInterrupt>
 80039f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039fe:	e0cd      	b.n	8003b9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80c2 	beq.w	8003b90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f007 fb7f 	bl	800b11a <USB_ReadDevInEPInterrupt>
 8003a1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d057      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a48:	4013      	ands	r3, r2
 8003a4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d132      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334c      	adds	r3, #76	; 0x4c
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4403      	add	r3, r0
 8003a86:	3348      	adds	r3, #72	; 0x48
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4419      	add	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	334c      	adds	r3, #76	; 0x4c
 8003a9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d113      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3354      	adds	r3, #84	; 0x54
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f007 fb86 	bl	800b1d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f00d ff59 	bl	801198a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aee:	461a      	mov	r2, r3
 8003af0:	2308      	movs	r3, #8
 8003af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	461a      	mov	r2, r3
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b38:	6a38      	ldr	r0, [r7, #32]
 8003b3a:	f006 fa67 	bl	800a00c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3338      	adds	r3, #56	; 0x38
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	78db      	ldrb	r3, [r3, #3]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f00d ffa6 	bl	8011ab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fd08 	bl	80045a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	3301      	adds	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f47f af2e 	bne.w	8003a00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f007 fa51 	bl	800b050 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb8:	d122      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d108      	bne.n	8003bea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003be0:	2100      	movs	r1, #0
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fef0 	bl	80049c8 <HAL_PCDEx_LPM_Callback>
 8003be8:	e002      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f00d ff44 	bl	8011a78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f007 fa23 	bl	800b050 <USB_ReadInterrupts>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d112      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f00d ff00 	bl	8011a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f007 fa05 	bl	800b050 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	f040 80b7 	bne.w	8003dc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 f9cc 	bl	800a00c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c78:	e046      	b.n	8003d08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	3301      	adds	r3, #1
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3b3      	bcc.n	8003c7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3e:	f043 030b 	orr.w	r3, r3, #11
 8003d42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d54:	f043 030b 	orr.w	r3, r3, #11
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	e015      	b.n	8003d88 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d82:	f043 030b 	orr.w	r3, r3, #11
 8003d86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dac:	461a      	mov	r2, r3
 8003dae:	f007 fa13 	bl	800b1d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f007 f942 	bl	800b050 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d124      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f007 f9d8 	bl	800b192 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 f98d 	bl	800a106 <USB_GetDevSpeed>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681c      	ldr	r4, [r3, #0]
 8003df8:	f001 fa16 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	4620      	mov	r0, r4
 8003e08:	f005 fe8c 	bl	8009b24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f00d fde4 	bl	80119da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f007 f912 	bl	800b050 <USB_ReadInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d10a      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f00d fdc1 	bl	80119be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f002 0208 	and.w	r2, r2, #8
 8003e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f007 f8fd 	bl	800b050 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d122      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	e014      	b.n	8003e9c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb27 	bl	80044e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	3301      	adds	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d3e5      	bcc.n	8003e72 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f007 f8d0 	bl	800b050 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	d13b      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e02b      	b.n	8003f1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d115      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da12      	bge.n	8003f14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	333f      	adds	r3, #63	; 0x3f
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fae8 	bl	80044e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	3301      	adds	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3ce      	bcc.n	8003ec2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f007 f889 	bl	800b050 <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f48:	d155      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4e:	e045      	b.n	8003fdc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d12e      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da2b      	bge.n	8003fd6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d121      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd2:	6053      	str	r3, [r2, #4]
            break;
 8003fd4:	e007      	b.n	8003fe6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3b4      	bcc.n	8003f50 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f007 f828 	bl	800b050 <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d10a      	bne.n	8004022 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f00d fd65 	bl	8011adc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f007 f812 	bl	800b050 <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d115      	bne.n	8004062 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f00d fd55 	bl	8011af8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e000      	b.n	8004062 <HAL_PCD_IRQHandler+0x938>
      return;
 8004060:	bf00      	nop
    }
  }
}
 8004062:	3734      	adds	r7, #52	; 0x34
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_PCD_SetAddress+0x1a>
 800407e:	2302      	movs	r3, #2
 8004080:	e013      	b.n	80040aa <HAL_PCD_SetAddress+0x42>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f006 ff70 	bl	800af80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	461a      	mov	r2, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	70fb      	strb	r3, [r7, #3]
 80040c4:	460b      	mov	r3, r1
 80040c6:	803b      	strh	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0f      	bge.n	80040f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	705a      	strb	r2, [r3, #1]
 80040f6:	e00f      	b.n	8004118 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004124:	883a      	ldrh	r2, [r7, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	78ba      	ldrb	r2, [r7, #2]
 800412e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004142:	78bb      	ldrb	r3, [r7, #2]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d102      	bne.n	800414e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_PCD_EP_Open+0xaa>
 8004158:	2302      	movs	r3, #2
 800415a:	e00e      	b.n	800417a <HAL_PCD_EP_Open+0xc8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	4618      	mov	r0, r3
 800416c:	f005 fff0 	bl	800a150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004178:	7afb      	ldrb	r3, [r7, #11]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800418e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004192:	2b00      	cmp	r3, #0
 8004194:	da0f      	bge.n	80041b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	3338      	adds	r3, #56	; 0x38
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	705a      	strb	r2, [r3, #1]
 80041b4:	e00f      	b.n	80041d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_PCD_EP_Close+0x6e>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e00e      	b.n	800420e <HAL_PCD_EP_Close+0x8c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	4618      	mov	r0, r3
 8004200:	f006 f82e 	bl	800a260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	460b      	mov	r3, r1
 8004224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	b2da      	uxtb	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d102      	bne.n	8004272 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	f006 fb0d 	bl	800a8a8 <USB_EP0StartXfer>
 800428e:	e008      	b.n	80042a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	6979      	ldr	r1, [r7, #20]
 800429e:	f006 f8bb 	bl	800a418 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 020f 	and.w	r2, r3, #15
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	460b      	mov	r3, r1
 80042ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3338      	adds	r3, #56	; 0x38
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2201      	movs	r2, #1
 800431a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	b2da      	uxtb	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004336:	7afb      	ldrb	r3, [r7, #11]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	f006 faab 	bl	800a8a8 <USB_EP0StartXfer>
 8004352:	e008      	b.n	8004366 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	f006 f859 	bl	800a418 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d901      	bls.n	800438e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e050      	b.n	8004430 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0f      	bge.n	80043b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3338      	adds	r3, #56	; 0x38
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	705a      	strb	r2, [r3, #1]
 80043b4:	e00d      	b.n	80043d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_PCD_EP_SetStall+0x82>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e01e      	b.n	8004430 <HAL_PCD_EP_SetStall+0xc0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	4618      	mov	r0, r3
 8004402:	f006 fce9 	bl	800add8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	b2d9      	uxtb	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004420:	461a      	mov	r2, r3
 8004422:	f006 fed9 	bl	800b1d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 020f 	and.w	r2, r3, #15
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d901      	bls.n	8004456 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e042      	b.n	80044dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da0f      	bge.n	800447e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3338      	adds	r3, #56	; 0x38
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	705a      	strb	r2, [r3, #1]
 800447c:	e00f      	b.n	800449e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_PCD_EP_ClrStall+0x86>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e00e      	b.n	80044dc <HAL_PCD_EP_ClrStall+0xa4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f006 fcf1 	bl	800aeb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da0c      	bge.n	8004512 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3338      	adds	r3, #56	; 0x38
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e00c      	b.n	800452c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	f006 fb10 	bl	800ab58 <USB_EPStopXfer>
 8004538:	4603      	mov	r3, r0
 800453a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800453c:	7afb      	ldrb	r3, [r7, #11]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_PCD_EP_Flush+0x1a>
 800455c:	2302      	movs	r3, #2
 800455e:	e01b      	b.n	8004598 <HAL_PCD_EP_Flush+0x52>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	da09      	bge.n	8004584 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f005 fd45 	bl	800a00c <USB_FlushTxFifo>
 8004582:	e004      	b.n	800458e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f005 fd73 	bl	800a074 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	3338      	adds	r3, #56	; 0x38
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d901      	bls.n	80045d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e06c      	b.n	80046b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d902      	bls.n	80045f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3303      	adds	r3, #3
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fc:	e02b      	b.n	8004656 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	429a      	cmp	r2, r3
 8004612:	d902      	bls.n	800461a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3303      	adds	r3, #3
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6919      	ldr	r1, [r3, #16]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004632:	b2db      	uxtb	r3, r3
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4603      	mov	r3, r0
 8004638:	6978      	ldr	r0, [r7, #20]
 800463a:	f006 fb37 	bl	800acac <USB_WritePacket>

    ep->xfer_buff  += len;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	441a      	add	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	441a      	add	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	b29b      	uxth	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	429a      	cmp	r2, r3
 800466a:	d809      	bhi.n	8004680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004674:	429a      	cmp	r2, r3
 8004676:	d203      	bcs.n	8004680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1be      	bne.n	80045fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	429a      	cmp	r2, r3
 800468a:	d811      	bhi.n	80046b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	2201      	movs	r2, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	6939      	ldr	r1, [r7, #16]
 80046a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ac:	4013      	ands	r3, r2
 80046ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	333c      	adds	r3, #60	; 0x3c
 80046d4:	3304      	adds	r3, #4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d17b      	bne.n	80047ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d015      	beq.n	8004728 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4a61      	ldr	r2, [pc, #388]	; (8004884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	f240 80b9 	bls.w	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80b3 	beq.w	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	461a      	mov	r2, r3
 8004720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004724:	6093      	str	r3, [r2, #8]
 8004726:	e0a7      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	2320      	movs	r3, #32
 8004742:	6093      	str	r3, [r2, #8]
 8004744:	e098      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8093 	bne.w	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4a4b      	ldr	r2, [pc, #300]	; (8004884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d90f      	bls.n	800477a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	461a      	mov	r2, r3
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	6093      	str	r3, [r2, #8]
 8004778:	e07e      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	3304      	adds	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	0159      	lsls	r1, r3, #5
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	440b      	add	r3, r1
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d114      	bne.n	80047dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047c4:	461a      	mov	r2, r3
 80047c6:	2101      	movs	r1, #1
 80047c8:	f006 fd06 	bl	800b1d8 <USB_EP0_OutStart>
 80047cc:	e006      	b.n	80047dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f00d f8b6 	bl	8011954 <HAL_PCD_DataOutStageCallback>
 80047e8:	e046      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d124      	bne.n	800483c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	6093      	str	r3, [r2, #8]
 8004810:	e032      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	461a      	mov	r2, r3
 800482a:	2320      	movs	r3, #32
 800482c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f00d f88d 	bl	8011954 <HAL_PCD_DataOutStageCallback>
 800483a:	e01d      	b.n	8004878 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d114      	bne.n	800486c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004864:	461a      	mov	r2, r3
 8004866:	2100      	movs	r1, #0
 8004868:	f006 fcb6 	bl	800b1d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f00d f86e 	bl	8011954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	4f54300a 	.word	0x4f54300a
 8004888:	4f54310a 	.word	0x4f54310a

0800488c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	333c      	adds	r3, #60	; 0x3c
 80048a4:	3304      	adds	r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <PCD_EP_OutSetupPacket_int+0x88>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90e      	bls.n	80048e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	461a      	mov	r2, r3
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f00d f825 	bl	8011930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d90c      	bls.n	8004908 <PCD_EP_OutSetupPacket_int+0x7c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d108      	bne.n	8004908 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004900:	461a      	mov	r2, r3
 8004902:	2101      	movs	r1, #1
 8004904:	f006 fc68 	bl	800b1d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	4f54300a 	.word	0x4f54300a

08004918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
 8004924:	4613      	mov	r3, r2
 8004926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004936:	883b      	ldrh	r3, [r7, #0]
 8004938:	0419      	lsls	r1, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	430a      	orrs	r2, r1
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
 8004944:	e028      	b.n	8004998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	e00d      	b.n	8004976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	3340      	adds	r3, #64	; 0x40
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	4413      	add	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	3301      	adds	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	3b01      	subs	r3, #1
 800497c:	429a      	cmp	r2, r3
 800497e:	d3ec      	bcc.n	800495a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004980:	883b      	ldrh	r3, [r7, #0]
 8004982:	0418      	lsls	r0, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	3b01      	subs	r3, #1
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4302      	orrs	r2, r0
 8004990:	3340      	adds	r3, #64	; 0x40
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e267      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fe:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d00c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b85      	ldr	r3, [pc, #532]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d112      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b82      	ldr	r3, [pc, #520]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b7e      	ldr	r3, [pc, #504]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e242      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_OscConfig+0x74>
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a75      	ldr	r2, [pc, #468]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x98>
 8004a5e:	4b70      	ldr	r3, [pc, #448]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6f      	ldr	r2, [pc, #444]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6c      	ldr	r2, [pc, #432]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a78:	4b69      	ldr	r3, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a68      	ldr	r2, [pc, #416]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b66      	ldr	r3, [pc, #408]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fd fd7c 	bl	8002594 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fd78 	bl	8002594 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e207      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fd68 	bl	8002594 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fd64 	bl	8002594 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1f3      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af6:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b44      	ldr	r3, [pc, #272]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c7      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4937      	ldr	r1, [pc, #220]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fd fd1d 	bl	8002594 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fd19 	bl	8002594 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a8      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4925      	ldr	r1, [pc, #148]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <HAL_RCC_OscConfig+0x244>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fcfc 	bl	8002594 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fcf8 	bl	8002594 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e187      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d036      	beq.n	8004c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fcdc 	bl	8002594 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fcd8 	bl	8002594 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e167      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x200>
 8004bfe:	e01b      	b.n	8004c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_OscConfig+0x248>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fd fcc5 	bl	8002594 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c0c:	e00e      	b.n	8004c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fcc1 	bl	8002594 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d907      	bls.n	8004c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e150      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470000 	.word	0x42470000
 8004c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	4b88      	ldr	r3, [pc, #544]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ea      	bne.n	8004c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8097 	beq.w	8004d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4a:	4b81      	ldr	r3, [pc, #516]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	4b7d      	ldr	r3, [pc, #500]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	4a7c      	ldr	r2, [pc, #496]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6413      	str	r3, [r2, #64]	; 0x40
 8004c66:	4b7a      	ldr	r3, [pc, #488]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	4b77      	ldr	r3, [pc, #476]	; (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d118      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c82:	4b74      	ldr	r3, [pc, #464]	; (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	; (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fc81 	bl	8002594 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fd fc7d 	bl	8002594 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e10c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <HAL_RCC_OscConfig+0x474>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x2ea>
 8004cbc:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	e01c      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x30c>
 8004cd2:	4b5f      	ldr	r3, [pc, #380]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a5e      	ldr	r2, [pc, #376]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cde:	4b5c      	ldr	r3, [pc, #368]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a5b      	ldr	r2, [pc, #364]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0x324>
 8004cec:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a57      	ldr	r2, [pc, #348]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	4b55      	ldr	r3, [pc, #340]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a54      	ldr	r2, [pc, #336]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0304 	bic.w	r3, r3, #4
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd fc42 	bl	8002594 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fd fc3e 	bl	8002594 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0cb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2a:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ee      	beq.n	8004d14 <HAL_RCC_OscConfig+0x334>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7fd fc2c 	bl	8002594 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fd fc28 	bl	8002594 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0b5      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ee      	bne.n	8004d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d68:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	4a38      	ldr	r2, [pc, #224]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a1 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d7e:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d05c      	beq.n	8004e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d141      	bne.n	8004e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d92:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fd fbfc 	bl	8002594 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fbf8 	bl	8002594 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e087      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	491b      	ldr	r1, [pc, #108]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fd fbd1 	bl	8002594 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fd fbcd 	bl	8002594 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e05c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x416>
 8004e14:	e054      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCC_OscConfig+0x478>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fbba 	bl	8002594 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fd fbb6 	bl	8002594 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e045      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCC_OscConfig+0x470>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x444>
 8004e42:	e03d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e038      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000
 8004e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d028      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d121      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11a      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d111      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0cc      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a58      	ldr	r2, [pc, #352]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d119      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e067      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fae8 	bl	8002594 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fd fae4 	bl	8002594 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 020c 	and.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1eb      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20c      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fa48 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00
 800508c:	40023800 	.word	0x40023800
 8005090:	08013c5c 	.word	0x08013c5c
 8005094:	20000018 	.word	0x20000018
 8005098:	2000001c 	.word	0x2000001c

0800509c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b090      	sub	sp, #64	; 0x40
 80050a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ac:	2300      	movs	r3, #0
 80050ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b4:	4b59      	ldr	r3, [pc, #356]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d00d      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x40>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	f200 80a1 	bhi.w	8005208 <HAL_RCC_GetSysClockFreq+0x16c>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ce:	e09b      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_GetSysClockFreq+0x184>)
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050d4:	e09b      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d6:	4b53      	ldr	r3, [pc, #332]	; (8005224 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050da:	e098      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050dc:	4b4f      	ldr	r3, [pc, #316]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e6:	4b4d      	ldr	r3, [pc, #308]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d028      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b4a      	ldr	r3, [pc, #296]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	2200      	movs	r2, #0
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	627a      	str	r2, [r7, #36]	; 0x24
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005104:	2100      	movs	r1, #0
 8005106:	4b47      	ldr	r3, [pc, #284]	; (8005224 <HAL_RCC_GetSysClockFreq+0x188>)
 8005108:	fb03 f201 	mul.w	r2, r3, r1
 800510c:	2300      	movs	r3, #0
 800510e:	fb00 f303 	mul.w	r3, r0, r3
 8005112:	4413      	add	r3, r2
 8005114:	4a43      	ldr	r2, [pc, #268]	; (8005224 <HAL_RCC_GetSysClockFreq+0x188>)
 8005116:	fba0 1202 	umull	r1, r2, r0, r2
 800511a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800511c:	460a      	mov	r2, r1
 800511e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005122:	4413      	add	r3, r2
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	2200      	movs	r2, #0
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005132:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005136:	f7fb f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4613      	mov	r3, r2
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005142:	e053      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005144:	4b35      	ldr	r3, [pc, #212]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	2200      	movs	r2, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	617a      	str	r2, [r7, #20]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005156:	f04f 0b00 	mov.w	fp, #0
 800515a:	4652      	mov	r2, sl
 800515c:	465b      	mov	r3, fp
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	0159      	lsls	r1, r3, #5
 8005168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800516c:	0150      	lsls	r0, r2, #5
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	ebb2 080a 	subs.w	r8, r2, sl
 8005176:	eb63 090b 	sbc.w	r9, r3, fp
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005186:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800518a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800518e:	ebb2 0408 	subs.w	r4, r2, r8
 8005192:	eb63 0509 	sbc.w	r5, r3, r9
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	00eb      	lsls	r3, r5, #3
 80051a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051a4:	00e2      	lsls	r2, r4, #3
 80051a6:	4614      	mov	r4, r2
 80051a8:	461d      	mov	r5, r3
 80051aa:	eb14 030a 	adds.w	r3, r4, sl
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	eb45 030b 	adc.w	r3, r5, fp
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051c2:	4629      	mov	r1, r5
 80051c4:	028b      	lsls	r3, r1, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051cc:	4621      	mov	r1, r4
 80051ce:	028a      	lsls	r2, r1, #10
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	2200      	movs	r2, #0
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	60fa      	str	r2, [r7, #12]
 80051dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e0:	f7fb f86e 	bl	80002c0 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4613      	mov	r3, r2
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCC_GetSysClockFreq+0x180>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	3301      	adds	r3, #1
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005206:	e002      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetSysClockFreq+0x184>)
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800520c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005210:	4618      	mov	r0, r3
 8005212:	3740      	adds	r7, #64	; 0x40
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	00f42400 	.word	0x00f42400
 8005224:	016e3600 	.word	0x016e3600

08005228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_RCC_GetHCLKFreq+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000018 	.word	0x20000018

08005240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005244:	f7ff fff0 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	0a9b      	lsrs	r3, r3, #10
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4903      	ldr	r1, [pc, #12]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40023800 	.word	0x40023800
 8005264:	08013c6c 	.word	0x08013c6c

08005268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800526c:	f7ff ffdc 	bl	8005228 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0b5b      	lsrs	r3, r3, #13
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4903      	ldr	r1, [pc, #12]	; (800528c <HAL_RCC_GetPCLK2Freq+0x24>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	08013c6c 	.word	0x08013c6c

08005290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d075      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052c4:	4b91      	ldr	r3, [pc, #580]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ca:	f7fd f963 	bl	8002594 <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052d2:	f7fd f95f 	bl	8002594 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e189      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e4:	4b8a      	ldr	r3, [pc, #552]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	019a      	lsls	r2, r3, #6
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	071b      	lsls	r3, r3, #28
 8005308:	4981      	ldr	r1, [pc, #516]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531c:	4b7c      	ldr	r3, [pc, #496]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	0f1b      	lsrs	r3, r3, #28
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	019a      	lsls	r2, r3, #6
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	431a      	orrs	r2, r3
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	071b      	lsls	r3, r3, #28
 800533c:	4974      	ldr	r1, [pc, #464]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005344:	4b72      	ldr	r3, [pc, #456]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534a:	f023 021f 	bic.w	r2, r3, #31
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	3b01      	subs	r3, #1
 8005354:	496e      	ldr	r1, [pc, #440]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	019a      	lsls	r2, r3, #6
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	4964      	ldr	r1, [pc, #400]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005384:	4b61      	ldr	r3, [pc, #388]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fd f903 	bl	8002594 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005392:	f7fd f8ff 	bl	8002594 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e129      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d079      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053c8:	4b52      	ldr	r3, [pc, #328]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ce:	f7fd f8e1 	bl	8002594 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053d6:	f7fd f8dd 	bl	8002594 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e107      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053e8:	4b49      	ldr	r3, [pc, #292]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005402:	4b43      	ldr	r3, [pc, #268]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	0f1b      	lsrs	r3, r3, #28
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	019a      	lsls	r2, r3, #6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	431a      	orrs	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	493b      	ldr	r1, [pc, #236]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800542a:	4b39      	ldr	r3, [pc, #228]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	3b01      	subs	r3, #1
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	4934      	ldr	r1, [pc, #208]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005450:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	071b      	lsls	r3, r3, #28
 8005470:	4927      	ldr	r1, [pc, #156]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	4922      	ldr	r1, [pc, #136]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005494:	f7fd f87e 	bl	8002594 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800549c:	f7fd f87a 	bl	8002594 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0a4      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ae:	4b18      	ldr	r3, [pc, #96]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ba:	d1ef      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 808b 	beq.w	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054f2:	f7fd f84f 	bl	8002594 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	e010      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fd f84b 	bl	8002594 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d909      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e075      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800550c:	42470068 	.word	0x42470068
 8005510:	40023800 	.word	0x40023800
 8005514:	42470070 	.word	0x42470070
 8005518:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800551c:	4b38      	ldr	r3, [pc, #224]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0e8      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005530:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d028      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d114      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800556e:	f7fd f811 	bl	8002594 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005574:	e00a      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005576:	f7fd f80d 	bl	8002594 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	4293      	cmp	r3, r2
 8005586:	d901      	bls.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e035      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ee      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a4:	d10d      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ba:	4912      	ldr	r1, [pc, #72]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]
 80055c0:	e005      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80055c2:	4b10      	ldr	r3, [pc, #64]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055cc:	6093      	str	r3, [r2, #8]
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055da:	490a      	ldr	r1, [pc, #40]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80055f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40007000 	.word	0x40007000
 8005604:	40023800 	.word	0x40023800
 8005608:	42470e40 	.word	0x42470e40
 800560c:	424711e0 	.word	0x424711e0

08005610 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e087      	b.n	8005736 <HAL_RTC_Init+0x126>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7f5b      	ldrb	r3, [r3, #29]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d126      	bne.n	800567e <HAL_RTC_Init+0x6e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a41      	ldr	r2, [pc, #260]	; (8005740 <HAL_RTC_Init+0x130>)
 800563a:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a41      	ldr	r2, [pc, #260]	; (8005744 <HAL_RTC_Init+0x134>)
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a40      	ldr	r2, [pc, #256]	; (8005748 <HAL_RTC_Init+0x138>)
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	; (800574c <HAL_RTC_Init+0x13c>)
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <HAL_RTC_Init+0x140>)
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3f      	ldr	r2, [pc, #252]	; (8005754 <HAL_RTC_Init+0x144>)
 8005658:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_RTC_Init+0x58>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <HAL_RTC_Init+0x148>)
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_RTC_Init+0x6e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_RTC_Init+0x14c>)
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	22ca      	movs	r2, #202	; 0xca
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2253      	movs	r2, #83	; 0x53
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fbe1 	bl	8005e5c <RTC_EnterInitMode>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d12c      	bne.n	80056fe <HAL_RTC_Init+0xee>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68d2      	ldr	r2, [r2, #12]
 80056de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6919      	ldr	r1, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	041a      	lsls	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fbe8 	bl	8005eca <RTC_ExitInitMode>
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d113      	bne.n	800572c <HAL_RTC_Init+0x11c>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	08000d25 	.word	0x08000d25
 8005744:	0800603b 	.word	0x0800603b
 8005748:	08005f87 	.word	0x08005f87
 800574c:	08005fc3 	.word	0x08005fc3
 8005750:	08005f9b 	.word	0x08005f9b
 8005754:	08005faf 	.word	0x08005faf
 8005758:	08001c79 	.word	0x08001c79
 800575c:	08001cdd 	.word	0x08001cdd

08005760 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	7f1b      	ldrb	r3, [r3, #28]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_RTC_SetTime+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e087      	b.n	800588c <HAL_RTC_SetTime+0x12c>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d126      	bne.n	80057dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fbb4 	bl	8005f14 <RTC_ByteToBcd2>
 80057ac:	4603      	mov	r3, r0
 80057ae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fbad 	bl	8005f14 <RTC_ByteToBcd2>
 80057ba:	4603      	mov	r3, r0
 80057bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057be:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	789b      	ldrb	r3, [r3, #2]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fba5 	bl	8005f14 <RTC_ByteToBcd2>
 80057ca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	78db      	ldrb	r3, [r3, #3]
 80057d4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e018      	b.n	800580e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005802:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	22ca      	movs	r2, #202	; 0xca
 8005814:	625a      	str	r2, [r3, #36]	; 0x24
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2253      	movs	r2, #83	; 0x53
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fb1c 	bl	8005e5c <RTC_EnterInitMode>
 8005824:	4603      	mov	r3, r0
 8005826:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d120      	bne.n	8005870 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005838:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800584c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fb2f 	bl	8005eca <RTC_ExitInitMode>
 800586c:	4603      	mov	r3, r0
 800586e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	771a      	strb	r2, [r3, #28]

  return status;
 800588a:	7cfb      	ldrb	r3, [r7, #19]
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd90      	pop	{r4, r7, pc}

08005894 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	0d9b      	lsrs	r3, r3, #22
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11a      	bne.n	8005946 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fb1a 	bl	8005f4e <RTC_Bcd2ToByte>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb11 	bl	8005f4e <RTC_Bcd2ToByte>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	789b      	ldrb	r3, [r3, #2]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb08 	bl	8005f4e <RTC_Bcd2ToByte>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	7f1b      	ldrb	r3, [r3, #28]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_RTC_SetDate+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e071      	b.n	8005a50 <HAL_RTC_SetDate+0x100>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10e      	bne.n	800599c <HAL_RTC_SetDate+0x4c>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	b2db      	uxtb	r3, r3
 8005994:	330a      	adds	r3, #10
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11c      	bne.n	80059dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	78db      	ldrb	r3, [r3, #3]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fab4 	bl	8005f14 <RTC_ByteToBcd2>
 80059ac:	4603      	mov	r3, r0
 80059ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 faad 	bl	8005f14 <RTC_ByteToBcd2>
 80059ba:	4603      	mov	r3, r0
 80059bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	789b      	ldrb	r3, [r3, #2]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 faa5 	bl	8005f14 <RTC_ByteToBcd2>
 80059ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e00e      	b.n	80059fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80059ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ca      	movs	r2, #202	; 0xca
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2253      	movs	r2, #83	; 0x53
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fa26 	bl	8005e5c <RTC_EnterInitMode>
 8005a10:	4603      	mov	r3, r0
 8005a12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10c      	bne.n	8005a34 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa4d 	bl	8005eca <RTC_ExitInitMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	771a      	strb	r2, [r3, #28]

  return status;
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	0b5b      	lsrs	r3, r3, #13
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11a      	bne.n	8005aec <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa47 	bl	8005f4e <RTC_Bcd2ToByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fa3e 	bl	8005f4e <RTC_Bcd2ToByte>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	789b      	ldrb	r3, [r3, #2]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fa35 	bl	8005f4e <RTC_Bcd2ToByte>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005b04:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <HAL_RTC_SetAlarm_IT+0x278>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a9a      	ldr	r2, [pc, #616]	; (8005d74 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	7f1b      	ldrb	r3, [r3, #28]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_RTC_SetAlarm_IT+0x36>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e11c      	b.n	8005d68 <HAL_RTC_SetAlarm_IT+0x270>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2202      	movs	r2, #2
 8005b38:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d137      	bne.n	8005bb0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f9db 	bl	8005f14 <RTC_ByteToBcd2>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f9d4 	bl	8005f14 <RTC_ByteToBcd2>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b70:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f9cc 	bl	8005f14 <RTC_ByteToBcd2>
 8005b7c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b7e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	78db      	ldrb	r3, [r3, #3]
 8005b86:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005b88:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f9be 	bl	8005f14 <RTC_ByteToBcd2>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005b9c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ba4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	e023      	b.n	8005bf8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005bd0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005bd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005bde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005be6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005be8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005bee:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	22ca      	movs	r2, #202	; 0xca
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2253      	movs	r2, #83	; 0x53
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1c:	d141      	bne.n	8005ca2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c2c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c3e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1e5a      	subs	r2, r3, #1
 8005c44:	617a      	str	r2, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	22ff      	movs	r2, #255	; 0xff
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2203      	movs	r2, #3
 8005c56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e082      	b.n	8005d68 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0e7      	beq.n	8005c40 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	e04b      	b.n	8005d3a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cb0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005cc2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005cc4:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RTC_SetAlarm_IT+0x278>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	0adb      	lsrs	r3, r3, #11
 8005cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1e5a      	subs	r2, r3, #1
 8005cde:	617a      	str	r2, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	22ff      	movs	r2, #255	; 0xff
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e035      	b.n	8005d68 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0e7      	beq.n	8005cda <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d28:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d38:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <HAL_RTC_SetAlarm_IT+0x280>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <HAL_RTC_SetAlarm_IT+0x280>)
 8005d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d44:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005d46:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RTC_SetAlarm_IT+0x280>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <HAL_RTC_SetAlarm_IT+0x280>)
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d50:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	22ff      	movs	r2, #255	; 0xff
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3724      	adds	r7, #36	; 0x24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}
 8005d70:	20000018 	.word	0x20000018
 8005d74:	10624dd3 	.word	0x10624dd3
 8005d78:	40013c00 	.word	0x40013c00

08005d7c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00c      	beq.n	8005dba <HAL_RTC_AlarmIRQHandler+0x3e>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005db8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <HAL_RTC_AlarmIRQHandler+0x74>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_RTC_AlarmIRQHandler+0x74>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005dee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RTC_AlarmIRQHandler+0x8c>)
 8005df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005df6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	775a      	strb	r2, [r3, #29]
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40013c00 	.word	0x40013c00

08005e0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e28:	f7fc fbb4 	bl	8002594 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e2e:	e009      	b.n	8005e44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e30:	f7fc fbb0 	bl	8002594 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3e:	d901      	bls.n	8005e44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e007      	b.n	8005e54 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ee      	beq.n	8005e30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d122      	bne.n	8005ec0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8a:	f7fc fb83 	bl	8002594 <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e90:	e00c      	b.n	8005eac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e92:	f7fc fb7f 	bl	8002594 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea0:	d904      	bls.n	8005eac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <RTC_EnterInitMode+0x64>
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d1e8      	bne.n	8005e92 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff89 	bl	8005e0c <HAL_RTC_WaitForSynchro>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f22:	e005      	b.n	8005f30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	3301      	adds	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	3b0a      	subs	r3, #10
 8005f2e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b09      	cmp	r3, #9
 8005f34:	d8f6      	bhi.n	8005f24 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b2db      	uxtb	r3, r3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	091b      	lsrs	r3, r3, #4
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	0092      	lsls	r2, r2, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4413      	add	r3, r2
 8005f78:	b2db      	uxtb	r3, r3
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3350      	adds	r3, #80	; 0x50
 8005fec:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3350      	adds	r3, #80	; 0x50
 800601e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e022      	b.n	80060a6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fe4a 	bl	8001d0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2203      	movs	r2, #3
 800607c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f815 	bl	80060b0 <HAL_SD_InitCard>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e00a      	b.n	80060a6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060b0:	b5b0      	push	{r4, r5, r7, lr}
 80060b2:	b08e      	sub	sp, #56	; 0x38
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060cc:	2376      	movs	r3, #118	; 0x76
 80060ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	466c      	mov	r4, sp
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060e8:	4628      	mov	r0, r5
 80060ea:	f002 ff45 	bl	8008f78 <SDIO_Init>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e04f      	b.n	80061a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <HAL_SD_InitCard+0xf8>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f002 ff7d 	bl	800900a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <HAL_SD_InitCard+0xf8>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006116:	2002      	movs	r0, #2
 8006118:	f7fc fa48 	bl	80025ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 f975 	bl	800740c <SD_PowerON>
 8006122:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e02e      	b.n	80061a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f894 	bl	8007270 <SD_InitCard>
 8006148:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e01b      	b.n	80061a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006170:	4618      	mov	r0, r3
 8006172:	f002 ffdc 	bl	800912e <SDMMC_CmdBlockLength>
 8006176:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00f      	beq.n	800619e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <HAL_SD_InitCard+0xfc>)
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	; 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bdb0      	pop	{r4, r5, r7, pc}
 80061a8:	422580a0 	.word	0x422580a0
 80061ac:	004005ff 	.word	0x004005ff

080061b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b092      	sub	sp, #72	; 0x48
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061be:	f7fc f9e9 	bl	8002594 <HAL_GetTick>
 80061c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e1bd      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	f040 81b0 	bne.w	8006550 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	441a      	add	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	429a      	cmp	r2, r3
 8006202:	d907      	bls.n	8006214 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e1a4      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2203      	movs	r2, #3
 8006218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	025b      	lsls	r3, r3, #9
 8006230:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	025b      	lsls	r3, r3, #9
 800623c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800623e:	2390      	movs	r3, #144	; 0x90
 8006240:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006242:	2302      	movs	r3, #2
 8006244:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006246:	2300      	movs	r3, #0
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800624a:	2301      	movs	r3, #1
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f107 0214 	add.w	r2, r7, #20
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f002 ff3c 	bl	80090d6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d90a      	bls.n	800627a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2202      	movs	r2, #2
 8006268:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006270:	4618      	mov	r0, r3
 8006272:	f002 ffa0 	bl	80091b6 <SDMMC_CmdReadMultiBlock>
 8006276:	6478      	str	r0, [r7, #68]	; 0x44
 8006278:	e009      	b.n	800628e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006286:	4618      	mov	r0, r3
 8006288:	f002 ff73 	bl	8009172 <SDMMC_CmdReadSingleBlock>
 800628c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800628e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006290:	2b00      	cmp	r3, #0
 8006292:	d012      	beq.n	80062ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7a      	ldr	r2, [pc, #488]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e151      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80062be:	e061      	b.n	8006384 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03c      	beq.n	8006348 <HAL_SD_ReadBlocks+0x198>
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d039      	beq.n	8006348 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
 80062d8:	e033      	b.n	8006342 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f002 fe75 	bl	8008fce <SDIO_ReadFIFO>
 80062e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	3301      	adds	r3, #1
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	3b01      	subs	r3, #1
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	3301      	adds	r3, #1
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	3b01      	subs	r3, #1
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	0c1b      	lsrs	r3, r3, #16
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	3301      	adds	r3, #1
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	3b01      	subs	r3, #1
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	0e1b      	lsrs	r3, r3, #24
 800632a:	b2da      	uxtb	r2, r3
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	3301      	adds	r3, #1
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006338:	3b01      	subs	r3, #1
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	3301      	adds	r3, #1
 8006340:	643b      	str	r3, [r7, #64]	; 0x40
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	2b07      	cmp	r3, #7
 8006346:	d9c8      	bls.n	80062da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006348:	f7fc f924 	bl	8002594 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006354:	429a      	cmp	r2, r3
 8006356:	d902      	bls.n	800635e <HAL_SD_ReadBlocks+0x1ae>
 8006358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635a:	2b00      	cmp	r3, #0
 800635c:	d112      	bne.n	8006384 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a48      	ldr	r2, [pc, #288]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0ec      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638a:	f240 332a 	movw	r3, #810	; 0x32a
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d095      	beq.n	80062c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d022      	beq.n	80063e8 <HAL_SD_ReadBlocks+0x238>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d91f      	bls.n	80063e8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d01b      	beq.n	80063e8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f002 ff65 	bl	8009284 <SDMMC_CmdStopTransfer>
 80063ba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0ba      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e0a0      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d012      	beq.n	8006450 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a15      	ldr	r2, [pc, #84]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	f043 0202 	orr.w	r2, r3, #2
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e086      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d063      	beq.n	8006526 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <HAL_SD_ReadBlocks+0x2d4>)
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e06c      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
 8006484:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f002 fd9e 	bl	8008fce <SDIO_ReadFIFO>
 8006492:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	3301      	adds	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	3b01      	subs	r3, #1
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	3301      	adds	r3, #1
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80064b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ba:	3b01      	subs	r3, #1
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	3301      	adds	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	3b01      	subs	r3, #1
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	0e1b      	lsrs	r3, r3, #24
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	3301      	adds	r3, #1
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80064e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e6:	3b01      	subs	r3, #1
 80064e8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064ea:	f7fc f853 	bl	8002594 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d902      	bls.n	8006500 <HAL_SD_ReadBlocks+0x350>
 80064fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <HAL_SD_ReadBlocks+0x3b8>)
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01b      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_SD_ReadBlocks+0x38a>
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1a6      	bne.n	8006488 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006542:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e006      	b.n	800655e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3748      	adds	r7, #72	; 0x48
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	004005ff 	.word	0x004005ff

0800656c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b092      	sub	sp, #72	; 0x48
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800657a:	f7fc f80b 	bl	8002594 <HAL_GetTick>
 800657e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d107      	bne.n	800659e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e166      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	f040 8159 	bne.w	800685e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80065b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	441a      	add	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	429a      	cmp	r2, r3
 80065be:	d907      	bls.n	80065d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e14d      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2203      	movs	r2, #3
 80065d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2200      	movs	r2, #0
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d002      	beq.n	80065ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	025b      	lsls	r3, r3, #9
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065ee:	f04f 33ff 	mov.w	r3, #4294967295
 80065f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	025b      	lsls	r3, r3, #9
 80065f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80065fa:	2390      	movs	r3, #144	; 0x90
 80065fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006602:	2300      	movs	r3, #0
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006606:	2301      	movs	r3, #1
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f107 0218 	add.w	r2, r7, #24
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f002 fd5e 	bl	80090d6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d90a      	bls.n	8006636 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800662c:	4618      	mov	r0, r3
 800662e:	f002 fe06 	bl	800923e <SDMMC_CmdWriteMultiBlock>
 8006632:	6478      	str	r0, [r7, #68]	; 0x44
 8006634:	e009      	b.n	800664a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2210      	movs	r2, #16
 800663a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006642:	4618      	mov	r0, r3
 8006644:	f002 fdd9 	bl	80091fa <SDMMC_CmdWriteSingleBlock>
 8006648:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800664a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664c:	2b00      	cmp	r3, #0
 800664e:	d012      	beq.n	8006676 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a87      	ldr	r2, [pc, #540]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	431a      	orrs	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e0fa      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800667a:	e065      	b.n	8006748 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d040      	beq.n	800670c <HAL_SD_WriteBlocks+0x1a0>
 800668a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03d      	beq.n	800670c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006690:	2300      	movs	r3, #0
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
 8006694:	e037      	b.n	8006706 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	3301      	adds	r3, #1
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	3b01      	subs	r3, #1
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	021a      	lsls	r2, r3, #8
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b6:	3301      	adds	r3, #1
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80066ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066bc:	3b01      	subs	r3, #1
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	041a      	lsls	r2, r3, #16
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ce:	3301      	adds	r3, #1
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80066d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d4:	3b01      	subs	r3, #1
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	061a      	lsls	r2, r3, #24
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	3301      	adds	r3, #1
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80066ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ec:	3b01      	subs	r3, #1
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f107 0214 	add.w	r2, r7, #20
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f002 fc74 	bl	8008fe8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006702:	3301      	adds	r3, #1
 8006704:	643b      	str	r3, [r7, #64]	; 0x40
 8006706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006708:	2b07      	cmp	r3, #7
 800670a:	d9c4      	bls.n	8006696 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800670c:	f7fb ff42 	bl	8002594 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006718:	429a      	cmp	r2, r3
 800671a:	d902      	bls.n	8006722 <HAL_SD_WriteBlocks+0x1b6>
 800671c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671e:	2b00      	cmp	r3, #0
 8006720:	d112      	bne.n	8006748 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a53      	ldr	r2, [pc, #332]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e091      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674e:	f240 331a 	movw	r3, #794	; 0x31a
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d091      	beq.n	800667c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d022      	beq.n	80067ac <HAL_SD_WriteBlocks+0x240>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d91f      	bls.n	80067ac <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	2b03      	cmp	r3, #3
 8006772:	d01b      	beq.n	80067ac <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f002 fd83 	bl	8009284 <SDMMC_CmdStopTransfer>
 800677e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006782:	2b00      	cmp	r3, #0
 8006784:	d012      	beq.n	80067ac <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e05f      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2d      	ldr	r2, [pc, #180]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f043 0208 	orr.w	r2, r3, #8
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e045      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d012      	beq.n	8006814 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a20      	ldr	r2, [pc, #128]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e02b      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <HAL_SD_WriteBlocks+0x308>)
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f043 0210 	orr.w	r2, r3, #16
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e011      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006850:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e006      	b.n	800686c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3748      	adds	r7, #72	; 0x48
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	004005ff 	.word	0x004005ff

08006878 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08c      	sub	sp, #48	; 0x30
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0c0      	b.n	8006a22 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	f040 80b9 	bne.w	8006a20 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d907      	bls.n	80068d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0a7      	b.n	8006a22 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2203      	movs	r2, #3
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80068f0:	f043 0302 	orr.w	r3, r3, #2
 80068f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	4a4c      	ldr	r2, [pc, #304]	; (8006a2c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	4a4b      	ldr	r2, [pc, #300]	; (8006a30 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006904:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2200      	movs	r2, #0
 800690c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3380      	adds	r3, #128	; 0x80
 800693c:	4619      	mov	r1, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	025b      	lsls	r3, r3, #9
 8006944:	089b      	lsrs	r3, r3, #2
 8006946:	f7fc f861 	bl	8002a0c <HAL_DMA_Start_IT>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d017      	beq.n	8006980 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800695e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a33      	ldr	r2, [pc, #204]	; (8006a34 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e050      	b.n	8006a22 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006980:	4b2d      	ldr	r3, [pc, #180]	; (8006a38 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	2b01      	cmp	r3, #1
 800698c:	d002      	beq.n	8006994 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	025b      	lsls	r3, r3, #9
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	025b      	lsls	r3, r3, #9
 800699e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80069a0:	2390      	movs	r3, #144	; 0x90
 80069a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80069a4:	2302      	movs	r3, #2
 80069a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f107 0210 	add.w	r2, r7, #16
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f002 fb8b 	bl	80090d6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d90a      	bls.n	80069dc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2282      	movs	r2, #130	; 0x82
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 fbef 	bl	80091b6 <SDMMC_CmdReadMultiBlock>
 80069d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80069da:	e009      	b.n	80069f0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2281      	movs	r2, #129	; 0x81
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e8:	4618      	mov	r0, r3
 80069ea:	f002 fbc2 	bl	8009172 <SDMMC_CmdReadSingleBlock>
 80069ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a0e      	ldr	r2, [pc, #56]	; (8006a34 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e002      	b.n	8006a22 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e000      	b.n	8006a22 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	0800715b 	.word	0x0800715b
 8006a30:	080071cd 	.word	0x080071cd
 8006a34:	004005ff 	.word	0x004005ff
 8006a38:	4225858c 	.word	0x4225858c

08006a3c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d107      	bne.n	8006a64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0c5      	b.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 80be 	bne.w	8006bee <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d907      	bls.n	8006a96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e0ac      	b.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006ab4:	f043 0302 	orr.w	r3, r3, #2
 8006ab8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	4a4e      	ldr	r2, [pc, #312]	; (8006bf8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	4a4d      	ldr	r2, [pc, #308]	; (8006bfc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006ac8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	2200      	movs	r2, #0
 8006ad0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	025b      	lsls	r3, r3, #9
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d90a      	bls.n	8006afc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	22a0      	movs	r2, #160	; 0xa0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 fba3 	bl	800923e <SDMMC_CmdWriteMultiBlock>
 8006af8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006afa:	e009      	b.n	8006b10 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2290      	movs	r2, #144	; 0x90
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f002 fb76 	bl	80091fa <SDMMC_CmdWriteSingleBlock>
 8006b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d012      	beq.n	8006b3c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a39      	ldr	r2, [pc, #228]	; (8006c00 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	431a      	orrs	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e059      	b.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006b3c:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2240      	movs	r2, #64	; 0x40
 8006b48:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3380      	adds	r3, #128	; 0x80
 8006b72:	461a      	mov	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	025b      	lsls	r3, r3, #9
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	f7fb ff47 	bl	8002a0c <HAL_DMA_Start_IT>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01c      	beq.n	8006bbe <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006b92:	f023 0302 	bic.w	r3, r3, #2
 8006b96:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e018      	b.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	025b      	lsls	r3, r3, #9
 8006bc8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006bca:	2390      	movs	r3, #144	; 0x90
 8006bcc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f107 0210 	add.w	r2, r7, #16
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 fa76 	bl	80090d6 <SDIO_ConfigData>

      return HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e000      	b.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
  }
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3730      	adds	r7, #48	; 0x30
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08007131 	.word	0x08007131
 8006bfc:	080071cd 	.word	0x080071cd
 8006c00:	004005ff 	.word	0x004005ff
 8006c04:	4225858c 	.word	0x4225858c

08006c08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2a:	0f9b      	lsrs	r3, r3, #30
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c36:	0e9b      	lsrs	r3, r3, #26
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	0c1b      	lsrs	r3, r3, #16
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c9a:	0bdb      	lsrs	r3, r3, #15
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cac:	0b9b      	lsrs	r3, r3, #14
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cbe:	0b5b      	lsrs	r3, r3, #13
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cd0:	0b1b      	lsrs	r3, r3, #12
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d163      	bne.n	8006db4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf0:	009a      	lsls	r2, r3, #2
 8006cf2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006cfc:	0f92      	lsrs	r2, r2, #30
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d08:	0edb      	lsrs	r3, r3, #27
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d1a:	0e1b      	lsrs	r3, r3, #24
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2c:	0d5b      	lsrs	r3, r3, #21
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3e:	0c9b      	lsrs	r3, r3, #18
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d50:	0bdb      	lsrs	r3, r3, #15
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	7e1b      	ldrb	r3, [r3, #24]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	3302      	adds	r3, #2
 8006d74:	2201      	movs	r2, #1
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006d7e:	fb03 f202 	mul.w	r2, r3, r2
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	7a1b      	ldrb	r3, [r3, #8]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2201      	movs	r2, #1
 8006d92:	409a      	lsls	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006da0:	0a52      	lsrs	r2, r2, #9
 8006da2:	fb03 f202 	mul.w	r2, r3, r2
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60
 8006db2:	e031      	b.n	8006e18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11d      	bne.n	8006df8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dca:	0c1b      	lsrs	r3, r3, #16
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	029a      	lsls	r2, r3, #10
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60
 8006df6:	e00f      	b.n	8006e18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a58      	ldr	r2, [pc, #352]	; (8006f60 <HAL_SD_GetCardCSD+0x344>)
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e09d      	b.n	8006f54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1c:	0b9b      	lsrs	r3, r3, #14
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2e:	09db      	lsrs	r3, r3, #7
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	0fdb      	lsrs	r3, r3, #31
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	0f5b      	lsrs	r3, r3, #29
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	0e9b      	lsrs	r3, r3, #26
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	0d9b      	lsrs	r3, r3, #22
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	0d5b      	lsrs	r3, r3, #21
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	0c1b      	lsrs	r3, r3, #16
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	0bdb      	lsrs	r3, r3, #15
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	0b9b      	lsrs	r3, r3, #14
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	0b5b      	lsrs	r3, r3, #13
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	0b1b      	lsrs	r3, r3, #12
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	004005ff 	.word	0x004005ff

08006f64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006fbc:	b5b0      	push	{r4, r5, r7, lr}
 8006fbe:	b08e      	sub	sp, #56	; 0x38
 8006fc0:	af04      	add	r7, sp, #16
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d02e      	beq.n	800703a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	d106      	bne.n	8006ff2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
 8006ff0:	e029      	b.n	8007046 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff8:	d10a      	bne.n	8007010 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fabc 	bl	8007578 <SD_WideBus_Enable>
 8007000:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
 800700e:	e01a      	b.n	8007046 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 faf9 	bl	800760e <SD_WideBus_Disable>
 800701c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
 800702a:	e00c      	b.n	8007046 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
 8007038:	e005      	b.n	8007046 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a26      	ldr	r2, [pc, #152]	; (80070ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007064:	e01f      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681d      	ldr	r5, [r3, #0]
 800708c:	466c      	mov	r4, sp
 800708e:	f107 0314 	add.w	r3, r7, #20
 8007092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800709a:	f107 0308 	add.w	r3, r7, #8
 800709e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070a0:	4628      	mov	r0, r5
 80070a2:	f001 ff69 	bl	8008f78 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070ae:	4618      	mov	r0, r3
 80070b0:	f002 f83d 	bl	800912e <SDMMC_CmdBlockLength>
 80070b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00c      	beq.n	80070d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80070de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	; 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bdb0      	pop	{r4, r5, r7, pc}
 80070ea:	bf00      	nop
 80070ec:	004005ff 	.word	0x004005ff

080070f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa10 	bl	8007528 <SD_SendStatus>
 8007108:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	0a5b      	lsrs	r3, r3, #9
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007126:	693b      	ldr	r3, [r7, #16]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	2b82      	cmp	r3, #130	; 0x82
 800716e:	d111      	bne.n	8007194 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f002 f885 	bl	8009284 <SDMMC_CmdStopTransfer>
 800717a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	431a      	orrs	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff fd3a 	bl	8006c08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0208 	bic.w	r2, r2, #8
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f004 f937 	bl	800b430 <HAL_SD_RxCpltCallback>
#endif
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fb fe8a 	bl	8002ef4 <HAL_DMA_GetError>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d03e      	beq.n	8007264 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d002      	beq.n	8007202 <SD_DMAError+0x36>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d12d      	bne.n	800725e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a19      	ldr	r2, [pc, #100]	; (800726c <SD_DMAError+0xa0>)
 8007208:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007218:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007226:	6978      	ldr	r0, [r7, #20]
 8007228:	f7ff ff62 	bl	80070f0 <HAL_SD_GetCardState>
 800722c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b06      	cmp	r3, #6
 8007232:	d002      	beq.n	800723a <SD_DMAError+0x6e>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b05      	cmp	r3, #5
 8007238:	d10a      	bne.n	8007250 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f002 f820 	bl	8009284 <SDMMC_CmdStopTransfer>
 8007244:	4602      	mov	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	431a      	orrs	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f7ff fcd2 	bl	8006c08 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	004005ff 	.word	0x004005ff

08007270 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007270:	b5b0      	push	{r4, r5, r7, lr}
 8007272:	b094      	sub	sp, #80	; 0x50
 8007274:	af04      	add	r7, sp, #16
 8007276:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007278:	2301      	movs	r3, #1
 800727a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fed0 	bl	8009026 <SDIO_GetPowerState>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800728c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007290:	e0b8      	b.n	8007404 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	2b03      	cmp	r3, #3
 8007298:	d02f      	beq.n	80072fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 f8fa 	bl	8009498 <SDMMC_CmdSendCID>
 80072a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	e0a9      	b.n	8007404 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fefa 	bl	80090b0 <SDIO_GetResponse>
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2104      	movs	r1, #4
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fef1 	bl	80090b0 <SDIO_GetResponse>
 80072ce:	4602      	mov	r2, r0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2108      	movs	r1, #8
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fee8 	bl	80090b0 <SDIO_GetResponse>
 80072e0:	4602      	mov	r2, r0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	210c      	movs	r1, #12
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 fedf 	bl	80090b0 <SDIO_GetResponse>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d00d      	beq.n	800731e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f107 020e 	add.w	r2, r7, #14
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f002 f900 	bl	8009512 <SDMMC_CmdSetRelAdd>
 8007312:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <SD_InitCard+0xae>
    {
      return errorstate;
 800731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731c:	e072      	b.n	8007404 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	2b03      	cmp	r3, #3
 8007324:	d036      	beq.n	8007394 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007326:	89fb      	ldrh	r3, [r7, #14]
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f002 f8ca 	bl	80094d4 <SDMMC_CmdSendCSD>
 8007340:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	e05b      	b.n	8007404 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f001 feac 	bl	80090b0 <SDIO_GetResponse>
 8007358:	4602      	mov	r2, r0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2104      	movs	r1, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fea3 	bl	80090b0 <SDIO_GetResponse>
 800736a:	4602      	mov	r2, r0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2108      	movs	r1, #8
 8007376:	4618      	mov	r0, r3
 8007378:	f001 fe9a 	bl	80090b0 <SDIO_GetResponse>
 800737c:	4602      	mov	r2, r0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	210c      	movs	r1, #12
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fe91 	bl	80090b0 <SDIO_GetResponse>
 800738e:	4602      	mov	r2, r0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2104      	movs	r1, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fe88 	bl	80090b0 <SDIO_GetResponse>
 80073a0:	4603      	mov	r3, r0
 80073a2:	0d1a      	lsrs	r2, r3, #20
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80073a8:	f107 0310 	add.w	r3, r7, #16
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff fc34 	bl	8006c1c <HAL_SD_GetCardCSD>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073be:	e021      	b.n	8007404 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	2200      	movs	r2, #0
 80073cc:	461c      	mov	r4, r3
 80073ce:	4615      	mov	r5, r2
 80073d0:	4622      	mov	r2, r4
 80073d2:	462b      	mov	r3, r5
 80073d4:	4608      	mov	r0, r1
 80073d6:	f001 ff77 	bl	80092c8 <SDMMC_CmdSelDesel>
 80073da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80073dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	e00e      	b.n	8007404 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681d      	ldr	r5, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	466c      	mov	r4, sp
 80073ee:	f103 0210 	add.w	r2, r3, #16
 80073f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80073f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073f8:	3304      	adds	r3, #4
 80073fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073fc:	4628      	mov	r0, r5
 80073fe:	f001 fdbb 	bl	8008f78 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3740      	adds	r7, #64	; 0x40
 8007408:	46bd      	mov	sp, r7
 800740a:	bdb0      	pop	{r4, r5, r7, pc}

0800740c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f001 ff72 	bl	800930e <SDMMC_CmdGoIdleState>
 800742a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	e072      	b.n	800751c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f001 ff85 	bl	800934a <SDMMC_CmdOperCond>
 8007440:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f001 ff5b 	bl	800930e <SDMMC_CmdGoIdleState>
 8007458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e05b      	b.n	800751c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746e:	2b01      	cmp	r3, #1
 8007470:	d137      	bne.n	80074e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f001 ff85 	bl	8009388 <SDMMC_CmdAppCommand>
 800747e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d02d      	beq.n	80074e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007486:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800748a:	e047      	b.n	800751c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f001 ff78 	bl	8009388 <SDMMC_CmdAppCommand>
 8007498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e03b      	b.n	800751c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	491e      	ldr	r1, [pc, #120]	; (8007524 <SD_PowerON+0x118>)
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 ff8e 	bl	80093cc <SDMMC_CmdAppOperCommand>
 80074b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074bc:	e02e      	b.n	800751c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fdf3 	bl	80090b0 <SDIO_GetResponse>
 80074ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	0fdb      	lsrs	r3, r3, #31
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <SD_PowerON+0xcc>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <SD_PowerON+0xce>
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]

    count++;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3301      	adds	r3, #1
 80074e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d802      	bhi.n	80074f2 <SD_PowerON+0xe6>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0cc      	beq.n	800748c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d902      	bls.n	8007502 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80074fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007500:	e00c      	b.n	800751c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	645a      	str	r2, [r3, #68]	; 0x44
 8007512:	e002      	b.n	800751a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	c1100000 	.word	0xc1100000

08007528 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800753c:	e018      	b.n	8007570 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f002 f802 	bl	8009554 <SDMMC_CmdSendStatus>
 8007550:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	e009      	b.n	8007570 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fda4 	bl	80090b0 <SDIO_GetResponse>
 8007568:	4602      	mov	r2, r0
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f001 fd8e 	bl	80090b0 <SDIO_GetResponse>
 8007594:	4603      	mov	r3, r0
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800759e:	d102      	bne.n	80075a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80075a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075a4:	e02f      	b.n	8007606 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80075a6:	f107 030c 	add.w	r3, r7, #12
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f879 	bl	80076a4 <SD_FindSCR>
 80075b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	e023      	b.n	8007606 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01c      	beq.n	8007602 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d0:	041b      	lsls	r3, r3, #16
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f001 fed7 	bl	8009388 <SDMMC_CmdAppCommand>
 80075da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	e00f      	b.n	8007606 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2102      	movs	r1, #2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 ff10 	bl	8009412 <SDMMC_CmdBusWidth>
 80075f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	e003      	b.n	8007606 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075fe:	2300      	movs	r3, #0
 8007600:	e001      	b.n	8007606 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007602:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fd43 	bl	80090b0 <SDIO_GetResponse>
 800762a:	4603      	mov	r3, r0
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007634:	d102      	bne.n	800763c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800763a:	e02f      	b.n	800769c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800763c:	f107 030c 	add.w	r3, r7, #12
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f82e 	bl	80076a4 <SD_FindSCR>
 8007648:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	e023      	b.n	800769c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01c      	beq.n	8007698 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f001 fe8c 	bl	8009388 <SDMMC_CmdAppCommand>
 8007670:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	e00f      	b.n	800769c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fec5 	bl	8009412 <SDMMC_CmdBusWidth>
 8007688:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	e003      	b.n	800769c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007694:	2300      	movs	r3, #0
 8007696:	e001      	b.n	800769c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b08f      	sub	sp, #60	; 0x3c
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80076ae:	f7fa ff71 	bl	8002594 <HAL_GetTick>
 80076b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80076b8:	2300      	movs	r3, #0
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2108      	movs	r1, #8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fd2f 	bl	800912e <SDMMC_CmdBlockLength>
 80076d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	e0b2      	b.n	8007842 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f001 fe4d 	bl	8009388 <SDMMC_CmdAppCommand>
 80076ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	e0a3      	b.n	8007842 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
 80076fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007700:	2308      	movs	r3, #8
 8007702:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007704:	2330      	movs	r3, #48	; 0x30
 8007706:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007708:	2302      	movs	r3, #2
 800770a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800770c:	2300      	movs	r3, #0
 800770e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007710:	2301      	movs	r3, #1
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f107 0210 	add.w	r2, r7, #16
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f001 fcd9 	bl	80090d6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f001 fe94 	bl	8009456 <SDMMC_CmdSendSCR>
 800772e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02a      	beq.n	800778c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	e083      	b.n	8007842 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6819      	ldr	r1, [r3, #0]
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	18d4      	adds	r4, r2, r3
 8007756:	4608      	mov	r0, r1
 8007758:	f001 fc39 	bl	8008fce <SDIO_ReadFIFO>
 800775c:	4603      	mov	r3, r0
 800775e:	6023      	str	r3, [r4, #0]
      index++;
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	3301      	adds	r3, #1
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e006      	b.n	8007776 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d012      	beq.n	800779c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007776:	f7fa ff0d 	bl	8002594 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800778a:	e05a      	b.n	8007842 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007792:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0cf      	beq.n	800773a <SD_FindSCR+0x96>
 800779a:	e000      	b.n	800779e <SD_FindSCR+0xfa>
      break;
 800779c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80077b4:	2308      	movs	r3, #8
 80077b6:	e044      	b.n	8007842 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2202      	movs	r2, #2
 80077cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80077ce:	2302      	movs	r3, #2
 80077d0:	e037      	b.n	8007842 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2220      	movs	r2, #32
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80077e8:	2320      	movs	r3, #32
 80077ea:	e02a      	b.n	8007842 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80077f4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	061a      	lsls	r2, r3, #24
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007802:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800780c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	0e1b      	lsrs	r3, r3, #24
 8007812:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	601a      	str	r2, [r3, #0]
    scr++;
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	3304      	adds	r3, #4
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	061a      	lsls	r2, r3, #24
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800782a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007834:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	0e1b      	lsrs	r3, r3, #24
 800783a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	373c      	adds	r7, #60	; 0x3c
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}

0800784a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e041      	b.n	80078e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fa fb35 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f000 f9cd 	bl	8007c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d001      	beq.n	8007900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e04e      	b.n	800799e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <HAL_TIM_Base_Start_IT+0xc4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d022      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d01d      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d018      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00e      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a19      	ldr	r2, [pc, #100]	; (80079c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x80>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d111      	bne.n	800798c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b06      	cmp	r3, #6
 8007978:	d010      	beq.n	800799c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0201 	orr.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798a:	e007      	b.n	800799c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40001800 	.word	0x40001800

080079c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d122      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d11b      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0202 	mvn.w	r2, #2
 80079f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8ee 	bl	8007bec <HAL_TIM_IC_CaptureCallback>
 8007a10:	e005      	b.n	8007a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f8e0 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f8f1 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d122      	bne.n	8007a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d11b      	bne.n	8007a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0204 	mvn.w	r2, #4
 8007a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f8c4 	bl	8007bec <HAL_TIM_IC_CaptureCallback>
 8007a64:	e005      	b.n	8007a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8b6 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f8c7 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d122      	bne.n	8007acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d11b      	bne.n	8007acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0208 	mvn.w	r2, #8
 8007a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f89a 	bl	8007bec <HAL_TIM_IC_CaptureCallback>
 8007ab8:	e005      	b.n	8007ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f88c 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f89d 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d122      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d11b      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0210 	mvn.w	r2, #16
 8007af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2208      	movs	r2, #8
 8007af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f870 	bl	8007bec <HAL_TIM_IC_CaptureCallback>
 8007b0c:	e005      	b.n	8007b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f862 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f873 	bl	8007c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d10e      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d107      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0201 	mvn.w	r2, #1
 8007b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 f8be 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b56:	2b80      	cmp	r3, #128	; 0x80
 8007b58:	d10e      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d107      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f97e 	bl	8007e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d10e      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d107      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f838 	bl	8007c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d107      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0220 	mvn.w	r2, #32
 8007bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f948 	bl	8007e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a40      	ldr	r2, [pc, #256]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d013      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d00f      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a3d      	ldr	r2, [pc, #244]	; (8007d40 <TIM_Base_SetConfig+0x118>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00b      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <TIM_Base_SetConfig+0x11c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d007      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a3b      	ldr	r2, [pc, #236]	; (8007d48 <TIM_Base_SetConfig+0x120>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a3a      	ldr	r2, [pc, #232]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d108      	bne.n	8007c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a2f      	ldr	r2, [pc, #188]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d02b      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c88:	d027      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <TIM_Base_SetConfig+0x118>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d023      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a2b      	ldr	r2, [pc, #172]	; (8007d44 <TIM_Base_SetConfig+0x11c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d01f      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <TIM_Base_SetConfig+0x120>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01b      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a29      	ldr	r2, [pc, #164]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d017      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a28      	ldr	r2, [pc, #160]	; (8007d50 <TIM_Base_SetConfig+0x128>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <TIM_Base_SetConfig+0x12c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00f      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <TIM_Base_SetConfig+0x130>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a25      	ldr	r2, [pc, #148]	; (8007d5c <TIM_Base_SetConfig+0x134>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a24      	ldr	r2, [pc, #144]	; (8007d60 <TIM_Base_SetConfig+0x138>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a23      	ldr	r2, [pc, #140]	; (8007d64 <TIM_Base_SetConfig+0x13c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_Base_SetConfig+0xf8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d103      	bne.n	8007d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	615a      	str	r2, [r3, #20]
}
 8007d2e:	bf00      	nop
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800
 8007d5c:	40001800 	.word	0x40001800
 8007d60:	40001c00 	.word	0x40001c00
 8007d64:	40002000 	.word	0x40002000

08007d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e05a      	b.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d022      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dcc:	d01d      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1a      	ldr	r2, [pc, #104]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10c      	bne.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	40000c00 	.word	0x40000c00
 8007e54:	40010400 	.word	0x40010400
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40001800 	.word	0x40001800

08007e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e03f      	b.n	8007f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fa f83e 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2224      	movs	r2, #36	; 0x24
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fddf 	bl	8008a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695a      	ldr	r2, [r3, #20]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af02      	add	r7, sp, #8
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d17c      	bne.n	800803c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_UART_Transmit+0x2c>
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e075      	b.n	800803e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_UART_Transmit+0x3e>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e06e      	b.n	800803e <HAL_UART_Transmit+0x11c>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2221      	movs	r2, #33	; 0x21
 8007f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f76:	f7fa fb0d 	bl	8002594 <HAL_GetTick>
 8007f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f90:	d108      	bne.n	8007fa4 <HAL_UART_Transmit+0x82>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d104      	bne.n	8007fa4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e003      	b.n	8007fac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fb4:	e02a      	b.n	800800c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2180      	movs	r1, #128	; 0x80
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fb1f 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e036      	b.n	800803e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	3302      	adds	r3, #2
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	e007      	b.n	8007ffe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1cf      	bne.n	8007fb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2200      	movs	r2, #0
 800801e:	2140      	movs	r1, #64	; 0x40
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 faef 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e006      	b.n	800803e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3720      	adds	r7, #32
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4613      	mov	r3, r2
 8008052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b20      	cmp	r3, #32
 800805e:	d11d      	bne.n	800809c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_UART_Receive_IT+0x26>
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e016      	b.n	800809e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_UART_Receive_IT+0x38>
 800807a:	2302      	movs	r3, #2
 800807c:	e00f      	b.n	800809e <HAL_UART_Receive_IT+0x58>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	461a      	mov	r2, r3
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fb24 	bl	80086e0 <UART_Start_Receive_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	e000      	b.n	800809e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b0ba      	sub	sp, #232	; 0xe8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10f      	bne.n	800810e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_UART_IRQHandler+0x66>
 80080fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc07 	bl	800891a <UART_Receive_IT>
      return;
 800810c:	e256      	b.n	80085bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800810e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80de 	beq.w	80082d4 <HAL_UART_IRQHandler+0x22c>
 8008118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008128:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80d1 	beq.w	80082d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_UART_IRQHandler+0xae>
 800813e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f043 0201 	orr.w	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <HAL_UART_IRQHandler+0xd2>
 8008162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f043 0202 	orr.w	r2, r3, #2
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <HAL_UART_IRQHandler+0xf6>
 8008186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f043 0204 	orr.w	r2, r3, #4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d011      	beq.n	80081ce <HAL_UART_IRQHandler+0x126>
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f043 0208 	orr.w	r2, r3, #8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 81ed 	beq.w	80085b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d008      	beq.n	80081f6 <HAL_UART_IRQHandler+0x14e>
 80081e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fb92 	bl	800891a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <HAL_UART_IRQHandler+0x17a>
 800821a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d04f      	beq.n	80082c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa9a 	bl	800875c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b40      	cmp	r3, #64	; 0x40
 8008234:	d141      	bne.n	80082ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800824c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800826e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800827a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1d9      	bne.n	8008236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	2b00      	cmp	r3, #0
 8008288:	d013      	beq.n	80082b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	4a7d      	ldr	r2, [pc, #500]	; (8008484 <HAL_UART_IRQHandler+0x3dc>)
 8008290:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	4618      	mov	r0, r3
 8008298:	f7fa fc80 	bl	8002b9c <HAL_DMA_Abort_IT>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	e00e      	b.n	80082d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f990 	bl	80085d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	e00a      	b.n	80082d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f98c 	bl	80085d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	e006      	b.n	80082d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f988 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082ce:	e170      	b.n	80085b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	bf00      	nop
    return;
 80082d2:	e16e      	b.n	80085b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b01      	cmp	r3, #1
 80082da:	f040 814a 	bne.w	8008572 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8143 	beq.w	8008572 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 813c 	beq.w	8008572 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	60bb      	str	r3, [r7, #8]
 800830e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	f040 80b4 	bne.w	8008488 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800832c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8140 	beq.w	80085b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800833a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800833e:	429a      	cmp	r2, r3
 8008340:	f080 8139 	bcs.w	80085b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800834a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008356:	f000 8088 	beq.w	800846a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	330c      	adds	r3, #12
 8008382:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800838a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800839e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d9      	bne.n	800835a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3314      	adds	r3, #20
 80083ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3314      	adds	r3, #20
 80083c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e1      	bne.n	80083a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3314      	adds	r3, #20
 80083e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3314      	adds	r3, #20
 8008402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800840c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e3      	bne.n	80083e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800843a:	f023 0310 	bic.w	r3, r3, #16
 800843e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	330c      	adds	r3, #12
 8008448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800844c:	65ba      	str	r2, [r7, #88]	; 0x58
 800844e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800845a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e3      	bne.n	8008428 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	4618      	mov	r0, r3
 8008466:	f7fa fb29 	bl	8002abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008472:	b29b      	uxth	r3, r3
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	b29b      	uxth	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8b6 	bl	80085ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008480:	e099      	b.n	80085b6 <HAL_UART_IRQHandler+0x50e>
 8008482:	bf00      	nop
 8008484:	08008823 	.word	0x08008823
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008490:	b29b      	uxth	r3, r3
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 808b 	beq.w	80085ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8086 	beq.w	80085ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	330c      	adds	r3, #12
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084d2:	647a      	str	r2, [r7, #68]	; 0x44
 80084d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e3      	bne.n	80084ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3314      	adds	r3, #20
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	623b      	str	r3, [r7, #32]
   return(result);
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3314      	adds	r3, #20
 8008506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800850a:	633a      	str	r2, [r7, #48]	; 0x30
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e3      	bne.n	80084e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	60fb      	str	r3, [r7, #12]
   return(result);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0310 	bic.w	r3, r3, #16
 8008542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	330c      	adds	r3, #12
 800854c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008550:	61fa      	str	r2, [r7, #28]
 8008552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	69b9      	ldr	r1, [r7, #24]
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	617b      	str	r3, [r7, #20]
   return(result);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e3      	bne.n	800852c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f83e 	bl	80085ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008570:	e023      	b.n	80085ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_UART_IRQHandler+0x4ea>
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f95d 	bl	800884a <UART_Transmit_IT>
    return;
 8008590:	e014      	b.n	80085bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <HAL_UART_IRQHandler+0x514>
 800859e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d008      	beq.n	80085bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f99d 	bl	80088ea <UART_EndTransmit_IT>
    return;
 80085b0:	e004      	b.n	80085bc <HAL_UART_IRQHandler+0x514>
    return;
 80085b2:	bf00      	nop
 80085b4:	e002      	b.n	80085bc <HAL_UART_IRQHandler+0x514>
      return;
 80085b6:	bf00      	nop
 80085b8:	e000      	b.n	80085bc <HAL_UART_IRQHandler+0x514>
      return;
 80085ba:	bf00      	nop
  }
}
 80085bc:	37e8      	adds	r7, #232	; 0xe8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop

080085c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b090      	sub	sp, #64	; 0x40
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	4613      	mov	r3, r2
 8008612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008614:	e050      	b.n	80086b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861c:	d04c      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800861e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <UART_WaitOnFlagUntilTimeout+0x30>
 8008624:	f7f9 ffb6 	bl	8002594 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008630:	429a      	cmp	r2, r3
 8008632:	d241      	bcs.n	80086b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008654:	637a      	str	r2, [r7, #52]	; 0x34
 8008656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800865a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e5      	bne.n	8008634 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3314      	adds	r3, #20
 800866e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	613b      	str	r3, [r7, #16]
   return(result);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008688:	623a      	str	r2, [r7, #32]
 800868a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	69f9      	ldr	r1, [r7, #28]
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	61bb      	str	r3, [r7, #24]
   return(result);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e5      	bne.n	8008668 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e00f      	b.n	80086d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4013      	ands	r3, r2
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	bf0c      	ite	eq
 80086c8:	2301      	moveq	r3, #1
 80086ca:	2300      	movne	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d09f      	beq.n	8008616 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3740      	adds	r7, #64	; 0x40
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	88fa      	ldrh	r2, [r7, #6]
 80086fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2222      	movs	r2, #34	; 0x22
 800870a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800872c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695a      	ldr	r2, [r3, #20]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0201 	orr.w	r2, r2, #1
 800873c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0220 	orr.w	r2, r2, #32
 800874c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b095      	sub	sp, #84	; 0x54
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008784:	643a      	str	r2, [r7, #64]	; 0x40
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800878a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e5      	bne.n	8008764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3314      	adds	r3, #20
 800879e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f023 0301 	bic.w	r3, r3, #1
 80087ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3314      	adds	r3, #20
 80087b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e5      	bne.n	8008798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d119      	bne.n	8008808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0310 	bic.w	r3, r3, #16
 80087ea:	647b      	str	r3, [r7, #68]	; 0x44
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f4:	61ba      	str	r2, [r7, #24]
 80087f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6979      	ldr	r1, [r7, #20]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	613b      	str	r3, [r7, #16]
   return(result);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e5      	bne.n	80087d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008816:	bf00      	nop
 8008818:	3754      	adds	r7, #84	; 0x54
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fecb 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b21      	cmp	r3, #33	; 0x21
 800885c:	d13e      	bne.n	80088dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d114      	bne.n	8008892 <UART_Transmit_IT+0x48>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d110      	bne.n	8008892 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008884:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	1c9a      	adds	r2, r3, #2
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	621a      	str	r2, [r3, #32]
 8008890:	e008      	b.n	80088a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	1c59      	adds	r1, r3, #1
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6211      	str	r1, [r2, #32]
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4619      	mov	r1, r3
 80088b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10f      	bne.n	80088d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	e000      	b.n	80088de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088dc:	2302      	movs	r3, #2
  }
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fe5a 	bl	80085c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b08c      	sub	sp, #48	; 0x30
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b22      	cmp	r3, #34	; 0x22
 800892c:	f040 80ab 	bne.w	8008a86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008938:	d117      	bne.n	800896a <UART_Receive_IT+0x50>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d113      	bne.n	800896a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	b29a      	uxth	r2, r3
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	1c9a      	adds	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	629a      	str	r2, [r3, #40]	; 0x28
 8008968:	e026      	b.n	80089b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897c:	d007      	beq.n	800898e <UART_Receive_IT+0x74>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <UART_Receive_IT+0x82>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	b2da      	uxtb	r2, r3
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	e008      	b.n	80089ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	4619      	mov	r1, r3
 80089c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d15a      	bne.n	8008a82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0220 	bic.w	r2, r2, #32
 80089da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0201 	bic.w	r2, r2, #1
 80089fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d135      	bne.n	8008a78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f023 0310 	bic.w	r3, r3, #16
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	623a      	str	r2, [r7, #32]
 8008a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	69f9      	ldr	r1, [r7, #28]
 8008a38:	6a3a      	ldr	r2, [r7, #32]
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	d10a      	bne.n	8008a6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff fdbb 	bl	80085ec <HAL_UARTEx_RxEventCallback>
 8008a76:	e002      	b.n	8008a7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7f8 fba5 	bl	80011c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e002      	b.n	8008a88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e000      	b.n	8008a88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
  }
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3730      	adds	r7, #48	; 0x30
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a94:	b0c0      	sub	sp, #256	; 0x100
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aac:	68d9      	ldr	r1, [r3, #12]
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	ea40 0301 	orr.w	r3, r0, r1
 8008ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae8:	f021 010c 	bic.w	r1, r1, #12
 8008aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af6:	430b      	orrs	r3, r1
 8008af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0a:	6999      	ldr	r1, [r3, #24]
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	ea40 0301 	orr.w	r3, r0, r1
 8008b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b8f      	ldr	r3, [pc, #572]	; (8008d5c <UART_SetConfig+0x2cc>)
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d005      	beq.n	8008b30 <UART_SetConfig+0xa0>
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b8d      	ldr	r3, [pc, #564]	; (8008d60 <UART_SetConfig+0x2d0>)
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d104      	bne.n	8008b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fc fb9a 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 8008b34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b38:	e003      	b.n	8008b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b3a:	f7fc fb81 	bl	8005240 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b4c:	f040 810c 	bne.w	8008d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b62:	4622      	mov	r2, r4
 8008b64:	462b      	mov	r3, r5
 8008b66:	1891      	adds	r1, r2, r2
 8008b68:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b6a:	415b      	adcs	r3, r3
 8008b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b72:	4621      	mov	r1, r4
 8008b74:	eb12 0801 	adds.w	r8, r2, r1
 8008b78:	4629      	mov	r1, r5
 8008b7a:	eb43 0901 	adc.w	r9, r3, r1
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b92:	4690      	mov	r8, r2
 8008b94:	4699      	mov	r9, r3
 8008b96:	4623      	mov	r3, r4
 8008b98:	eb18 0303 	adds.w	r3, r8, r3
 8008b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	eb49 0303 	adc.w	r3, r9, r3
 8008ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	18db      	adds	r3, r3, r3
 8008bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	eb42 0303 	adc.w	r3, r2, r3
 8008bca:	657b      	str	r3, [r7, #84]	; 0x54
 8008bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bd4:	f7f7 fb74 	bl	80002c0 <__aeabi_uldivmod>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4b61      	ldr	r3, [pc, #388]	; (8008d64 <UART_SetConfig+0x2d4>)
 8008bde:	fba3 2302 	umull	r2, r3, r3, r2
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	011c      	lsls	r4, r3, #4
 8008be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	1891      	adds	r1, r2, r2
 8008bfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c00:	415b      	adcs	r3, r3
 8008c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c08:	4641      	mov	r1, r8
 8008c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c0e:	4649      	mov	r1, r9
 8008c10:	eb43 0b01 	adc.w	fp, r3, r1
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c28:	4692      	mov	sl, r2
 8008c2a:	469b      	mov	fp, r3
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c36:	464b      	mov	r3, r9
 8008c38:	eb4b 0303 	adc.w	r3, fp, r3
 8008c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c54:	460b      	mov	r3, r1
 8008c56:	18db      	adds	r3, r3, r3
 8008c58:	643b      	str	r3, [r7, #64]	; 0x40
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	eb42 0303 	adc.w	r3, r2, r3
 8008c60:	647b      	str	r3, [r7, #68]	; 0x44
 8008c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c6a:	f7f7 fb29 	bl	80002c0 <__aeabi_uldivmod>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	4b3b      	ldr	r3, [pc, #236]	; (8008d64 <UART_SetConfig+0x2d4>)
 8008c76:	fba3 2301 	umull	r2, r3, r3, r1
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	2264      	movs	r2, #100	; 0x64
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	1acb      	subs	r3, r1, r3
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c8a:	4b36      	ldr	r3, [pc, #216]	; (8008d64 <UART_SetConfig+0x2d4>)
 8008c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c98:	441c      	add	r4, r3
 8008c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	1891      	adds	r1, r2, r2
 8008cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cb4:	415b      	adcs	r3, r3
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	1851      	adds	r1, r2, r1
 8008cc0:	6339      	str	r1, [r7, #48]	; 0x30
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	414b      	adcs	r3, r1
 8008cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	00cb      	lsls	r3, r1, #3
 8008cd8:	4651      	mov	r1, sl
 8008cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cde:	4651      	mov	r1, sl
 8008ce0:	00ca      	lsls	r2, r1, #3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4642      	mov	r2, r8
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	460a      	mov	r2, r1
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d10:	460b      	mov	r3, r1
 8008d12:	18db      	adds	r3, r3, r3
 8008d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d16:	4613      	mov	r3, r2
 8008d18:	eb42 0303 	adc.w	r3, r2, r3
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d26:	f7f7 facb 	bl	80002c0 <__aeabi_uldivmod>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <UART_SetConfig+0x2d4>)
 8008d30:	fba3 1302 	umull	r1, r3, r3, r2
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	2164      	movs	r1, #100	; 0x64
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	3332      	adds	r3, #50	; 0x32
 8008d42:	4a08      	ldr	r2, [pc, #32]	; (8008d64 <UART_SetConfig+0x2d4>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	f003 0207 	and.w	r2, r3, #7
 8008d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4422      	add	r2, r4
 8008d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d58:	e105      	b.n	8008f66 <UART_SetConfig+0x4d6>
 8008d5a:	bf00      	nop
 8008d5c:	40011000 	.word	0x40011000
 8008d60:	40011400 	.word	0x40011400
 8008d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	1891      	adds	r1, r2, r2
 8008d80:	6239      	str	r1, [r7, #32]
 8008d82:	415b      	adcs	r3, r3
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
 8008d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d8a:	4641      	mov	r1, r8
 8008d8c:	1854      	adds	r4, r2, r1
 8008d8e:	4649      	mov	r1, r9
 8008d90:	eb43 0501 	adc.w	r5, r3, r1
 8008d94:	f04f 0200 	mov.w	r2, #0
 8008d98:	f04f 0300 	mov.w	r3, #0
 8008d9c:	00eb      	lsls	r3, r5, #3
 8008d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008da2:	00e2      	lsls	r2, r4, #3
 8008da4:	4614      	mov	r4, r2
 8008da6:	461d      	mov	r5, r3
 8008da8:	4643      	mov	r3, r8
 8008daa:	18e3      	adds	r3, r4, r3
 8008dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008db0:	464b      	mov	r3, r9
 8008db2:	eb45 0303 	adc.w	r3, r5, r3
 8008db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	008b      	lsls	r3, r1, #2
 8008dda:	4621      	mov	r1, r4
 8008ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008de0:	4621      	mov	r1, r4
 8008de2:	008a      	lsls	r2, r1, #2
 8008de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de8:	f7f7 fa6a 	bl	80002c0 <__aeabi_uldivmod>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4b60      	ldr	r3, [pc, #384]	; (8008f74 <UART_SetConfig+0x4e4>)
 8008df2:	fba3 2302 	umull	r2, r3, r3, r2
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	011c      	lsls	r4, r3, #4
 8008dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e0c:	4642      	mov	r2, r8
 8008e0e:	464b      	mov	r3, r9
 8008e10:	1891      	adds	r1, r2, r2
 8008e12:	61b9      	str	r1, [r7, #24]
 8008e14:	415b      	adcs	r3, r3
 8008e16:	61fb      	str	r3, [r7, #28]
 8008e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e1c:	4641      	mov	r1, r8
 8008e1e:	1851      	adds	r1, r2, r1
 8008e20:	6139      	str	r1, [r7, #16]
 8008e22:	4649      	mov	r1, r9
 8008e24:	414b      	adcs	r3, r1
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	f04f 0200 	mov.w	r2, #0
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e34:	4659      	mov	r1, fp
 8008e36:	00cb      	lsls	r3, r1, #3
 8008e38:	4651      	mov	r1, sl
 8008e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e3e:	4651      	mov	r1, sl
 8008e40:	00ca      	lsls	r2, r1, #3
 8008e42:	4610      	mov	r0, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	4642      	mov	r2, r8
 8008e4a:	189b      	adds	r3, r3, r2
 8008e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e50:	464b      	mov	r3, r9
 8008e52:	460a      	mov	r2, r1
 8008e54:	eb42 0303 	adc.w	r3, r2, r3
 8008e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e74:	4649      	mov	r1, r9
 8008e76:	008b      	lsls	r3, r1, #2
 8008e78:	4641      	mov	r1, r8
 8008e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e7e:	4641      	mov	r1, r8
 8008e80:	008a      	lsls	r2, r1, #2
 8008e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e86:	f7f7 fa1b 	bl	80002c0 <__aeabi_uldivmod>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <UART_SetConfig+0x4e4>)
 8008e90:	fba3 1302 	umull	r1, r3, r3, r2
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	2164      	movs	r1, #100	; 0x64
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	3332      	adds	r3, #50	; 0x32
 8008ea2:	4a34      	ldr	r2, [pc, #208]	; (8008f74 <UART_SetConfig+0x4e4>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eae:	441c      	add	r4, r3
 8008eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb8:	677a      	str	r2, [r7, #116]	; 0x74
 8008eba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	1891      	adds	r1, r2, r2
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	415b      	adcs	r3, r3
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ece:	4641      	mov	r1, r8
 8008ed0:	1851      	adds	r1, r2, r1
 8008ed2:	6039      	str	r1, [r7, #0]
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	414b      	adcs	r3, r1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	00cb      	lsls	r3, r1, #3
 8008eea:	4651      	mov	r1, sl
 8008eec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ef0:	4651      	mov	r1, sl
 8008ef2:	00ca      	lsls	r2, r1, #3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4642      	mov	r2, r8
 8008efc:	189b      	adds	r3, r3, r2
 8008efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f00:	464b      	mov	r3, r9
 8008f02:	460a      	mov	r2, r1
 8008f04:	eb42 0303 	adc.w	r3, r2, r3
 8008f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	663b      	str	r3, [r7, #96]	; 0x60
 8008f14:	667a      	str	r2, [r7, #100]	; 0x64
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f22:	4649      	mov	r1, r9
 8008f24:	008b      	lsls	r3, r1, #2
 8008f26:	4641      	mov	r1, r8
 8008f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	008a      	lsls	r2, r1, #2
 8008f30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f34:	f7f7 f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <UART_SetConfig+0x4e4>)
 8008f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	2164      	movs	r1, #100	; 0x64
 8008f46:	fb01 f303 	mul.w	r3, r1, r3
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	3332      	adds	r3, #50	; 0x32
 8008f50:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <UART_SetConfig+0x4e4>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4422      	add	r2, r4
 8008f64:	609a      	str	r2, [r3, #8]
}
 8008f66:	bf00      	nop
 8008f68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f72:	bf00      	nop
 8008f74:	51eb851f 	.word	0x51eb851f

08008f78 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008f78:	b084      	sub	sp, #16
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	f107 001c 	add.w	r0, r7, #28
 8008f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008f8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008f90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008f92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008f96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008f9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008f9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008fa2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	b004      	add	sp, #16
 8008fcc:	4770      	bx	lr

08008fce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2203      	movs	r2, #3
 8009016:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0303 	and.w	r3, r3, #3
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009042:	b480      	push	{r7}
 8009044:	b085      	sub	sp, #20
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009060:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009066:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800906c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800907c:	f023 030f 	bic.w	r3, r3, #15
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	b2db      	uxtb	r3, r3
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3314      	adds	r3, #20
 80090be:	461a      	mov	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
}  
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090fc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009102:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009108:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009120:	2300      	movs	r3, #0

}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b088      	sub	sp, #32
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800913c:	2310      	movs	r3, #16
 800913e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009140:	2340      	movs	r3, #64	; 0x40
 8009142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009144:	2300      	movs	r3, #0
 8009146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800914e:	f107 0308 	add.w	r3, r7, #8
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff74 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800915a:	f241 3288 	movw	r2, #5000	; 0x1388
 800915e:	2110      	movs	r1, #16
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa19 	bl	8009598 <SDMMC_GetCmdResp1>
 8009166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009168:	69fb      	ldr	r3, [r7, #28]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b088      	sub	sp, #32
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009180:	2311      	movs	r3, #17
 8009182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009184:	2340      	movs	r3, #64	; 0x40
 8009186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800918c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009190:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff ff52 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800919e:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a2:	2111      	movs	r1, #17
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9f7 	bl	8009598 <SDMMC_GetCmdResp1>
 80091aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ac:	69fb      	ldr	r3, [r7, #28]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3720      	adds	r7, #32
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b088      	sub	sp, #32
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80091c4:	2312      	movs	r3, #18
 80091c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091d6:	f107 0308 	add.w	r3, r7, #8
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ff30 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80091e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e6:	2112      	movs	r1, #18
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f9d5 	bl	8009598 <SDMMC_GetCmdResp1>
 80091ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f0:	69fb      	ldr	r3, [r7, #28]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3720      	adds	r7, #32
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b088      	sub	sp, #32
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009208:	2318      	movs	r3, #24
 800920a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800920c:	2340      	movs	r3, #64	; 0x40
 800920e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff ff0e 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009226:	f241 3288 	movw	r2, #5000	; 0x1388
 800922a:	2118      	movs	r1, #24
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9b3 	bl	8009598 <SDMMC_GetCmdResp1>
 8009232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009234:	69fb      	ldr	r3, [r7, #28]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b088      	sub	sp, #32
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800924c:	2319      	movs	r3, #25
 800924e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009250:	2340      	movs	r3, #64	; 0x40
 8009252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff feec 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800926a:	f241 3288 	movw	r2, #5000	; 0x1388
 800926e:	2119      	movs	r1, #25
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f991 	bl	8009598 <SDMMC_GetCmdResp1>
 8009276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009278:	69fb      	ldr	r3, [r7, #28]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009290:	230c      	movs	r3, #12
 8009292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800929c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092a2:	f107 0308 	add.w	r3, r7, #8
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff feca 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80092ae:	4a05      	ldr	r2, [pc, #20]	; (80092c4 <SDMMC_CmdStopTransfer+0x40>)
 80092b0:	210c      	movs	r1, #12
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f970 	bl	8009598 <SDMMC_GetCmdResp1>
 80092b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ba:	69fb      	ldr	r3, [r7, #28]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	05f5e100 	.word	0x05f5e100

080092c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80092d8:	2307      	movs	r3, #7
 80092da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092dc:	2340      	movs	r3, #64	; 0x40
 80092de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ea:	f107 0310 	add.w	r3, r7, #16
 80092ee:	4619      	mov	r1, r3
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff fea6 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80092f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fa:	2107      	movs	r1, #7
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f94b 	bl	8009598 <SDMMC_GetCmdResp1>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009306:	4618      	mov	r0, r3
 8009308:	3728      	adds	r7, #40	; 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b088      	sub	sp, #32
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff fe85 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fb65 	bl	8009a08 <SDMMC_GetCmdError>
 800933e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009340:	69fb      	ldr	r3, [r7, #28]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3720      	adds	r7, #32
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b088      	sub	sp, #32
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009352:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009358:	2308      	movs	r3, #8
 800935a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009368:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff fe66 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 faf8 	bl	800996c <SDMMC_GetCmdResp7>
 800937c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937e:	69fb      	ldr	r3, [r7, #28]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009396:	2337      	movs	r3, #55	; 0x37
 8009398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800939a:	2340      	movs	r3, #64	; 0x40
 800939c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800939e:	2300      	movs	r3, #0
 80093a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093a8:	f107 0308 	add.w	r3, r7, #8
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7ff fe47 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80093b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b8:	2137      	movs	r1, #55	; 0x37
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8ec 	bl	8009598 <SDMMC_GetCmdResp1>
 80093c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093c2:	69fb      	ldr	r3, [r7, #28]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80093e2:	2329      	movs	r3, #41	; 0x29
 80093e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093e6:	2340      	movs	r3, #64	; 0x40
 80093e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093ea:	2300      	movs	r3, #0
 80093ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093f4:	f107 0308 	add.w	r3, r7, #8
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff fe21 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f9ff 	bl	8009804 <SDMMC_GetCmdResp3>
 8009406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009408:	69fb      	ldr	r3, [r7, #28]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b088      	sub	sp, #32
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009420:	2306      	movs	r3, #6
 8009422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800942c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009432:	f107 0308 	add.w	r3, r7, #8
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fe02 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800943e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009442:	2106      	movs	r1, #6
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f8a7 	bl	8009598 <SDMMC_GetCmdResp1>
 800944a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800944c:	69fb      	ldr	r3, [r7, #28]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b088      	sub	sp, #32
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009462:	2333      	movs	r3, #51	; 0x33
 8009464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800946a:	2300      	movs	r3, #0
 800946c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800946e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff fde1 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009480:	f241 3288 	movw	r2, #5000	; 0x1388
 8009484:	2133      	movs	r1, #51	; 0x33
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f886 	bl	8009598 <SDMMC_GetCmdResp1>
 800948c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800948e:	69fb      	ldr	r3, [r7, #28]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80094a4:	2302      	movs	r3, #2
 80094a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094a8:	23c0      	movs	r3, #192	; 0xc0
 80094aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094b6:	f107 0308 	add.w	r3, r7, #8
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff fdc0 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f956 	bl	8009774 <SDMMC_GetCmdResp2>
 80094c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ca:	69fb      	ldr	r3, [r7, #28]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80094e2:	2309      	movs	r3, #9
 80094e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094e6:	23c0      	movs	r3, #192	; 0xc0
 80094e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094f4:	f107 0308 	add.w	r3, r7, #8
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fda1 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f937 	bl	8009774 <SDMMC_GetCmdResp2>
 8009506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009508:	69fb      	ldr	r3, [r7, #28]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b088      	sub	sp, #32
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009520:	2303      	movs	r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800952c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff fd82 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	2103      	movs	r1, #3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f99c 	bl	8009880 <SDMMC_GetCmdResp6>
 8009548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800954a:	69fb      	ldr	r3, [r7, #28]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009562:	230d      	movs	r3, #13
 8009564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009566:	2340      	movs	r3, #64	; 0x40
 8009568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800956e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009574:	f107 0308 	add.w	r3, r7, #8
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fd61 	bl	8009042 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009580:	f241 3288 	movw	r2, #5000	; 0x1388
 8009584:	210d      	movs	r1, #13
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f806 	bl	8009598 <SDMMC_GetCmdResp1>
 800958c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800958e:	69fb      	ldr	r3, [r7, #28]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	460b      	mov	r3, r1
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095a6:	4b70      	ldr	r3, [pc, #448]	; (8009768 <SDMMC_GetCmdResp1+0x1d0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a70      	ldr	r2, [pc, #448]	; (800976c <SDMMC_GetCmdResp1+0x1d4>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	0a5a      	lsrs	r2, r3, #9
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	fb02 f303 	mul.w	r3, r2, r3
 80095b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	1e5a      	subs	r2, r3, #1
 80095be:	61fa      	str	r2, [r7, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d102      	bne.n	80095ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095c8:	e0c9      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0ef      	beq.n	80095ba <SDMMC_GetCmdResp1+0x22>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ea      	bne.n	80095ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2204      	movs	r2, #4
 80095f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f6:	2304      	movs	r3, #4
 80095f8:	e0b1      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800960c:	2301      	movs	r3, #1
 800960e:	e0a6      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	22c5      	movs	r2, #197	; 0xc5
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff fd3d 	bl	8009096 <SDIO_GetCommandResponse>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	4293      	cmp	r3, r2
 8009624:	d001      	beq.n	800962a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009626:	2301      	movs	r3, #1
 8009628:	e099      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff fd3f 	bl	80090b0 <SDIO_GetResponse>
 8009632:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	4b4e      	ldr	r3, [pc, #312]	; (8009770 <SDMMC_GetCmdResp1+0x1d8>)
 8009638:	4013      	ands	r3, r2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800963e:	2300      	movs	r3, #0
 8009640:	e08d      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da02      	bge.n	800964e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800964c:	e087      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	e080      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009666:	2380      	movs	r3, #128	; 0x80
 8009668:	e079      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009678:	e071      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009688:	e069      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009698:	e061      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096a8:	e059      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b8:	e051      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096c8:	e049      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096d8:	e041      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80096e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e8:	e039      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096f8:	e031      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009708:	e029      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009714:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009718:	e021      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009724:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009728:	e019      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009738:	e011      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009748:	e009      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009754:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009758:	e001      	b.n	800975e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800975a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800975e:	4618      	mov	r0, r3
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000018 	.word	0x20000018
 800976c:	10624dd3 	.word	0x10624dd3
 8009770:	fdffe008 	.word	0xfdffe008

08009774 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800977c:	4b1f      	ldr	r3, [pc, #124]	; (80097fc <SDMMC_GetCmdResp2+0x88>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a1f      	ldr	r2, [pc, #124]	; (8009800 <SDMMC_GetCmdResp2+0x8c>)
 8009782:	fba2 2303 	umull	r2, r3, r2, r3
 8009786:	0a5b      	lsrs	r3, r3, #9
 8009788:	f241 3288 	movw	r2, #5000	; 0x1388
 800978c:	fb02 f303 	mul.w	r3, r2, r3
 8009790:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1e5a      	subs	r2, r3, #1
 8009796:	60fa      	str	r2, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800979c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097a0:	e026      	b.n	80097f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0ef      	beq.n	8009792 <SDMMC_GetCmdResp2+0x1e>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1ea      	bne.n	8009792 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2204      	movs	r2, #4
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097ce:	2304      	movs	r3, #4
 80097d0:	e00e      	b.n	80097f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d004      	beq.n	80097e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e003      	b.n	80097f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	22c5      	movs	r2, #197	; 0xc5
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000018 	.word	0x20000018
 8009800:	10624dd3 	.word	0x10624dd3

08009804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800980c:	4b1a      	ldr	r3, [pc, #104]	; (8009878 <SDMMC_GetCmdResp3+0x74>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a1a      	ldr	r2, [pc, #104]	; (800987c <SDMMC_GetCmdResp3+0x78>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	0a5b      	lsrs	r3, r3, #9
 8009818:	f241 3288 	movw	r2, #5000	; 0x1388
 800981c:	fb02 f303 	mul.w	r3, r2, r3
 8009820:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1e5a      	subs	r2, r3, #1
 8009826:	60fa      	str	r2, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009830:	e01b      	b.n	800986a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0ef      	beq.n	8009822 <SDMMC_GetCmdResp3+0x1e>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1ea      	bne.n	8009822 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2204      	movs	r2, #4
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800985e:	2304      	movs	r3, #4
 8009860:	e003      	b.n	800986a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	22c5      	movs	r2, #197	; 0xc5
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20000018 	.word	0x20000018
 800987c:	10624dd3 	.word	0x10624dd3

08009880 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	460b      	mov	r3, r1
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800988e:	4b35      	ldr	r3, [pc, #212]	; (8009964 <SDMMC_GetCmdResp6+0xe4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a35      	ldr	r2, [pc, #212]	; (8009968 <SDMMC_GetCmdResp6+0xe8>)
 8009894:	fba2 2303 	umull	r2, r3, r2, r3
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	f241 3288 	movw	r2, #5000	; 0x1388
 800989e:	fb02 f303 	mul.w	r3, r2, r3
 80098a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	1e5a      	subs	r2, r3, #1
 80098a8:	61fa      	str	r2, [r7, #28]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d102      	bne.n	80098b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098b2:	e052      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0ef      	beq.n	80098a4 <SDMMC_GetCmdResp6+0x24>
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1ea      	bne.n	80098a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2204      	movs	r2, #4
 80098de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098e0:	2304      	movs	r3, #4
 80098e2:	e03a      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e02f      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff fbcb 	bl	8009096 <SDIO_GetCommandResponse>
 8009900:	4603      	mov	r3, r0
 8009902:	461a      	mov	r2, r3
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	4293      	cmp	r3, r2
 8009908:	d001      	beq.n	800990e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990a:	2301      	movs	r3, #1
 800990c:	e025      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	22c5      	movs	r2, #197	; 0xc5
 8009912:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009914:	2100      	movs	r1, #0
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7ff fbca 	bl	80090b0 <SDIO_GetResponse>
 800991c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009932:	2300      	movs	r3, #0
 8009934:	e011      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009944:	e009      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009954:	e001      	b.n	800995a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800995a:	4618      	mov	r0, r3
 800995c:	3720      	adds	r7, #32
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000018 	.word	0x20000018
 8009968:	10624dd3 	.word	0x10624dd3

0800996c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009974:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <SDMMC_GetCmdResp7+0x94>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a22      	ldr	r2, [pc, #136]	; (8009a04 <SDMMC_GetCmdResp7+0x98>)
 800997a:	fba2 2303 	umull	r2, r3, r2, r3
 800997e:	0a5b      	lsrs	r3, r3, #9
 8009980:	f241 3288 	movw	r2, #5000	; 0x1388
 8009984:	fb02 f303 	mul.w	r3, r2, r3
 8009988:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	1e5a      	subs	r2, r3, #1
 800998e:	60fa      	str	r2, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009998:	e02c      	b.n	80099f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0ef      	beq.n	800998a <SDMMC_GetCmdResp7+0x1e>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1ea      	bne.n	800998a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2204      	movs	r2, #4
 80099c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099c6:	2304      	movs	r3, #4
 80099c8:	e014      	b.n	80099f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d004      	beq.n	80099e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099dc:	2301      	movs	r3, #1
 80099de:	e009      	b.n	80099f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2240      	movs	r2, #64	; 0x40
 80099f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80099f2:	2300      	movs	r3, #0
  
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20000018 	.word	0x20000018
 8009a04:	10624dd3 	.word	0x10624dd3

08009a08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <SDMMC_GetCmdError+0x50>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a11      	ldr	r2, [pc, #68]	; (8009a5c <SDMMC_GetCmdError+0x54>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	0a5b      	lsrs	r3, r3, #9
 8009a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a20:	fb02 f303 	mul.w	r3, r2, r3
 8009a24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1e5a      	subs	r2, r3, #1
 8009a2a:	60fa      	str	r2, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a34:	e009      	b.n	8009a4a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0f1      	beq.n	8009a26 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	22c5      	movs	r2, #197	; 0xc5
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000018 	.word	0x20000018
 8009a5c:	10624dd3 	.word	0x10624dd3

08009a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a60:	b084      	sub	sp, #16
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	f107 001c 	add.w	r0, r7, #28
 8009a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d122      	bne.n	8009abe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d105      	bne.n	8009ab2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fbee 	bl	800b294 <USB_CoreReset>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
 8009abc:	e01a      	b.n	8009af4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 fbe2 	bl	800b294 <USB_CoreReset>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d106      	bne.n	8009ae8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8009ae6:	e005      	b.n	8009af4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d10b      	bne.n	8009b12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f043 0206 	orr.w	r2, r3, #6
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f043 0220 	orr.w	r2, r3, #32
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b1e:	b004      	add	sp, #16
 8009b20:	4770      	bx	lr
	...

08009b24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d165      	bne.n	8009c04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4a41      	ldr	r2, [pc, #260]	; (8009c40 <USB_SetTurnaroundTime+0x11c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d906      	bls.n	8009b4e <USB_SetTurnaroundTime+0x2a>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4a40      	ldr	r2, [pc, #256]	; (8009c44 <USB_SetTurnaroundTime+0x120>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d202      	bcs.n	8009b4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b48:	230f      	movs	r3, #15
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	e062      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4a3c      	ldr	r2, [pc, #240]	; (8009c44 <USB_SetTurnaroundTime+0x120>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d306      	bcc.n	8009b64 <USB_SetTurnaroundTime+0x40>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4a3b      	ldr	r2, [pc, #236]	; (8009c48 <USB_SetTurnaroundTime+0x124>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d202      	bcs.n	8009b64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b5e:	230e      	movs	r3, #14
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	e057      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4a38      	ldr	r2, [pc, #224]	; (8009c48 <USB_SetTurnaroundTime+0x124>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d306      	bcc.n	8009b7a <USB_SetTurnaroundTime+0x56>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4a37      	ldr	r2, [pc, #220]	; (8009c4c <USB_SetTurnaroundTime+0x128>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d202      	bcs.n	8009b7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009b74:	230d      	movs	r3, #13
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e04c      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4a33      	ldr	r2, [pc, #204]	; (8009c4c <USB_SetTurnaroundTime+0x128>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d306      	bcc.n	8009b90 <USB_SetTurnaroundTime+0x6c>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4a32      	ldr	r2, [pc, #200]	; (8009c50 <USB_SetTurnaroundTime+0x12c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d802      	bhi.n	8009b90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	617b      	str	r3, [r7, #20]
 8009b8e:	e041      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4a2f      	ldr	r2, [pc, #188]	; (8009c50 <USB_SetTurnaroundTime+0x12c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d906      	bls.n	8009ba6 <USB_SetTurnaroundTime+0x82>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4a2e      	ldr	r2, [pc, #184]	; (8009c54 <USB_SetTurnaroundTime+0x130>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d802      	bhi.n	8009ba6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ba0:	230b      	movs	r3, #11
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	e036      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4a2a      	ldr	r2, [pc, #168]	; (8009c54 <USB_SetTurnaroundTime+0x130>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d906      	bls.n	8009bbc <USB_SetTurnaroundTime+0x98>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	4a29      	ldr	r2, [pc, #164]	; (8009c58 <USB_SetTurnaroundTime+0x134>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d802      	bhi.n	8009bbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	e02b      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4a26      	ldr	r2, [pc, #152]	; (8009c58 <USB_SetTurnaroundTime+0x134>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d906      	bls.n	8009bd2 <USB_SetTurnaroundTime+0xae>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	4a25      	ldr	r2, [pc, #148]	; (8009c5c <USB_SetTurnaroundTime+0x138>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d202      	bcs.n	8009bd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009bcc:	2309      	movs	r3, #9
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e020      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4a21      	ldr	r2, [pc, #132]	; (8009c5c <USB_SetTurnaroundTime+0x138>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d306      	bcc.n	8009be8 <USB_SetTurnaroundTime+0xc4>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	4a20      	ldr	r2, [pc, #128]	; (8009c60 <USB_SetTurnaroundTime+0x13c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d802      	bhi.n	8009be8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009be2:	2308      	movs	r3, #8
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	e015      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4a1d      	ldr	r2, [pc, #116]	; (8009c60 <USB_SetTurnaroundTime+0x13c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d906      	bls.n	8009bfe <USB_SetTurnaroundTime+0xda>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	; (8009c64 <USB_SetTurnaroundTime+0x140>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d202      	bcs.n	8009bfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009bf8:	2307      	movs	r3, #7
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	e00a      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009bfe:	2306      	movs	r3, #6
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	e007      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c0a:	2309      	movs	r3, #9
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	e001      	b.n	8009c14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c10:	2309      	movs	r3, #9
 8009c12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	029b      	lsls	r3, r3, #10
 8009c28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	00d8acbf 	.word	0x00d8acbf
 8009c44:	00e4e1c0 	.word	0x00e4e1c0
 8009c48:	00f42400 	.word	0x00f42400
 8009c4c:	01067380 	.word	0x01067380
 8009c50:	011a499f 	.word	0x011a499f
 8009c54:	01312cff 	.word	0x01312cff
 8009c58:	014ca43f 	.word	0x014ca43f
 8009c5c:	016e3600 	.word	0x016e3600
 8009c60:	01a6ab1f 	.word	0x01a6ab1f
 8009c64:	01e84800 	.word	0x01e84800

08009c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f043 0201 	orr.w	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d115      	bne.n	8009cfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f7f8 fc66 	bl	80025ac <HAL_Delay>
      ms++;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fa45 	bl	800b176 <USB_GetMode>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d01e      	beq.n	8009d30 <USB_SetCurrentMode+0x84>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b31      	cmp	r3, #49	; 0x31
 8009cf6:	d9f0      	bls.n	8009cda <USB_SetCurrentMode+0x2e>
 8009cf8:	e01a      	b.n	8009d30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d115      	bne.n	8009d2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	f7f8 fc4d 	bl	80025ac <HAL_Delay>
      ms++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 fa2c 	bl	800b176 <USB_GetMode>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <USB_SetCurrentMode+0x84>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b31      	cmp	r3, #49	; 0x31
 8009d28:	d9f0      	bls.n	8009d0c <USB_SetCurrentMode+0x60>
 8009d2a:	e001      	b.n	8009d30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e005      	b.n	8009d3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b32      	cmp	r3, #50	; 0x32
 8009d34:	d101      	bne.n	8009d3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d44:	b084      	sub	sp, #16
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e009      	b.n	8009d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3340      	adds	r3, #64	; 0x40
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b0e      	cmp	r3, #14
 8009d7c:	d9f2      	bls.n	8009d64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d11c      	bne.n	8009dbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	639a      	str	r2, [r3, #56]	; 0x38
 8009dbc:	e00b      	b.n	8009dd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ddc:	461a      	mov	r2, r3
 8009dde:	2300      	movs	r3, #0
 8009de0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de8:	4619      	mov	r1, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	461a      	mov	r2, r3
 8009df2:	680b      	ldr	r3, [r1, #0]
 8009df4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d10c      	bne.n	8009e16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d104      	bne.n	8009e0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e02:	2100      	movs	r1, #0
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f965 	bl	800a0d4 <USB_SetDevSpeed>
 8009e0a:	e008      	b.n	8009e1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f960 	bl	800a0d4 <USB_SetDevSpeed>
 8009e14:	e003      	b.n	8009e1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e16:	2103      	movs	r1, #3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f95b 	bl	800a0d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e1e:	2110      	movs	r1, #16
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f8f3 	bl	800a00c <USB_FlushTxFifo>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f91f 	bl	800a074 <USB_FlushRxFifo>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e46:	461a      	mov	r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	461a      	mov	r2, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	461a      	mov	r2, r3
 8009e60:	2300      	movs	r3, #0
 8009e62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	e043      	b.n	8009ef2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e80:	d118      	bne.n	8009eb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e94:	461a      	mov	r2, r3
 8009e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	e013      	b.n	8009ec6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	e008      	b.n	8009ec6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d3b7      	bcc.n	8009e6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	e043      	b.n	8009f88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f16:	d118      	bne.n	8009f4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	015a      	lsls	r2, r3, #5
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4413      	add	r3, r2
 8009f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	e013      	b.n	8009f5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f40:	461a      	mov	r2, r3
 8009f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	e008      	b.n	8009f5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	461a      	mov	r2, r3
 8009f58:	2300      	movs	r3, #0
 8009f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f68:	461a      	mov	r2, r3
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	3301      	adds	r3, #1
 8009f86:	613b      	str	r3, [r7, #16]
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d3b7      	bcc.n	8009f00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009fb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d105      	bne.n	8009fc4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	f043 0210 	orr.w	r2, r3, #16
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	699a      	ldr	r2, [r3, #24]
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <USB_DevInit+0x2c4>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f043 0208 	orr.w	r2, r3, #8
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d107      	bne.n	8009ff8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ff0:	f043 0304 	orr.w	r3, r3, #4
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a004:	b004      	add	sp, #16
 800a006:	4770      	bx	lr
 800a008:	803c3800 	.word	0x803c3800

0800a00c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3301      	adds	r3, #1
 800a01e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a13      	ldr	r2, [pc, #76]	; (800a070 <USB_FlushTxFifo+0x64>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d901      	bls.n	800a02c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e01b      	b.n	800a064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	daf2      	bge.n	800a01a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	019b      	lsls	r3, r3, #6
 800a03c:	f043 0220 	orr.w	r2, r3, #32
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3301      	adds	r3, #1
 800a048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4a08      	ldr	r2, [pc, #32]	; (800a070 <USB_FlushTxFifo+0x64>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d901      	bls.n	800a056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e006      	b.n	800a064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b20      	cmp	r3, #32
 800a060:	d0f0      	beq.n	800a044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	00030d40 	.word	0x00030d40

0800a074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a11      	ldr	r2, [pc, #68]	; (800a0d0 <USB_FlushRxFifo+0x5c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d901      	bls.n	800a092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e018      	b.n	800a0c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	daf2      	bge.n	800a080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2210      	movs	r2, #16
 800a0a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4a08      	ldr	r2, [pc, #32]	; (800a0d0 <USB_FlushRxFifo+0x5c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d901      	bls.n	800a0b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e006      	b.n	800a0c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	d0f0      	beq.n	800a0a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	00030d40 	.word	0x00030d40

0800a0d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a106:	b480      	push	{r7}
 800a108:	b087      	sub	sp, #28
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 0306 	and.w	r3, r3, #6
 800a11e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d102      	bne.n	800a12c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
 800a12a:	e00a      	b.n	800a142 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d002      	beq.n	800a138 <USB_GetDevSpeed+0x32>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b06      	cmp	r3, #6
 800a136:	d102      	bne.n	800a13e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a138:	2302      	movs	r3, #2
 800a13a:	75fb      	strb	r3, [r7, #23]
 800a13c:	e001      	b.n	800a142 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a13e:	230f      	movs	r3, #15
 800a140:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
}
 800a144:	4618      	mov	r0, r3
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d13a      	bne.n	800a1e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a172:	69da      	ldr	r2, [r3, #28]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 030f 	and.w	r3, r3, #15
 800a17c:	2101      	movs	r1, #1
 800a17e:	fa01 f303 	lsl.w	r3, r1, r3
 800a182:	b29b      	uxth	r3, r3
 800a184:	68f9      	ldr	r1, [r7, #12]
 800a186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a18a:	4313      	orrs	r3, r2
 800a18c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d155      	bne.n	800a250 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	791b      	ldrb	r3, [r3, #4]
 800a1be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	059b      	lsls	r3, r3, #22
 800a1c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	e036      	b.n	800a250 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e8:	69da      	ldr	r2, [r3, #28]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f8:	041b      	lsls	r3, r3, #16
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a200:	4313      	orrs	r3, r2
 800a202:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d11a      	bne.n	800a250 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4413      	add	r3, r2
 800a222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	791b      	ldrb	r3, [r3, #4]
 800a234:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a236:	430b      	orrs	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a24e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
	...

0800a260 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d161      	bne.n	800a340 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a292:	d11f      	bne.n	800a2d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	0151      	lsls	r1, r2, #5
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	440a      	add	r2, r1
 800a2aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 030f 	and.w	r3, r3, #15
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	68f9      	ldr	r1, [r7, #12]
 800a2f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fe:	69da      	ldr	r2, [r3, #28]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 030f 	and.w	r3, r3, #15
 800a308:	2101      	movs	r1, #1
 800a30a:	fa01 f303 	lsl.w	r3, r1, r3
 800a30e:	b29b      	uxth	r3, r3
 800a310:	43db      	mvns	r3, r3
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a318:	4013      	ands	r3, r2
 800a31a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	0159      	lsls	r1, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	440b      	add	r3, r1
 800a332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a336:	4619      	mov	r1, r3
 800a338:	4b35      	ldr	r3, [pc, #212]	; (800a410 <USB_DeactivateEndpoint+0x1b0>)
 800a33a:	4013      	ands	r3, r2
 800a33c:	600b      	str	r3, [r1, #0]
 800a33e:	e060      	b.n	800a402 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a356:	d11f      	bne.n	800a398 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a376:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a396:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a39e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 030f 	and.w	r3, r3, #15
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ae:	041b      	lsls	r3, r3, #16
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	68f9      	ldr	r1, [r7, #12]
 800a3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d2:	041b      	lsls	r3, r3, #16
 800a3d4:	43db      	mvns	r3, r3
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3dc:	4013      	ands	r3, r2
 800a3de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	0159      	lsls	r1, r3, #5
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	440b      	add	r3, r1
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <USB_DeactivateEndpoint+0x1b4>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	ec337800 	.word	0xec337800
 800a414:	eff37800 	.word	0xeff37800

0800a418 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	; 0x28
 800a41c:	af02      	add	r7, sp, #8
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	4613      	mov	r3, r2
 800a424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b01      	cmp	r3, #1
 800a436:	f040 815c 	bne.w	800a6f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d132      	bne.n	800a4a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a0:	0cdb      	lsrs	r3, r3, #19
 800a4a2:	04db      	lsls	r3, r3, #19
 800a4a4:	6113      	str	r3, [r2, #16]
 800a4a6:	e074      	b.n	800a592 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	0151      	lsls	r1, r2, #5
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	440a      	add	r2, r1
 800a4be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c2:	0cdb      	lsrs	r3, r3, #19
 800a4c4:	04db      	lsls	r3, r3, #19
 800a4c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	0151      	lsls	r1, r2, #5
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	440a      	add	r2, r1
 800a4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6999      	ldr	r1, [r3, #24]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	440b      	add	r3, r1
 800a504:	1e59      	subs	r1, r3, #1
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a50e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a510:	4b9d      	ldr	r3, [pc, #628]	; (800a788 <USB_EPStartXfer+0x370>)
 800a512:	400b      	ands	r3, r1
 800a514:	69b9      	ldr	r1, [r7, #24]
 800a516:	0148      	lsls	r0, r1, #5
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	4401      	add	r1, r0
 800a51c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a520:	4313      	orrs	r3, r2
 800a522:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a53a:	69b9      	ldr	r1, [r7, #24]
 800a53c:	0148      	lsls	r0, r1, #5
 800a53e:	69f9      	ldr	r1, [r7, #28]
 800a540:	4401      	add	r1, r0
 800a542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a546:	4313      	orrs	r3, r2
 800a548:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	791b      	ldrb	r3, [r3, #4]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d11f      	bne.n	800a592 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	0151      	lsls	r1, r2, #5
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	440a      	add	r2, r1
 800a568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a56c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a570:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	69fa      	ldr	r2, [r7, #28]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a590:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d14b      	bne.n	800a630 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	791b      	ldrb	r3, [r3, #4]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d128      	bne.n	800a60e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d110      	bne.n	800a5ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	0151      	lsls	r1, r2, #5
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	e00f      	b.n	800a60e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a60c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a628:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	e133      	b.n	800a898 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	0151      	lsls	r1, r2, #5
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	440a      	add	r2, r1
 800a646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a64e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	791b      	ldrb	r3, [r3, #4]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d015      	beq.n	800a684 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 811b 	beq.w	800a898 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	2101      	movs	r1, #1
 800a674:	fa01 f303 	lsl.w	r3, r1, r3
 800a678:	69f9      	ldr	r1, [r7, #28]
 800a67a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a67e:	4313      	orrs	r3, r2
 800a680:	634b      	str	r3, [r1, #52]	; 0x34
 800a682:	e109      	b.n	800a898 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a690:	2b00      	cmp	r3, #0
 800a692:	d110      	bne.n	800a6b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	e00f      	b.n	800a6d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	6919      	ldr	r1, [r3, #16]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	781a      	ldrb	r2, [r3, #0]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	b298      	uxth	r0, r3
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fade 	bl	800acac <USB_WritePacket>
 800a6f0:	e0d2      	b.n	800a898 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	69fa      	ldr	r2, [r7, #28]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a70c:	0cdb      	lsrs	r3, r3, #19
 800a70e:	04db      	lsls	r3, r3, #19
 800a710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	69fa      	ldr	r2, [r7, #28]
 800a726:	440a      	add	r2, r1
 800a728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a72c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a734:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d126      	bne.n	800a78c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	691a      	ldr	r2, [r3, #16]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a754:	69b9      	ldr	r1, [r7, #24]
 800a756:	0148      	lsls	r0, r1, #5
 800a758:	69f9      	ldr	r1, [r7, #28]
 800a75a:	4401      	add	r1, r0
 800a75c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a760:	4313      	orrs	r3, r2
 800a762:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	0151      	lsls	r1, r2, #5
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	440a      	add	r2, r1
 800a77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a77e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a782:	6113      	str	r3, [r2, #16]
 800a784:	e03a      	b.n	800a7fc <USB_EPStartXfer+0x3e4>
 800a786:	bf00      	nop
 800a788:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	699a      	ldr	r2, [r3, #24]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	4413      	add	r3, r2
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	8afa      	ldrh	r2, [r7, #22]
 800a7a8:	fb03 f202 	mul.w	r2, r3, r2
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	691a      	ldr	r2, [r3, #16]
 800a7be:	8afb      	ldrh	r3, [r7, #22]
 800a7c0:	04d9      	lsls	r1, r3, #19
 800a7c2:	4b38      	ldr	r3, [pc, #224]	; (800a8a4 <USB_EPStartXfer+0x48c>)
 800a7c4:	400b      	ands	r3, r1
 800a7c6:	69b9      	ldr	r1, [r7, #24]
 800a7c8:	0148      	lsls	r0, r1, #5
 800a7ca:	69f9      	ldr	r1, [r7, #28]
 800a7cc:	4401      	add	r1, r0
 800a7ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7ec:	69b9      	ldr	r1, [r7, #24]
 800a7ee:	0148      	lsls	r0, r1, #5
 800a7f0:	69f9      	ldr	r1, [r7, #28]
 800a7f2:	4401      	add	r1, r0
 800a7f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d10d      	bne.n	800a81e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d009      	beq.n	800a81e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6919      	ldr	r1, [r3, #16]
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	4413      	add	r3, r2
 800a816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81a:	460a      	mov	r2, r1
 800a81c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d128      	bne.n	800a878 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a832:	2b00      	cmp	r3, #0
 800a834:	d110      	bne.n	800a858 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	e00f      	b.n	800a878 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	69fa      	ldr	r2, [r7, #28]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a876:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	69fa      	ldr	r2, [r7, #28]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	1ff80000 	.word	0x1ff80000

0800a8a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	785b      	ldrb	r3, [r3, #1]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	f040 80ce 	bne.w	800aa66 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d132      	bne.n	800a938 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	0151      	lsls	r1, r2, #5
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	0151      	lsls	r1, r2, #5
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	440a      	add	r2, r1
 800a90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	0151      	lsls	r1, r2, #5
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	440a      	add	r2, r1
 800a92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a930:	0cdb      	lsrs	r3, r3, #19
 800a932:	04db      	lsls	r3, r3, #19
 800a934:	6113      	str	r3, [r2, #16]
 800a936:	e04e      	b.n	800a9d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a952:	0cdb      	lsrs	r3, r3, #19
 800a954:	04db      	lsls	r3, r3, #19
 800a956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a972:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a976:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a97a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	429a      	cmp	r2, r3
 800a986:	d903      	bls.n	800a990 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	68da      	ldr	r2, [r3, #12]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	0151      	lsls	r1, r2, #5
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9c6:	6939      	ldr	r1, [r7, #16]
 800a9c8:	0148      	lsls	r0, r1, #5
 800a9ca:	6979      	ldr	r1, [r7, #20]
 800a9cc:	4401      	add	r1, r0
 800a9ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d11e      	bne.n	800aa1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	0151      	lsls	r1, r2, #5
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	440a      	add	r2, r1
 800aa0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	e097      	b.n	800ab4a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8083 	beq.w	800ab4a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 030f 	and.w	r3, r3, #15
 800aa54:	2101      	movs	r1, #1
 800aa56:	fa01 f303 	lsl.w	r3, r1, r3
 800aa5a:	6979      	ldr	r1, [r7, #20]
 800aa5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa60:	4313      	orrs	r3, r2
 800aa62:	634b      	str	r3, [r1, #52]	; 0x34
 800aa64:	e071      	b.n	800ab4a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	0151      	lsls	r1, r2, #5
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa80:	0cdb      	lsrs	r3, r3, #19
 800aa82:	04db      	lsls	r3, r3, #19
 800aa84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aaa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aaa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	0151      	lsls	r1, r2, #5
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	440a      	add	r2, r1
 800aad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aadc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaf8:	6939      	ldr	r1, [r7, #16]
 800aafa:	0148      	lsls	r0, r1, #5
 800aafc:	6979      	ldr	r1, [r7, #20]
 800aafe:	4401      	add	r1, r0
 800ab00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab04:	4313      	orrs	r3, r2
 800ab06:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d10d      	bne.n	800ab2a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6919      	ldr	r1, [r3, #16]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab26:	460a      	mov	r2, r1
 800ab28:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	785b      	ldrb	r3, [r3, #1]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d14a      	bne.n	800ac0c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab8e:	f040 8086 	bne.w	800ac9e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abb4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	7812      	ldrb	r2, [r2, #0]
 800abca:	0151      	lsls	r1, r2, #5
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	440a      	add	r2, r1
 800abd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3301      	adds	r3, #1
 800abde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f242 7210 	movw	r2, #10000	; 0x2710
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d902      	bls.n	800abf0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	75fb      	strb	r3, [r7, #23]
          break;
 800abee:	e056      	b.n	800ac9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac08:	d0e7      	beq.n	800abda <USB_EPStopXfer+0x82>
 800ac0a:	e048      	b.n	800ac9e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac24:	d13b      	bne.n	800ac9e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	7812      	ldrb	r2, [r2, #0]
 800ac3a:	0151      	lsls	r1, r2, #5
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	440a      	add	r2, r1
 800ac40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac48:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3301      	adds	r3, #1
 800ac72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d902      	bls.n	800ac84 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	75fb      	strb	r3, [r7, #23]
          break;
 800ac82:	e00c      	b.n	800ac9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac9c:	d0e7      	beq.n	800ac6e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	371c      	adds	r7, #28
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acac:	b480      	push	{r7}
 800acae:	b089      	sub	sp, #36	; 0x24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	4611      	mov	r1, r2
 800acb8:	461a      	mov	r2, r3
 800acba:	460b      	mov	r3, r1
 800acbc:	71fb      	strb	r3, [r7, #7]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d123      	bne.n	800ad1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acd2:	88bb      	ldrh	r3, [r7, #4]
 800acd4:	3303      	adds	r3, #3
 800acd6:	089b      	lsrs	r3, r3, #2
 800acd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800acda:	2300      	movs	r3, #0
 800acdc:	61bb      	str	r3, [r7, #24]
 800acde:	e018      	b.n	800ad12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	031a      	lsls	r2, r3, #12
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acec:	461a      	mov	r2, r3
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	3301      	adds	r3, #1
 800acf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	3301      	adds	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	61bb      	str	r3, [r7, #24]
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d3e2      	bcc.n	800ace0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3724      	adds	r7, #36	; 0x24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b08b      	sub	sp, #44	; 0x2c
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	089b      	lsrs	r3, r3, #2
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad4e:	2300      	movs	r3, #0
 800ad50:	623b      	str	r3, [r7, #32]
 800ad52:	e014      	b.n	800ad7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	3301      	adds	r3, #1
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	3301      	adds	r3, #1
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	3301      	adds	r3, #1
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	3301      	adds	r3, #1
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	623b      	str	r3, [r7, #32]
 800ad7e:	6a3a      	ldr	r2, [r7, #32]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d3e6      	bcc.n	800ad54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad86:	8bfb      	ldrh	r3, [r7, #30]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad96:	461a      	mov	r2, r3
 800ad98:	f107 0310 	add.w	r3, r7, #16
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
 800adac:	b2da      	uxtb	r2, r3
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	701a      	strb	r2, [r3, #0]
      i++;
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	3301      	adds	r3, #1
 800adb6:	623b      	str	r3, [r7, #32]
      pDest++;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	3301      	adds	r3, #1
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800adbe:	8bfb      	ldrh	r3, [r7, #30]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adc4:	8bfb      	ldrh	r3, [r7, #30]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1ea      	bne.n	800ada0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adcc:	4618      	mov	r0, r3
 800adce:	372c      	adds	r7, #44	; 0x2c
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d12c      	bne.n	800ae4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	db12      	blt.n	800ae2c <USB_EPSetStall+0x54>
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00f      	beq.n	800ae2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	0151      	lsls	r1, r2, #5
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	440a      	add	r2, r1
 800ae22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	0151      	lsls	r1, r2, #5
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	440a      	add	r2, r1
 800ae42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	e02b      	b.n	800aea6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	db12      	blt.n	800ae86 <USB_EPSetStall+0xae>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00f      	beq.n	800ae86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	0151      	lsls	r1, r2, #5
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	440a      	add	r2, r1
 800ae7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	015a      	lsls	r2, r3, #5
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	0151      	lsls	r1, r2, #5
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	440a      	add	r2, r1
 800ae9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aea4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	785b      	ldrb	r3, [r3, #1]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d128      	bne.n	800af22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	791b      	ldrb	r3, [r3, #4]
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d003      	beq.n	800af00 <USB_EPClearStall+0x4c>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	791b      	ldrb	r3, [r3, #4]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d138      	bne.n	800af72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	e027      	b.n	800af72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	0151      	lsls	r1, r2, #5
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	440a      	add	r2, r1
 800af38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	791b      	ldrb	r3, [r3, #4]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d003      	beq.n	800af52 <USB_EPClearStall+0x9e>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	791b      	ldrb	r3, [r3, #4]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d10f      	bne.n	800af72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	0151      	lsls	r1, r2, #5
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	440a      	add	r2, r1
 800af68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800afa2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800afb4:	68f9      	ldr	r1, [r7, #12]
 800afb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afba:	4313      	orrs	r3, r2
 800afbc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afe6:	f023 0303 	bic.w	r3, r3, #3
 800afea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800affa:	f023 0302 	bic.w	r3, r3, #2
 800affe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b00e:	b480      	push	{r7}
 800b010:	b085      	sub	sp, #20
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b03c:	f043 0302 	orr.w	r3, r3, #2
 800b040:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4013      	ands	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b068:	68fb      	ldr	r3, [r7, #12]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	4013      	ands	r3, r2
 800b098:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	0c1b      	lsrs	r3, r3, #16
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	b29b      	uxth	r3, r3
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	4013      	ands	r3, r2
 800b10a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b10c:	68bb      	ldr	r3, [r7, #8]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b087      	sub	sp, #28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 030f 	and.w	r3, r3, #15
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	fa22 f303 	lsr.w	r3, r2, r3
 800b14a:	01db      	lsls	r3, r3, #7
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4013      	ands	r3, r2
 800b166:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b168:	68bb      	ldr	r3, [r7, #8]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	f003 0301 	and.w	r3, r3, #1
}
 800b186:	4618      	mov	r0, r3
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b1b0:	f023 0307 	bic.w	r3, r3, #7
 800b1b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	333c      	adds	r3, #60	; 0x3c
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	4a26      	ldr	r2, [pc, #152]	; (800b290 <USB_EP0_OutStart+0xb8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d90a      	bls.n	800b212 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b20c:	d101      	bne.n	800b212 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	e037      	b.n	800b282 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b218:	461a      	mov	r2, r3
 800b21a:	2300      	movs	r3, #0
 800b21c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b240:	f043 0318 	orr.w	r3, r3, #24
 800b244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b254:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b258:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d10f      	bne.n	800b280 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b266:	461a      	mov	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b27a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b27e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	4f54300a 	.word	0x4f54300a

0800b294 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a13      	ldr	r2, [pc, #76]	; (800b2f8 <USB_CoreReset+0x64>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d901      	bls.n	800b2b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e01b      	b.n	800b2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	daf2      	bge.n	800b2a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f043 0201 	orr.w	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a09      	ldr	r2, [pc, #36]	; (800b2f8 <USB_CoreReset+0x64>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d901      	bls.n	800b2dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e006      	b.n	800b2ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d0f0      	beq.n	800b2ca <USB_CoreReset+0x36>

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	00030d40 	.word	0x00030d40

0800b2fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b300:	4904      	ldr	r1, [pc, #16]	; (800b314 <MX_FATFS_Init+0x18>)
 800b302:	4805      	ldr	r0, [pc, #20]	; (800b318 <MX_FATFS_Init+0x1c>)
 800b304:	f006 f8d8 	bl	80114b8 <FATFS_LinkDriver>
 800b308:	4603      	mov	r3, r0
 800b30a:	461a      	mov	r2, r3
 800b30c:	4b03      	ldr	r3, [pc, #12]	; (800b31c <MX_FATFS_Init+0x20>)
 800b30e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b310:	bf00      	nop
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20000e38 	.word	0x20000e38
 800b318:	08013c7c 	.word	0x08013c7c
 800b31c:	20000e34 	.word	0x20000e34

0800b320 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b324:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b326:	4618      	mov	r0, r3
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b33a:	f000 f88a 	bl	800b452 <BSP_SD_IsDetected>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b01      	cmp	r3, #1
 800b342:	d001      	beq.n	800b348 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e012      	b.n	800b36e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b348:	480b      	ldr	r0, [pc, #44]	; (800b378 <BSP_SD_Init+0x48>)
 800b34a:	f7fa fe80 	bl	800604e <HAL_SD_Init>
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d109      	bne.n	800b36c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b35c:	4806      	ldr	r0, [pc, #24]	; (800b378 <BSP_SD_Init+0x48>)
 800b35e:	f7fb fe2d 	bl	8006fbc <HAL_SD_ConfigWideBusOperation>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b36c:	79fb      	ldrb	r3, [r7, #7]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	2000090c 	.word	0x2000090c

0800b37c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af02      	add	r7, sp, #8
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	4806      	ldr	r0, [pc, #24]	; (800b3b4 <BSP_SD_ReadBlocks+0x38>)
 800b39a:	f7fa ff09 	bl	80061b0 <HAL_SD_ReadBlocks>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	2000090c 	.word	0x2000090c

0800b3b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	4806      	ldr	r0, [pc, #24]	; (800b3f0 <BSP_SD_WriteBlocks+0x38>)
 800b3d6:	f7fb f8c9 	bl	800656c <HAL_SD_WriteBlocks>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	2000090c 	.word	0x2000090c

0800b3f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b3f8:	4805      	ldr	r0, [pc, #20]	; (800b410 <BSP_SD_GetCardState+0x1c>)
 800b3fa:	f7fb fe79 	bl	80070f0 <HAL_SD_GetCardState>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b04      	cmp	r3, #4
 800b402:	bf14      	ite	ne
 800b404:	2301      	movne	r3, #1
 800b406:	2300      	moveq	r3, #0
 800b408:	b2db      	uxtb	r3, r3
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	2000090c 	.word	0x2000090c

0800b414 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	4803      	ldr	r0, [pc, #12]	; (800b42c <BSP_SD_GetCardInfo+0x18>)
 800b420:	f7fb fda0 	bl	8006f64 <HAL_SD_GetCardInfo>
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	2000090c 	.word	0x2000090c

0800b430 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b438:	f000 f804 	bl	800b444 <BSP_SD_ReadCpltCallback>
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0

}
 800b448:	bf00      	nop
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b458:	2301      	movs	r3, #1
 800b45a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	b2db      	uxtb	r3, r3
}
 800b460:	4618      	mov	r0, r3
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b476:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <SD_CheckStatus+0x38>)
 800b478:	2201      	movs	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b47c:	f7ff ffba 	bl	800b3f4 <BSP_SD_GetCardState>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b486:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <SD_CheckStatus+0x38>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <SD_CheckStatus+0x38>)
 800b494:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b496:	4b03      	ldr	r3, [pc, #12]	; (800b4a4 <SD_CheckStatus+0x38>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b2db      	uxtb	r3, r3
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000021 	.word	0x20000021

0800b4a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <SD_initialize+0x38>)
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b4b8:	f7ff ff3a 	bl	800b330 <BSP_SD_Init>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d107      	bne.n	800b4d2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ffd1 	bl	800b46c <SD_CheckStatus>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <SD_initialize+0x38>)
 800b4d0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b4d2:	4b03      	ldr	r3, [pc, #12]	; (800b4e0 <SD_initialize+0x38>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	b2db      	uxtb	r3, r3
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000021 	.word	0x20000021

0800b4e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ffbb 	bl	800b46c <SD_CheckStatus>
 800b4f6:	4603      	mov	r3, r0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	68b8      	ldr	r0, [r7, #8]
 800b51e:	f7ff ff2d 	bl	800b37c <BSP_SD_ReadBlocks>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d107      	bne.n	800b538 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b528:	bf00      	nop
 800b52a:	f7ff ff63 	bl	800b3f4 <BSP_SD_GetCardState>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1fa      	bne.n	800b52a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b086      	sub	sp, #24
 800b546:	af00      	add	r7, sp, #0
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b556:	f04f 33ff 	mov.w	r3, #4294967295
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	68b8      	ldr	r0, [r7, #8]
 800b560:	f7ff ff2a 	bl	800b3b8 <BSP_SD_WriteBlocks>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d107      	bne.n	800b57a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b56a:	bf00      	nop
 800b56c:	f7ff ff42 	bl	800b3f4 <BSP_SD_GetCardState>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1fa      	bne.n	800b56c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08c      	sub	sp, #48	; 0x30
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	603a      	str	r2, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
 800b590:	460b      	mov	r3, r1
 800b592:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b59a:	4b25      	ldr	r3, [pc, #148]	; (800b630 <SD_ioctl+0xac>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <SD_ioctl+0x28>
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e03c      	b.n	800b626 <SD_ioctl+0xa2>

  switch (cmd)
 800b5ac:	79bb      	ldrb	r3, [r7, #6]
 800b5ae:	2b03      	cmp	r3, #3
 800b5b0:	d834      	bhi.n	800b61c <SD_ioctl+0x98>
 800b5b2:	a201      	add	r2, pc, #4	; (adr r2, 800b5b8 <SD_ioctl+0x34>)
 800b5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b8:	0800b5c9 	.word	0x0800b5c9
 800b5bc:	0800b5d1 	.word	0x0800b5d1
 800b5c0:	0800b5e9 	.word	0x0800b5e9
 800b5c4:	0800b603 	.word	0x0800b603
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5ce:	e028      	b.n	800b622 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5d0:	f107 030c 	add.w	r3, r7, #12
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ff1d 	bl	800b414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5e6:	e01c      	b.n	800b622 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5e8:	f107 030c 	add.w	r3, r7, #12
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff ff11 	bl	800b414 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b600:	e00f      	b.n	800b622 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b602:	f107 030c 	add.w	r3, r7, #12
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff ff04 	bl	800b414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	0a5a      	lsrs	r2, r3, #9
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b61a:	e002      	b.n	800b622 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b61c:	2304      	movs	r3, #4
 800b61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b626:	4618      	mov	r0, r3
 800b628:	3730      	adds	r7, #48	; 0x30
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20000021 	.word	0x20000021

0800b634 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b640:	f44f 701d 	mov.w	r0, #628	; 0x274
 800b644:	f006 fc10 	bl	8011e68 <USBD_static_malloc>
 800b648:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d109      	bne.n	800b664 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	32b0      	adds	r2, #176	; 0xb0
 800b65a:	2100      	movs	r1, #0
 800b65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b660:	2302      	movs	r3, #2
 800b662:	e06e      	b.n	800b742 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	32b0      	adds	r2, #176	; 0xb0
 800b66e:	68f9      	ldr	r1, [r7, #12]
 800b670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	32b0      	adds	r2, #176	; 0xb0
 800b67e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7c1b      	ldrb	r3, [r3, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d12b      	bne.n	800b6e8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b690:	4b2e      	ldr	r3, [pc, #184]	; (800b74c <USBD_MSC_Init+0x118>)
 800b692:	7819      	ldrb	r1, [r3, #0]
 800b694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b698:	2202      	movs	r2, #2
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f006 faa1 	bl	8011be2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b6a0:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <USBD_MSC_Init+0x118>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 020f 	and.w	r2, r3, #15
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b6bc:	4b24      	ldr	r3, [pc, #144]	; (800b750 <USBD_MSC_Init+0x11c>)
 800b6be:	7819      	ldrb	r1, [r3, #0]
 800b6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f006 fa8b 	bl	8011be2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b6cc:	4b20      	ldr	r3, [pc, #128]	; (800b750 <USBD_MSC_Init+0x11c>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 020f 	and.w	r2, r3, #15
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	3324      	adds	r3, #36	; 0x24
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	e028      	b.n	800b73a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b6e8:	4b18      	ldr	r3, [pc, #96]	; (800b74c <USBD_MSC_Init+0x118>)
 800b6ea:	7819      	ldrb	r1, [r3, #0]
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f006 fa76 	bl	8011be2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b6f6:	4b15      	ldr	r3, [pc, #84]	; (800b74c <USBD_MSC_Init+0x118>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 020f 	and.w	r2, r3, #15
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b70e:	2201      	movs	r2, #1
 800b710:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b712:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <USBD_MSC_Init+0x11c>)
 800b714:	7819      	ldrb	r1, [r3, #0]
 800b716:	2340      	movs	r3, #64	; 0x40
 800b718:	2202      	movs	r2, #2
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f006 fa61 	bl	8011be2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <USBD_MSC_Init+0x11c>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	f003 020f 	and.w	r2, r3, #15
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	4613      	mov	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	3324      	adds	r3, #36	; 0x24
 800b736:	2201      	movs	r2, #1
 800b738:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa2c 	bl	800bb98 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	20000087 	.word	0x20000087
 800b750:	20000086 	.word	0x20000086

0800b754 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800b760:	4b26      	ldr	r3, [pc, #152]	; (800b7fc <USBD_MSC_DeInit+0xa8>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f006 fa61 	bl	8011c2e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800b76c:	4b23      	ldr	r3, [pc, #140]	; (800b7fc <USBD_MSC_DeInit+0xa8>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f003 020f 	and.w	r2, r3, #15
 800b774:	6879      	ldr	r1, [r7, #4]
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b784:	2200      	movs	r2, #0
 800b786:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800b788:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <USBD_MSC_DeInit+0xac>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f006 fa4d 	bl	8011c2e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800b794:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <USBD_MSC_DeInit+0xac>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 020f 	and.w	r2, r3, #15
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3324      	adds	r3, #36	; 0x24
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	32b0      	adds	r2, #176	; 0xb0
 800b7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d018      	beq.n	800b7f2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fa67 	bl	800bc94 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	32b0      	adds	r2, #176	; 0xb0
 800b7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f006 fb55 	bl	8011e84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	32b0      	adds	r2, #176	; 0xb0
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20000087 	.word	0x20000087
 800b800:	20000086 	.word	0x20000086

0800b804 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	32b0      	adds	r2, #176	; 0xb0
 800b818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e0e1      	b.n	800b9f4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d053      	beq.n	800b8e4 <USBD_MSC_Setup+0xe0>
 800b83c:	2b20      	cmp	r3, #32
 800b83e:	f040 80d1 	bne.w	800b9e4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2bfe      	cmp	r3, #254	; 0xfe
 800b848:	d002      	beq.n	800b850 <USBD_MSC_Setup+0x4c>
 800b84a:	2bff      	cmp	r3, #255	; 0xff
 800b84c:	d02a      	beq.n	800b8a4 <USBD_MSC_Setup+0xa0>
 800b84e:	e041      	b.n	800b8d4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	885b      	ldrh	r3, [r3, #2]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d11e      	bne.n	800b896 <USBD_MSC_Setup+0x92>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	88db      	ldrh	r3, [r3, #6]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d11a      	bne.n	800b896 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b866:	2b00      	cmp	r3, #0
 800b868:	da15      	bge.n	800b896 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	33b0      	adds	r3, #176	; 0xb0
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	4798      	blx	r3
 800b87e:	4603      	mov	r3, r0
 800b880:	461a      	mov	r2, r3
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2201      	movs	r2, #1
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f003 f8f9 	bl	800ea84 <USBD_CtlSendData>
 800b892:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b894:	e025      	b.n	800b8e2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f003 f882 	bl	800e9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b8a2:	e01e      	b.n	800b8e2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	885b      	ldrh	r3, [r3, #2]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10c      	bne.n	800b8c6 <USBD_MSC_Setup+0xc2>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d108      	bne.n	800b8c6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	db03      	blt.n	800b8c6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9b4 	bl	800bc2c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8c4:	e00d      	b.n	800b8e2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f003 f86a 	bl	800e9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b8d2:	e006      	b.n	800b8e2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f003 f863 	bl	800e9a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	75fb      	strb	r3, [r7, #23]
          break;
 800b8e0:	bf00      	nop
      }
      break;
 800b8e2:	e086      	b.n	800b9f2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	2b0b      	cmp	r3, #11
 800b8ea:	d872      	bhi.n	800b9d2 <USBD_MSC_Setup+0x1ce>
 800b8ec:	a201      	add	r2, pc, #4	; (adr r2, 800b8f4 <USBD_MSC_Setup+0xf0>)
 800b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f2:	bf00      	nop
 800b8f4:	0800b925 	.word	0x0800b925
 800b8f8:	0800b9a1 	.word	0x0800b9a1
 800b8fc:	0800b9d3 	.word	0x0800b9d3
 800b900:	0800b9d3 	.word	0x0800b9d3
 800b904:	0800b9d3 	.word	0x0800b9d3
 800b908:	0800b9d3 	.word	0x0800b9d3
 800b90c:	0800b9d3 	.word	0x0800b9d3
 800b910:	0800b9d3 	.word	0x0800b9d3
 800b914:	0800b9d3 	.word	0x0800b9d3
 800b918:	0800b9d3 	.word	0x0800b9d3
 800b91c:	0800b94f 	.word	0x0800b94f
 800b920:	0800b979 	.word	0x0800b979
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d107      	bne.n	800b940 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b930:	f107 030e 	add.w	r3, r7, #14
 800b934:	2202      	movs	r2, #2
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f003 f8a3 	bl	800ea84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b93e:	e050      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f003 f82d 	bl	800e9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	75fb      	strb	r3, [r7, #23]
          break;
 800b94c:	e049      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b03      	cmp	r3, #3
 800b958:	d107      	bne.n	800b96a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	3304      	adds	r3, #4
 800b95e:	2201      	movs	r2, #1
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f003 f88e 	bl	800ea84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b968:	e03b      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f003 f818 	bl	800e9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	75fb      	strb	r3, [r7, #23]
          break;
 800b976:	e034      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b03      	cmp	r3, #3
 800b982:	d106      	bne.n	800b992 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	885b      	ldrh	r3, [r3, #2]
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	461a      	mov	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b990:	e027      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f003 f804 	bl	800e9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	75fb      	strb	r3, [r7, #23]
          break;
 800b99e:	e020      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d119      	bne.n	800b9e0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	885b      	ldrh	r3, [r3, #2]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d115      	bne.n	800b9e0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	889b      	ldrh	r3, [r3, #4]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f006 f955 	bl	8011c6c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	889b      	ldrh	r3, [r3, #4]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fb2e 	bl	800c02c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b9d0:	e006      	b.n	800b9e0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f002 ffe4 	bl	800e9a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b9de:	e000      	b.n	800b9e2 <USBD_MSC_Setup+0x1de>
          break;
 800b9e0:	bf00      	nop
      }
      break;
 800b9e2:	e006      	b.n	800b9f2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f002 ffdb 	bl	800e9a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f959 	bl	800bcc4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f983 	bl	800bd38 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ba44:	2181      	movs	r1, #129	; 0x81
 800ba46:	4812      	ldr	r0, [pc, #72]	; (800ba90 <USBD_MSC_GetHSCfgDesc+0x54>)
 800ba48:	f002 f972 	bl	800dd30 <USBD_GetEpDesc>
 800ba4c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ba4e:	2101      	movs	r1, #1
 800ba50:	480f      	ldr	r0, [pc, #60]	; (800ba90 <USBD_MSC_GetHSCfgDesc+0x54>)
 800ba52:	f002 f96d 	bl	800dd30 <USBD_GetEpDesc>
 800ba56:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d006      	beq.n	800ba6c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	711a      	strb	r2, [r3, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f042 0202 	orr.w	r2, r2, #2
 800ba6a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d006      	beq.n	800ba80 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2200      	movs	r2, #0
 800ba76:	711a      	strb	r2, [r3, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f042 0202 	orr.w	r2, r2, #2
 800ba7e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ba86:	4b02      	ldr	r3, [pc, #8]	; (800ba90 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000005c 	.word	0x2000005c

0800ba94 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ba9c:	2181      	movs	r1, #129	; 0x81
 800ba9e:	4812      	ldr	r0, [pc, #72]	; (800bae8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800baa0:	f002 f946 	bl	800dd30 <USBD_GetEpDesc>
 800baa4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800baa6:	2101      	movs	r1, #1
 800baa8:	480f      	ldr	r0, [pc, #60]	; (800bae8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800baaa:	f002 f941 	bl	800dd30 <USBD_GetEpDesc>
 800baae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d006      	beq.n	800bac4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800babe:	711a      	strb	r2, [r3, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d006      	beq.n	800bad8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2200      	movs	r2, #0
 800bace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bad2:	711a      	strb	r2, [r3, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800bade:	4b02      	ldr	r3, [pc, #8]	; (800bae8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	2000005c 	.word	0x2000005c

0800baec <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800baf4:	2181      	movs	r1, #129	; 0x81
 800baf6:	4812      	ldr	r0, [pc, #72]	; (800bb40 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800baf8:	f002 f91a 	bl	800dd30 <USBD_GetEpDesc>
 800bafc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800bafe:	2101      	movs	r1, #1
 800bb00:	480f      	ldr	r0, [pc, #60]	; (800bb40 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800bb02:	f002 f915 	bl	800dd30 <USBD_GetEpDesc>
 800bb06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d006      	beq.n	800bb1c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb16:	711a      	strb	r2, [r3, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d006      	beq.n	800bb30 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb2a:	711a      	strb	r2, [r3, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2220      	movs	r2, #32
 800bb34:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800bb36:	4b02      	ldr	r3, [pc, #8]	; (800bb40 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	2000005c 	.word	0x2000005c

0800bb44 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	220a      	movs	r2, #10
 800bb50:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800bb52:	4b03      	ldr	r3, [pc, #12]	; (800bb60 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	2000007c 	.word	0x2000007c

0800bb64 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e009      	b.n	800bb8c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	33b0      	adds	r3, #176	; 0xb0
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	32b0      	adds	r2, #176	; 0xb0
 800bbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d032      	beq.n	800bc1c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	33b0      	adds	r3, #176	; 0xb0
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2000      	movs	r0, #0
 800bbee:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800bbf0:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <MSC_BOT_Init+0x8c>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f006 f838 	bl	8011c6c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <MSC_BOT_Init+0x90>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f006 f832 	bl	8011c6c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <MSC_BOT_Init+0x8c>)
 800bc0a:	7819      	ldrb	r1, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800bc12:	231f      	movs	r3, #31
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f006 f8f2 	bl	8011dfe <USBD_LL_PrepareReceive>
 800bc1a:	e000      	b.n	800bc1e <MSC_BOT_Init+0x86>
    return;
 800bc1c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000087 	.word	0x20000087
 800bc28:	20000086 	.word	0x20000086

0800bc2c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	32b0      	adds	r2, #176	; 0xb0
 800bc3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc42:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d01b      	beq.n	800bc82 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2201      	movs	r2, #1
 800bc54:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <MSC_BOT_Reset+0x60>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f006 f843 	bl	8011ce8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <MSC_BOT_Reset+0x64>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f006 f83d 	bl	8011ce8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800bc6e:	4b08      	ldr	r3, [pc, #32]	; (800bc90 <MSC_BOT_Reset+0x64>)
 800bc70:	7819      	ldrb	r1, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800bc78:	231f      	movs	r3, #31
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f006 f8bf 	bl	8011dfe <USBD_LL_PrepareReceive>
 800bc80:	e000      	b.n	800bc84 <MSC_BOT_Reset+0x58>
    return;
 800bc82:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000086 	.word	0x20000086
 800bc90:	20000087 	.word	0x20000087

0800bc94 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32b0      	adds	r2, #176	; 0xb0
 800bca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcaa:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	721a      	strb	r2, [r3, #8]
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	; 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d020      	beq.n	800bd28 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	7a1b      	ldrb	r3, [r3, #8]
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d005      	beq.n	800bcfa <MSC_BOT_DataIn+0x36>
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	db1c      	blt.n	800bd2c <MSC_BOT_DataIn+0x68>
 800bcf2:	3b03      	subs	r3, #3
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d819      	bhi.n	800bd2c <MSC_BOT_DataIn+0x68>
 800bcf8:	e011      	b.n	800bd1e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bd06:	461a      	mov	r2, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9c9 	bl	800c0a0 <SCSI_ProcessCmd>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da0d      	bge.n	800bd30 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bd14:	2101      	movs	r1, #1
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f90c 	bl	800bf34 <MSC_BOT_SendCSW>
      }
      break;
 800bd1c:	e008      	b.n	800bd30 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bd1e:	2100      	movs	r1, #0
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f907 	bl	800bf34 <MSC_BOT_SendCSW>
      break;
 800bd26:	e004      	b.n	800bd32 <MSC_BOT_DataIn+0x6e>
    return;
 800bd28:	bf00      	nop
 800bd2a:	e002      	b.n	800bd32 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800bd2c:	bf00      	nop
 800bd2e:	e000      	b.n	800bd32 <MSC_BOT_DataIn+0x6e>
      break;
 800bd30:	bf00      	nop
  }
}
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	32b0      	adds	r2, #176	; 0xb0
 800bd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd52:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01c      	beq.n	800bd94 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	7a1b      	ldrb	r3, [r3, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <MSC_BOT_DataOut+0x30>
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d004      	beq.n	800bd70 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800bd66:	e018      	b.n	800bd9a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f819 	bl	800bda0 <MSC_BOT_CBW_Decode>
      break;
 800bd6e:	e014      	b.n	800bd9a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f98e 	bl	800c0a0 <SCSI_ProcessCmd>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	da06      	bge.n	800bd98 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f8d1 	bl	800bf34 <MSC_BOT_SendCSW>
      break;
 800bd92:	e001      	b.n	800bd98 <MSC_BOT_DataOut+0x60>
    return;
 800bd94:	bf00      	nop
 800bd96:	e000      	b.n	800bd9a <MSC_BOT_DataOut+0x62>
      break;
 800bd98:	bf00      	nop
  }
}
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32b0      	adds	r2, #176	; 0xb0
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d079      	beq.n	800beb2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800bdd6:	4b3a      	ldr	r3, [pc, #232]	; (800bec0 <MSC_BOT_CBW_Decode+0x120>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f006 f82f 	bl	8011e40 <USBD_LL_GetRxDataSize>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b1f      	cmp	r3, #31
 800bde6:	d114      	bne.n	800be12 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800bdee:	4a35      	ldr	r2, [pc, #212]	; (800bec4 <MSC_BOT_CBW_Decode+0x124>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d10e      	bne.n	800be12 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d809      	bhi.n	800be12 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800be0e:	2b10      	cmp	r3, #16
 800be10:	d90e      	bls.n	800be30 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800be18:	2320      	movs	r3, #32
 800be1a:	2205      	movs	r2, #5
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fe28 	bl	800ca72 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2202      	movs	r2, #2
 800be26:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f8bd 	bl	800bfa8 <MSC_BOT_Abort>
 800be2e:	e043      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800be3c:	461a      	mov	r2, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f92e 	bl	800c0a0 <SCSI_ProcessCmd>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	da0c      	bge.n	800be64 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	7a1b      	ldrb	r3, [r3, #8]
 800be4e:	2b05      	cmp	r3, #5
 800be50:	d104      	bne.n	800be5c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800be52:	2101      	movs	r1, #1
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f86d 	bl	800bf34 <MSC_BOT_SendCSW>
 800be5a:	e02d      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f8a3 	bl	800bfa8 <MSC_BOT_Abort>
 800be62:	e029      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	7a1b      	ldrb	r3, [r3, #8]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d024      	beq.n	800beb6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800be70:	2b01      	cmp	r3, #1
 800be72:	d020      	beq.n	800beb6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d01c      	beq.n	800beb6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f103 0110 	add.w	r1, r3, #16
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	461a      	mov	r2, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f819 	bl	800bec8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800be96:	e00f      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bea0:	2100      	movs	r1, #0
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f846 	bl	800bf34 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800bea8:	e006      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f87c 	bl	800bfa8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800beb0:	e002      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
    return;
 800beb2:	bf00      	nop
 800beb4:	e000      	b.n	800beb8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800beb6:	bf00      	nop
    }
  }
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000087 	.word	0x20000087
 800bec4:	43425355 	.word	0x43425355

0800bec8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	32b0      	adds	r2, #176	; 0xb0
 800bede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01e      	beq.n	800bf28 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	4293      	cmp	r3, r2
 800bef4:	bf28      	it	cs
 800bef6:	4613      	movcs	r3, r2
 800bef8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	1ad2      	subs	r2, r2, r3
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2204      	movs	r2, #4
 800bf16:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <MSC_BOT_SendData+0x68>)
 800bf1a:	7819      	ldrb	r1, [r3, #0]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f005 ff4b 	bl	8011dbc <USBD_LL_Transmit>
 800bf26:	e000      	b.n	800bf2a <MSC_BOT_SendData+0x62>
    return;
 800bf28:	bf00      	nop
}
 800bf2a:	3718      	adds	r7, #24
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	20000086 	.word	0x20000086

0800bf34 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32b0      	adds	r2, #176	; 0xb0
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d01d      	beq.n	800bf92 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4a10      	ldr	r2, [pc, #64]	; (800bf9c <MSC_BOT_SendCSW+0x68>)
 800bf5a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800bf6c:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <MSC_BOT_SendCSW+0x6c>)
 800bf6e:	7819      	ldrb	r1, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800bf76:	230d      	movs	r3, #13
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f005 ff1f 	bl	8011dbc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <MSC_BOT_SendCSW+0x70>)
 800bf80:	7819      	ldrb	r1, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800bf88:	231f      	movs	r3, #31
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f005 ff37 	bl	8011dfe <USBD_LL_PrepareReceive>
 800bf90:	e000      	b.n	800bf94 <MSC_BOT_SendCSW+0x60>
    return;
 800bf92:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	53425355 	.word	0x53425355
 800bfa0:	20000086 	.word	0x20000086
 800bfa4:	20000087 	.word	0x20000087

0800bfa8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	32b0      	adds	r2, #176	; 0xb0
 800bfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfbe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d02a      	beq.n	800c01c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10e      	bne.n	800bfee <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d105      	bne.n	800bfee <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800bfe2:	4b10      	ldr	r3, [pc, #64]	; (800c024 <MSC_BOT_Abort+0x7c>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f005 fe5e 	bl	8011caa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800bfee:	4b0e      	ldr	r3, [pc, #56]	; (800c028 <MSC_BOT_Abort+0x80>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f005 fe58 	bl	8011caa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	7a5b      	ldrb	r3, [r3, #9]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d10d      	bne.n	800c01e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800c002:	4b09      	ldr	r3, [pc, #36]	; (800c028 <MSC_BOT_Abort+0x80>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f005 fe4e 	bl	8011caa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800c00e:	4b05      	ldr	r3, [pc, #20]	; (800c024 <MSC_BOT_Abort+0x7c>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f005 fe48 	bl	8011caa <USBD_LL_StallEP>
 800c01a:	e000      	b.n	800c01e <MSC_BOT_Abort+0x76>
    return;
 800c01c:	bf00      	nop
  }
}
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20000087 	.word	0x20000087
 800c028:	20000086 	.word	0x20000086

0800c02c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32b0      	adds	r2, #176	; 0xb0
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d01d      	beq.n	800c08a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	7a5b      	ldrb	r3, [r3, #9]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d10c      	bne.n	800c070 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800c056:	4b10      	ldr	r3, [pc, #64]	; (800c098 <MSC_BOT_CplClrFeature+0x6c>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f005 fe24 	bl	8011caa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800c062:	4b0e      	ldr	r3, [pc, #56]	; (800c09c <MSC_BOT_CplClrFeature+0x70>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f005 fe1e 	bl	8011caa <USBD_LL_StallEP>
 800c06e:	e00f      	b.n	800c090 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800c070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da0a      	bge.n	800c08e <MSC_BOT_CplClrFeature+0x62>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	7a5b      	ldrb	r3, [r3, #9]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d006      	beq.n	800c08e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800c080:	2101      	movs	r1, #1
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7ff ff56 	bl	800bf34 <MSC_BOT_SendCSW>
 800c088:	e002      	b.n	800c090 <MSC_BOT_CplClrFeature+0x64>
    return;
 800c08a:	bf00      	nop
 800c08c:	e000      	b.n	800c090 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800c08e:	bf00      	nop
  }
}
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20000086 	.word	0x20000086
 800c09c:	20000087 	.word	0x20000087

0800c0a0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	32b0      	adds	r2, #176	; 0xb0
 800c0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0bc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800c0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c8:	e168      	b.n	800c39c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2baa      	cmp	r3, #170	; 0xaa
 800c0d0:	f000 8144 	beq.w	800c35c <SCSI_ProcessCmd+0x2bc>
 800c0d4:	2baa      	cmp	r3, #170	; 0xaa
 800c0d6:	f300 8153 	bgt.w	800c380 <SCSI_ProcessCmd+0x2e0>
 800c0da:	2ba8      	cmp	r3, #168	; 0xa8
 800c0dc:	f000 812c 	beq.w	800c338 <SCSI_ProcessCmd+0x298>
 800c0e0:	2ba8      	cmp	r3, #168	; 0xa8
 800c0e2:	f300 814d 	bgt.w	800c380 <SCSI_ProcessCmd+0x2e0>
 800c0e6:	2b5a      	cmp	r3, #90	; 0x5a
 800c0e8:	f300 80c0 	bgt.w	800c26c <SCSI_ProcessCmd+0x1cc>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f2c0 8147 	blt.w	800c380 <SCSI_ProcessCmd+0x2e0>
 800c0f2:	2b5a      	cmp	r3, #90	; 0x5a
 800c0f4:	f200 8144 	bhi.w	800c380 <SCSI_ProcessCmd+0x2e0>
 800c0f8:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <SCSI_ProcessCmd+0x60>)
 800c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fe:	bf00      	nop
 800c100:	0800c273 	.word	0x0800c273
 800c104:	0800c381 	.word	0x0800c381
 800c108:	0800c381 	.word	0x0800c381
 800c10c:	0800c285 	.word	0x0800c285
 800c110:	0800c381 	.word	0x0800c381
 800c114:	0800c381 	.word	0x0800c381
 800c118:	0800c381 	.word	0x0800c381
 800c11c:	0800c381 	.word	0x0800c381
 800c120:	0800c381 	.word	0x0800c381
 800c124:	0800c381 	.word	0x0800c381
 800c128:	0800c381 	.word	0x0800c381
 800c12c:	0800c381 	.word	0x0800c381
 800c130:	0800c381 	.word	0x0800c381
 800c134:	0800c381 	.word	0x0800c381
 800c138:	0800c381 	.word	0x0800c381
 800c13c:	0800c381 	.word	0x0800c381
 800c140:	0800c381 	.word	0x0800c381
 800c144:	0800c381 	.word	0x0800c381
 800c148:	0800c297 	.word	0x0800c297
 800c14c:	0800c381 	.word	0x0800c381
 800c150:	0800c381 	.word	0x0800c381
 800c154:	0800c381 	.word	0x0800c381
 800c158:	0800c381 	.word	0x0800c381
 800c15c:	0800c381 	.word	0x0800c381
 800c160:	0800c381 	.word	0x0800c381
 800c164:	0800c381 	.word	0x0800c381
 800c168:	0800c2cd 	.word	0x0800c2cd
 800c16c:	0800c2a9 	.word	0x0800c2a9
 800c170:	0800c381 	.word	0x0800c381
 800c174:	0800c381 	.word	0x0800c381
 800c178:	0800c2bb 	.word	0x0800c2bb
 800c17c:	0800c381 	.word	0x0800c381
 800c180:	0800c381 	.word	0x0800c381
 800c184:	0800c381 	.word	0x0800c381
 800c188:	0800c381 	.word	0x0800c381
 800c18c:	0800c2f1 	.word	0x0800c2f1
 800c190:	0800c381 	.word	0x0800c381
 800c194:	0800c303 	.word	0x0800c303
 800c198:	0800c381 	.word	0x0800c381
 800c19c:	0800c381 	.word	0x0800c381
 800c1a0:	0800c327 	.word	0x0800c327
 800c1a4:	0800c381 	.word	0x0800c381
 800c1a8:	0800c34b 	.word	0x0800c34b
 800c1ac:	0800c381 	.word	0x0800c381
 800c1b0:	0800c381 	.word	0x0800c381
 800c1b4:	0800c381 	.word	0x0800c381
 800c1b8:	0800c381 	.word	0x0800c381
 800c1bc:	0800c36f 	.word	0x0800c36f
 800c1c0:	0800c381 	.word	0x0800c381
 800c1c4:	0800c381 	.word	0x0800c381
 800c1c8:	0800c381 	.word	0x0800c381
 800c1cc:	0800c381 	.word	0x0800c381
 800c1d0:	0800c381 	.word	0x0800c381
 800c1d4:	0800c381 	.word	0x0800c381
 800c1d8:	0800c381 	.word	0x0800c381
 800c1dc:	0800c381 	.word	0x0800c381
 800c1e0:	0800c381 	.word	0x0800c381
 800c1e4:	0800c381 	.word	0x0800c381
 800c1e8:	0800c381 	.word	0x0800c381
 800c1ec:	0800c381 	.word	0x0800c381
 800c1f0:	0800c381 	.word	0x0800c381
 800c1f4:	0800c381 	.word	0x0800c381
 800c1f8:	0800c381 	.word	0x0800c381
 800c1fc:	0800c381 	.word	0x0800c381
 800c200:	0800c381 	.word	0x0800c381
 800c204:	0800c381 	.word	0x0800c381
 800c208:	0800c381 	.word	0x0800c381
 800c20c:	0800c381 	.word	0x0800c381
 800c210:	0800c381 	.word	0x0800c381
 800c214:	0800c381 	.word	0x0800c381
 800c218:	0800c381 	.word	0x0800c381
 800c21c:	0800c381 	.word	0x0800c381
 800c220:	0800c381 	.word	0x0800c381
 800c224:	0800c381 	.word	0x0800c381
 800c228:	0800c381 	.word	0x0800c381
 800c22c:	0800c381 	.word	0x0800c381
 800c230:	0800c381 	.word	0x0800c381
 800c234:	0800c381 	.word	0x0800c381
 800c238:	0800c381 	.word	0x0800c381
 800c23c:	0800c381 	.word	0x0800c381
 800c240:	0800c381 	.word	0x0800c381
 800c244:	0800c381 	.word	0x0800c381
 800c248:	0800c381 	.word	0x0800c381
 800c24c:	0800c381 	.word	0x0800c381
 800c250:	0800c381 	.word	0x0800c381
 800c254:	0800c381 	.word	0x0800c381
 800c258:	0800c381 	.word	0x0800c381
 800c25c:	0800c381 	.word	0x0800c381
 800c260:	0800c381 	.word	0x0800c381
 800c264:	0800c381 	.word	0x0800c381
 800c268:	0800c2df 	.word	0x0800c2df
 800c26c:	2b9e      	cmp	r3, #158	; 0x9e
 800c26e:	d051      	beq.n	800c314 <SCSI_ProcessCmd+0x274>
 800c270:	e086      	b.n	800c380 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800c272:	7afb      	ldrb	r3, [r7, #11]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	4619      	mov	r1, r3
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f000 f893 	bl	800c3a4 <SCSI_TestUnitReady>
 800c27e:	4603      	mov	r3, r0
 800c280:	75fb      	strb	r3, [r7, #23]
      break;
 800c282:	e089      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800c284:	7afb      	ldrb	r3, [r7, #11]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4619      	mov	r1, r3
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f000 fb6e 	bl	800c96c <SCSI_RequestSense>
 800c290:	4603      	mov	r3, r0
 800c292:	75fb      	strb	r3, [r7, #23]
      break;
 800c294:	e080      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800c296:	7afb      	ldrb	r3, [r7, #11]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	4619      	mov	r1, r3
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f000 f8db 	bl	800c458 <SCSI_Inquiry>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a6:	e077      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800c2a8:	7afb      	ldrb	r3, [r7, #11]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fc2a 	bl	800cb08 <SCSI_StartStopUnit>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2b8:	e06e      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800c2ba:	7afb      	ldrb	r3, [r7, #11]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 fc76 	bl	800cbb2 <SCSI_AllowPreventRemovable>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ca:	e065      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f000 faea 	bl	800c8ac <SCSI_ModeSense6>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
      break;
 800c2dc:	e05c      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 fb11 	bl	800c90c <SCSI_ModeSense10>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ee:	e053      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800c2f0:	7afb      	ldrb	r3, [r7, #11]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 fa5d 	bl	800c7b6 <SCSI_ReadFormatCapacity>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c300:	e04a      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	4619      	mov	r1, r3
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 f923 	bl	800c554 <SCSI_ReadCapacity10>
 800c30e:	4603      	mov	r3, r0
 800c310:	75fb      	strb	r3, [r7, #23]
      break;
 800c312:	e041      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	4619      	mov	r1, r3
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 f998 	bl	800c650 <SCSI_ReadCapacity16>
 800c320:	4603      	mov	r3, r0
 800c322:	75fb      	strb	r3, [r7, #23]
      break;
 800c324:	e038      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800c326:	7afb      	ldrb	r3, [r7, #11]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	4619      	mov	r1, r3
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 fc6d 	bl	800cc0c <SCSI_Read10>
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]
      break;
 800c336:	e02f      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4619      	mov	r1, r3
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fd0e 	bl	800cd60 <SCSI_Read12>
 800c344:	4603      	mov	r3, r0
 800c346:	75fb      	strb	r3, [r7, #23]
      break;
 800c348:	e026      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800c34a:	7afb      	ldrb	r3, [r7, #11]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	4619      	mov	r1, r3
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 fdb9 	bl	800cec8 <SCSI_Write10>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]
      break;
 800c35a:	e01d      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4619      	mov	r1, r3
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f000 fe86 	bl	800d074 <SCSI_Write12>
 800c368:	4603      	mov	r3, r0
 800c36a:	75fb      	strb	r3, [r7, #23]
      break;
 800c36c:	e014      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800c36e:	7afb      	ldrb	r3, [r7, #11]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	4619      	mov	r1, r3
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 ff63 	bl	800d240 <SCSI_Verify10>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75fb      	strb	r3, [r7, #23]
      break;
 800c37e:	e00b      	b.n	800c398 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800c380:	7af9      	ldrb	r1, [r7, #11]
 800c382:	2320      	movs	r3, #32
 800c384:	2205      	movs	r2, #5
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fb73 	bl	800ca72 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	2202      	movs	r2, #2
 800c390:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800c392:	23ff      	movs	r3, #255	; 0xff
 800c394:	75fb      	strb	r3, [r7, #23]
      break;
 800c396:	bf00      	nop
  }

  return ret;
 800c398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	32b0      	adds	r2, #176	; 0xb0
 800c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3cc:	e03f      	b.n	800c44e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00a      	beq.n	800c3ee <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c3de:	2320      	movs	r3, #32
 800c3e0:	2205      	movs	r2, #5
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 fb45 	bl	800ca72 <SCSI_SenseCode>

    return -1;
 800c3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ec:	e02f      	b.n	800c44e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d10b      	bne.n	800c410 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c3f8:	7af9      	ldrb	r1, [r7, #11]
 800c3fa:	233a      	movs	r3, #58	; 0x3a
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 fb37 	bl	800ca72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2205      	movs	r2, #5
 800c408:	721a      	strb	r2, [r3, #8]
    return -1;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295
 800c40e:	e01e      	b.n	800c44e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	33b0      	adds	r3, #176	; 0xb0
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	7afa      	ldrb	r2, [r7, #11]
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00b      	beq.n	800c446 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c42e:	7af9      	ldrb	r1, [r7, #11]
 800c430:	233a      	movs	r3, #58	; 0x3a
 800c432:	2202      	movs	r2, #2
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f000 fb1c 	bl	800ca72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2205      	movs	r2, #5
 800c43e:	721a      	strb	r2, [r3, #8]

    return -1;
 800c440:	f04f 33ff 	mov.w	r3, #4294967295
 800c444:	e003      	b.n	800c44e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2200      	movs	r2, #0
 800c44a:	60da      	str	r2, [r3, #12]

  return 0;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	460b      	mov	r3, r1
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	32b0      	adds	r2, #176	; 0xb0
 800c470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c474:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800c47c:	f04f 33ff 	mov.w	r3, #4294967295
 800c480:	e05f      	b.n	800c542 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c492:	2320      	movs	r3, #32
 800c494:	2205      	movs	r2, #5
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f000 faeb 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800c49c:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a0:	e04f      	b.n	800c542 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d020      	beq.n	800c4f2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d105      	bne.n	800c4c6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800c4ba:	2206      	movs	r2, #6
 800c4bc:	4923      	ldr	r1, [pc, #140]	; (800c54c <SCSI_Inquiry+0xf4>)
 800c4be:	69b8      	ldr	r0, [r7, #24]
 800c4c0:	f001 f844 	bl	800d54c <SCSI_UpdateBotData>
 800c4c4:	e03c      	b.n	800c540 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	3302      	adds	r3, #2
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b80      	cmp	r3, #128	; 0x80
 800c4ce:	d105      	bne.n	800c4dc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	491f      	ldr	r1, [pc, #124]	; (800c550 <SCSI_Inquiry+0xf8>)
 800c4d4:	69b8      	ldr	r0, [r7, #24]
 800c4d6:	f001 f839 	bl	800d54c <SCSI_UpdateBotData>
 800c4da:	e031      	b.n	800c540 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c4e2:	2324      	movs	r3, #36	; 0x24
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fac3 	bl	800ca72 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f0:	e027      	b.n	800c542 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	33b0      	adds	r3, #176	; 0xb0
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	69d9      	ldr	r1, [r3, #28]
 800c504:	7afa      	ldrb	r2, [r7, #11]
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	3304      	adds	r3, #4
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	b29b      	uxth	r3, r3
 800c51a:	3305      	adds	r3, #5
 800c51c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3304      	adds	r3, #4
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	b29b      	uxth	r3, r3
 800c526:	8bfa      	ldrh	r2, [r7, #30]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d303      	bcc.n	800c534 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3304      	adds	r3, #4
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800c534:	8bfb      	ldrh	r3, [r7, #30]
 800c536:	461a      	mov	r2, r3
 800c538:	6979      	ldr	r1, [r7, #20]
 800c53a:	69b8      	ldr	r0, [r7, #24]
 800c53c:	f001 f806 	bl	800d54c <SCSI_UpdateBotData>
  }

  return 0;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3720      	adds	r7, #32
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000088 	.word	0x20000088
 800c550:	20000090 	.word	0x20000090

0800c554 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	460b      	mov	r3, r1
 800c55e:	607a      	str	r2, [r7, #4]
 800c560:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	32b0      	adds	r2, #176	; 0xb0
 800c56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c570:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800c578:	f04f 33ff 	mov.w	r3, #4294967295
 800c57c:	e064      	b.n	800c648 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	33b0      	adds	r3, #176	; 0xb0
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c59c:	7af8      	ldrb	r0, [r7, #11]
 800c59e:	4798      	blx	r3
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c5a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d104      	bne.n	800c5b6 <SCSI_ReadCapacity10+0x62>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d108      	bne.n	800c5c8 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c5b6:	7af9      	ldrb	r1, [r7, #11]
 800c5b8:	233a      	movs	r3, #58	; 0x3a
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 fa58 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800c5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c6:	e03f      	b.n	800c648 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	0e1b      	lsrs	r3, r3, #24
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	0c1b      	lsrs	r3, r3, #16
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	0a1b      	lsrs	r3, r3, #8
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	3b01      	subs	r3, #1
 800c602:	b2da      	uxtb	r2, r3
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c60e:	161b      	asrs	r3, r3, #24
 800c610:	b2da      	uxtb	r2, r3
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c61c:	141b      	asrs	r3, r3, #16
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2208      	movs	r2, #8
 800c644:	60da      	str	r2, [r3, #12]

  return 0;
 800c646:	2300      	movs	r3, #0

}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	460b      	mov	r3, r1
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	32b0      	adds	r2, #176	; 0xb0
 800c668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800c674:	f04f 33ff 	mov.w	r3, #4294967295
 800c678:	e099      	b.n	800c7ae <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	33b0      	adds	r3, #176	; 0xb0
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4413      	add	r3, r2
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c698:	7af8      	ldrb	r0, [r7, #11]
 800c69a:	4798      	blx	r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c6a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d104      	bne.n	800c6b2 <SCSI_ReadCapacity16+0x62>
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d108      	bne.n	800c6c4 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c6b2:	7af9      	ldrb	r1, [r7, #11]
 800c6b4:	233a      	movs	r3, #58	; 0x3a
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 f9da 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800c6be:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c2:	e074      	b.n	800c7ae <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	330a      	adds	r3, #10
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	330b      	adds	r3, #11
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c6d4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	330c      	adds	r3, #12
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c6de:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	320d      	adds	r2, #13
 800c6e4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c6e6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	77fb      	strb	r3, [r7, #31]
 800c6f0:	e007      	b.n	800c702 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800c6f2:	7ffb      	ldrb	r3, [r7, #31]
 800c6f4:	69ba      	ldr	r2, [r7, #24]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c6fc:	7ffb      	ldrb	r3, [r7, #31]
 800c6fe:	3301      	adds	r3, #1
 800c700:	77fb      	strb	r3, [r7, #31]
 800c702:	7ffa      	ldrb	r2, [r7, #31]
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d3f2      	bcc.n	800c6f2 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c712:	3b01      	subs	r3, #1
 800c714:	0e1b      	lsrs	r3, r3, #24
 800c716:	b2da      	uxtb	r2, r3
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c722:	3b01      	subs	r3, #1
 800c724:	0c1b      	lsrs	r3, r3, #16
 800c726:	b2da      	uxtb	r2, r3
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c732:	3b01      	subs	r3, #1
 800c734:	0a1b      	lsrs	r3, r3, #8
 800c736:	b2da      	uxtb	r2, r3
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c742:	b2db      	uxtb	r3, r3
 800c744:	3b01      	subs	r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c752:	161b      	asrs	r3, r3, #24
 800c754:	b2da      	uxtb	r2, r3
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c760:	141b      	asrs	r3, r3, #16
 800c762:	b2da      	uxtb	r2, r3
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	b29b      	uxth	r3, r3
 800c772:	b2da      	uxtb	r2, r3
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	330a      	adds	r3, #10
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	330b      	adds	r3, #11
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c794:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	330c      	adds	r3, #12
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c79e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	320d      	adds	r2, #13
 800c7a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c7a6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	60da      	str	r2, [r3, #12]

  return 0;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3720      	adds	r7, #32
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b088      	sub	sp, #32
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	460b      	mov	r3, r1
 800c7c0:	607a      	str	r2, [r7, #4]
 800c7c2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	32b0      	adds	r2, #176	; 0xb0
 800c7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	e061      	b.n	800c8a4 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	33b0      	adds	r3, #176	; 0xb0
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f107 0214 	add.w	r2, r7, #20
 800c7f6:	f107 0110 	add.w	r1, r7, #16
 800c7fa:	7af8      	ldrb	r0, [r7, #11]
 800c7fc:	4798      	blx	r3
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d104      	bne.n	800c814 <SCSI_ReadFormatCapacity+0x5e>
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c810:	2b02      	cmp	r3, #2
 800c812:	d108      	bne.n	800c826 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c814:	7af9      	ldrb	r1, [r7, #11]
 800c816:	233a      	movs	r3, #58	; 0x3a
 800c818:	2202      	movs	r2, #2
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f929 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	e03e      	b.n	800c8a4 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800c826:	2300      	movs	r3, #0
 800c828:	83fb      	strh	r3, [r7, #30]
 800c82a:	e007      	b.n	800c83c <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800c82c:	8bfb      	ldrh	r3, [r7, #30]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	4413      	add	r3, r2
 800c832:	2200      	movs	r2, #0
 800c834:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c836:	8bfb      	ldrh	r3, [r7, #30]
 800c838:	3301      	adds	r3, #1
 800c83a:	83fb      	strh	r3, [r7, #30]
 800c83c:	8bfb      	ldrh	r3, [r7, #30]
 800c83e:	2b0b      	cmp	r3, #11
 800c840:	d9f4      	bls.n	800c82c <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	2208      	movs	r2, #8
 800c846:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	0e1b      	lsrs	r3, r3, #24
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	3b01      	subs	r3, #1
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	3b01      	subs	r3, #1
 800c864:	0a1b      	lsrs	r3, r3, #8
 800c866:	b2da      	uxtb	r2, r3
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	3b01      	subs	r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	2202      	movs	r2, #2
 800c87c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c87e:	8abb      	ldrh	r3, [r7, #20]
 800c880:	141b      	asrs	r3, r3, #16
 800c882:	b2da      	uxtb	r2, r3
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c888:	8abb      	ldrh	r3, [r7, #20]
 800c88a:	0a1b      	lsrs	r3, r3, #8
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c894:	8abb      	ldrh	r3, [r7, #20]
 800c896:	b2da      	uxtb	r2, r3
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	220c      	movs	r2, #12
 800c8a0:	60da      	str	r2, [r3, #12]

  return 0;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3720      	adds	r7, #32
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	32b0      	adds	r2, #176	; 0xb0
 800c8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c8ca:	2317      	movs	r3, #23
 800c8cc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d8:	e011      	b.n	800c8fe <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	8afa      	ldrh	r2, [r7, #22]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d303      	bcc.n	800c8f0 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c8f0:	8afb      	ldrh	r3, [r7, #22]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4904      	ldr	r1, [pc, #16]	; (800c908 <SCSI_ModeSense6+0x5c>)
 800c8f6:	6938      	ldr	r0, [r7, #16]
 800c8f8:	f000 fe28 	bl	800d54c <SCSI_UpdateBotData>

  return 0;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20000098 	.word	0x20000098

0800c90c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	460b      	mov	r3, r1
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	32b0      	adds	r2, #176	; 0xb0
 800c924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c928:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c92a:	231b      	movs	r3, #27
 800c92c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c934:	f04f 33ff 	mov.w	r3, #4294967295
 800c938:	e011      	b.n	800c95e <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3308      	adds	r3, #8
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	b29b      	uxth	r3, r3
 800c942:	8afa      	ldrh	r2, [r7, #22]
 800c944:	429a      	cmp	r2, r3
 800c946:	d303      	bcc.n	800c950 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3308      	adds	r3, #8
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c950:	8afb      	ldrh	r3, [r7, #22]
 800c952:	461a      	mov	r2, r3
 800c954:	4904      	ldr	r1, [pc, #16]	; (800c968 <SCSI_ModeSense10+0x5c>)
 800c956:	6938      	ldr	r0, [r7, #16]
 800c958:	f000 fdf8 	bl	800d54c <SCSI_UpdateBotData>

  return 0;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	200000b0 	.word	0x200000b0

0800c96c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	460b      	mov	r3, r1
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	32b0      	adds	r2, #176	; 0xb0
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c990:	f04f 33ff 	mov.w	r3, #4294967295
 800c994:	e069      	b.n	800ca6a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c9a6:	2320      	movs	r3, #32
 800c9a8:	2205      	movs	r2, #5
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 f861 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800c9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b4:	e059      	b.n	800ca6a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	75fb      	strb	r3, [r7, #23]
 800c9ba:	e007      	b.n	800c9cc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c9bc:	7dfb      	ldrb	r3, [r7, #23]
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	75fb      	strb	r3, [r7, #23]
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	2b11      	cmp	r3, #17
 800c9d0:	d9f4      	bls.n	800c9bc <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	2270      	movs	r2, #112	; 0x70
 800c9d6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	220c      	movs	r2, #12
 800c9dc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d02e      	beq.n	800ca4c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	3248      	adds	r2, #72	; 0x48
 800c9fa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	3348      	adds	r3, #72	; 0x48
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	4413      	add	r3, r2
 800ca10:	791a      	ldrb	r2, [r3, #4]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	3348      	adds	r3, #72	; 0x48
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	4413      	add	r3, r2
 800ca24:	795a      	ldrb	r2, [r3, #5]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ca30:	3301      	adds	r3, #1
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ca40:	2b04      	cmp	r3, #4
 800ca42:	d103      	bne.n	800ca4c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2212      	movs	r2, #18
 800ca50:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3304      	adds	r3, #4
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b12      	cmp	r3, #18
 800ca5a:	d805      	bhi.n	800ca68 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3304      	adds	r3, #4
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b085      	sub	sp, #20
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	4608      	mov	r0, r1
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4603      	mov	r3, r0
 800ca82:	70fb      	strb	r3, [r7, #3]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70bb      	strb	r3, [r7, #2]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	32b0      	adds	r2, #176	; 0xb0
 800ca96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d02c      	beq.n	800cafc <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800caa8:	461a      	mov	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3248      	adds	r2, #72	; 0x48
 800caae:	78b9      	ldrb	r1, [r7, #2]
 800cab0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	3348      	adds	r3, #72	; 0x48
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	787a      	ldrb	r2, [r7, #1]
 800cac4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	3348      	adds	r3, #72	; 0x48
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4413      	add	r3, r2
 800cad4:	2200      	movs	r2, #0
 800cad6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800cade:	3301      	adds	r3, #1
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800caee:	2b04      	cmp	r3, #4
 800caf0:	d105      	bne.n	800cafe <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800cafa:	e000      	b.n	800cafe <SCSI_SenseCode+0x8c>
    return;
 800cafc:	bf00      	nop
  }
}
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	460b      	mov	r3, r1
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	32b0      	adds	r2, #176	; 0xb0
 800cb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb24:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb30:	e03b      	b.n	800cbaa <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d10f      	bne.n	800cb5c <SCSI_StartStopUnit+0x54>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	f003 0303 	and.w	r3, r3, #3
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d108      	bne.n	800cb5c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800cb4a:	7af9      	ldrb	r1, [r7, #11]
 800cb4c:	2324      	movs	r3, #36	; 0x24
 800cb4e:	2205      	movs	r2, #5
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff ff8e 	bl	800ca72 <SCSI_SenseCode>

    return -1;
 800cb56:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5a:	e026      	b.n	800cbaa <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 0303 	and.w	r3, r3, #3
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d104      	bne.n	800cb74 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800cb72:	e016      	b.n	800cba2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3304      	adds	r3, #4
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d104      	bne.n	800cb8c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2202      	movs	r2, #2
 800cb86:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800cb8a:	e00a      	b.n	800cba2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3304      	adds	r3, #4
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d103      	bne.n	800cba2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2200      	movs	r2, #0
 800cba6:	60da      	str	r2, [r3, #12]

  return 0;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b087      	sub	sp, #28
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	32b0      	adds	r2, #176	; 0xb0
 800cbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbce:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbda:	e011      	b.n	800cc00 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d104      	bne.n	800cbf0 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800cbee:	e003      	b.n	800cbf8 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	60da      	str	r2, [r3, #12]

  return 0;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	371c      	adds	r7, #28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	460b      	mov	r3, r1
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	32b0      	adds	r2, #176	; 0xb0
 800cc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <SCSI_Read10+0x2a>
  {
    return -1;
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295
 800cc34:	e090      	b.n	800cd58 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	7a1b      	ldrb	r3, [r3, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f040 8082 	bne.w	800cd44 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	db0a      	blt.n	800cc62 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cc52:	2320      	movs	r3, #32
 800cc54:	2205      	movs	r2, #5
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f7ff ff0b 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e07a      	b.n	800cd58 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d108      	bne.n	800cc7e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cc6c:	7af9      	ldrb	r1, [r7, #11]
 800cc6e:	233a      	movs	r3, #58	; 0x3a
 800cc70:	2202      	movs	r2, #2
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7ff fefd 	bl	800ca72 <SCSI_SenseCode>

      return -1;
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7c:	e06c      	b.n	800cd58 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	33b0      	adds	r3, #176	; 0xb0
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	7afa      	ldrb	r2, [r7, #11]
 800cc92:	4610      	mov	r0, r2
 800cc94:	4798      	blx	r3
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d008      	beq.n	800ccae <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cc9c:	7af9      	ldrb	r1, [r7, #11]
 800cc9e:	233a      	movs	r3, #58	; 0x3a
 800cca0:	2202      	movs	r2, #2
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f7ff fee5 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cca8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccac:	e054      	b.n	800cd58 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	3303      	adds	r3, #3
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ccbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ccc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	3205      	adds	r2, #5
 800ccce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ccd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3307      	adds	r3, #7
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	3208      	adds	r2, #8
 800cce4:	7812      	ldrb	r2, [r2, #0]
 800cce6:	431a      	orrs	r2, r3
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ccfa:	7af9      	ldrb	r1, [r7, #11]
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f000 fadc 	bl	800d2ba <SCSI_CheckAddressRange>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	da02      	bge.n	800cd0e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	e024      	b.n	800cd58 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd1a:	6979      	ldr	r1, [r7, #20]
 800cd1c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800cd20:	fb01 f303 	mul.w	r3, r1, r3
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d00a      	beq.n	800cd3e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cd2e:	2320      	movs	r3, #32
 800cd30:	2205      	movs	r2, #5
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f7ff fe9d 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cd38:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3c:	e00c      	b.n	800cd58 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2202      	movs	r2, #2
 800cd42:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd4a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800cd4c:	7afb      	ldrb	r3, [r7, #11]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 fadf 	bl	800d314 <SCSI_ProcessRead>
 800cd56:	4603      	mov	r3, r0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	32b0      	adds	r2, #176	; 0xb0
 800cd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <SCSI_Read12+0x2a>
  {
    return -1;
 800cd84:	f04f 33ff 	mov.w	r3, #4294967295
 800cd88:	e09a      	b.n	800cec0 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	7a1b      	ldrb	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f040 808c 	bne.w	800ceac <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cd9a:	b25b      	sxtb	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	db0a      	blt.n	800cdb6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cda6:	2320      	movs	r3, #32
 800cda8:	2205      	movs	r2, #5
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff fe61 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	e084      	b.n	800cec0 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d108      	bne.n	800cdd2 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cdc0:	7af9      	ldrb	r1, [r7, #11]
 800cdc2:	233a      	movs	r3, #58	; 0x3a
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fe53 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	e076      	b.n	800cec0 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	33b0      	adds	r3, #176	; 0xb0
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	7afa      	ldrb	r2, [r7, #11]
 800cde6:	4610      	mov	r0, r2
 800cde8:	4798      	blx	r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d008      	beq.n	800ce02 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cdf0:	7af9      	ldrb	r1, [r7, #11]
 800cdf2:	233a      	movs	r3, #58	; 0x3a
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff fe3b 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ce00:	e05e      	b.n	800cec0 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3302      	adds	r3, #2
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3303      	adds	r3, #3
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3304      	adds	r3, #4
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ce1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	3205      	adds	r2, #5
 800ce22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ce24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3306      	adds	r3, #6
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3307      	adds	r3, #7
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ce3c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3308      	adds	r3, #8
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ce46:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	3209      	adds	r2, #9
 800ce4c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ce4e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce62:	7af9      	ldrb	r1, [r7, #11]
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fa28 	bl	800d2ba <SCSI_CheckAddressRange>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da02      	bge.n	800ce76 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ce70:	f04f 33ff 	mov.w	r3, #4294967295
 800ce74:	e024      	b.n	800cec0 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce82:	6979      	ldr	r1, [r7, #20]
 800ce84:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ce88:	fb01 f303 	mul.w	r3, r1, r3
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d00a      	beq.n	800cea6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ce96:	2320      	movs	r3, #32
 800ce98:	2205      	movs	r2, #5
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff fde9 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cea0:	f04f 33ff 	mov.w	r3, #4294967295
 800cea4:	e00c      	b.n	800cec0 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceb2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ceb4:	7afb      	ldrb	r3, [r7, #11]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 fa2b 	bl	800d314 <SCSI_ProcessRead>
 800cebe:	4603      	mov	r3, r0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	460b      	mov	r3, r1
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	32b0      	adds	r2, #176	; 0xb0
 800cee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <SCSI_Write10+0x2a>
  {
    return -1;
 800ceec:	f04f 33ff 	mov.w	r3, #4294967295
 800cef0:	e0ba      	b.n	800d068 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	7a1b      	ldrb	r3, [r3, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f040 80b0 	bne.w	800d05c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cf0c:	2320      	movs	r3, #32
 800cf0e:	2205      	movs	r2, #5
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff fdae 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cf16:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1a:	e0a5      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cf22:	b25b      	sxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	da0a      	bge.n	800cf3e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cf2e:	2320      	movs	r3, #32
 800cf30:	2205      	movs	r2, #5
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f7ff fd9d 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3c:	e094      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	33b0      	adds	r3, #176	; 0xb0
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	7afa      	ldrb	r2, [r7, #11]
 800cf52:	4610      	mov	r0, r2
 800cf54:	4798      	blx	r3
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d008      	beq.n	800cf6e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cf5c:	7af9      	ldrb	r1, [r7, #11]
 800cf5e:	233a      	movs	r3, #58	; 0x3a
 800cf60:	2202      	movs	r2, #2
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff fd85 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6c:	e07c      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	33b0      	adds	r3, #176	; 0xb0
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	7afa      	ldrb	r2, [r7, #11]
 800cf82:	4610      	mov	r0, r2
 800cf84:	4798      	blx	r3
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d008      	beq.n	800cf9e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cf8c:	7af9      	ldrb	r1, [r7, #11]
 800cf8e:	2327      	movs	r3, #39	; 0x27
 800cf90:	2202      	movs	r2, #2
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fd6d 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800cf98:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9c:	e064      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3303      	adds	r3, #3
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cfae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cfb8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	3205      	adds	r2, #5
 800cfbe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cfc0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3307      	adds	r3, #7
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	3208      	adds	r2, #8
 800cfd4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cfea:	7af9      	ldrb	r1, [r7, #11]
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f964 	bl	800d2ba <SCSI_CheckAddressRange>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	da02      	bge.n	800cffe <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	e034      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d00a:	fb02 f303 	mul.w	r3, r2, r3
 800d00e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d00a      	beq.n	800d032 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d022:	2320      	movs	r3, #32
 800d024:	2205      	movs	r2, #5
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f7ff fd23 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800d02c:	f04f 33ff 	mov.w	r3, #4294967295
 800d030:	e01a      	b.n	800d068 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d038:	bf28      	it	cs
 800d03a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d03e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2201      	movs	r2, #1
 800d044:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800d046:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <SCSI_Write10+0x1a8>)
 800d048:	7819      	ldrb	r1, [r3, #0]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f103 0210 	add.w	r2, r3, #16
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f004 fed3 	bl	8011dfe <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	e005      	b.n	800d068 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	4619      	mov	r1, r3
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 f9dd 	bl	800d420 <SCSI_ProcessWrite>
 800d066:	4603      	mov	r3, r0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20000087 	.word	0x20000087

0800d074 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	460b      	mov	r3, r1
 800d07e:	607a      	str	r2, [r7, #4]
 800d080:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	32b0      	adds	r2, #176	; 0xb0
 800d08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d090:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d102      	bne.n	800d09e <SCSI_Write12+0x2a>
  {
    return -1;
 800d098:	f04f 33ff 	mov.w	r3, #4294967295
 800d09c:	e0ca      	b.n	800d234 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	7a1b      	ldrb	r3, [r3, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f040 80c0 	bne.w	800d228 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	2205      	movs	r2, #5
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f7ff fcd8 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800d0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c6:	e0b5      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d0ce:	b25b      	sxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	da0a      	bge.n	800d0ea <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d0da:	2320      	movs	r3, #32
 800d0dc:	2205      	movs	r2, #5
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7ff fcc7 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800d0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e8:	e0a4      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	33b0      	adds	r3, #176	; 0xb0
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	7afa      	ldrb	r2, [r7, #11]
 800d0fe:	4610      	mov	r0, r2
 800d100:	4798      	blx	r3
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00b      	beq.n	800d120 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d108:	7af9      	ldrb	r1, [r7, #11]
 800d10a:	233a      	movs	r3, #58	; 0x3a
 800d10c:	2202      	movs	r2, #2
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f7ff fcaf 	bl	800ca72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2205      	movs	r2, #5
 800d118:	721a      	strb	r2, [r3, #8]
      return -1;
 800d11a:	f04f 33ff 	mov.w	r3, #4294967295
 800d11e:	e089      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	33b0      	adds	r3, #176	; 0xb0
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	7afa      	ldrb	r2, [r7, #11]
 800d134:	4610      	mov	r0, r2
 800d136:	4798      	blx	r3
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00b      	beq.n	800d156 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800d13e:	7af9      	ldrb	r1, [r7, #11]
 800d140:	2327      	movs	r3, #39	; 0x27
 800d142:	2202      	movs	r2, #2
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff fc94 	bl	800ca72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2205      	movs	r2, #5
 800d14e:	721a      	strb	r2, [r3, #8]
      return -1;
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	e06e      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3302      	adds	r3, #2
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3303      	adds	r3, #3
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d166:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3304      	adds	r3, #4
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800d170:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	3205      	adds	r2, #5
 800d176:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800d178:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	3306      	adds	r3, #6
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3307      	adds	r3, #7
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d190:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	3308      	adds	r3, #8
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800d19a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	3209      	adds	r2, #9
 800d1a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800d1a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1b6:	7af9      	ldrb	r1, [r7, #11]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f87e 	bl	800d2ba <SCSI_CheckAddressRange>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	da02      	bge.n	800d1ca <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c8:	e034      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d1d6:	fb02 f303 	mul.w	r3, r2, r3
 800d1da:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d00a      	beq.n	800d1fe <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d1ee:	2320      	movs	r3, #32
 800d1f0:	2205      	movs	r2, #5
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7ff fc3d 	bl	800ca72 <SCSI_SenseCode>
      return -1;
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fc:	e01a      	b.n	800d234 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d204:	bf28      	it	cs
 800d206:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d20a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2201      	movs	r2, #1
 800d210:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800d212:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <SCSI_Write12+0x1c8>)
 800d214:	7819      	ldrb	r1, [r3, #0]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f103 0210 	add.w	r2, r3, #16
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f004 fded 	bl	8011dfe <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800d224:	2300      	movs	r3, #0
 800d226:	e005      	b.n	800d234 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800d228:	7afb      	ldrb	r3, [r7, #11]
 800d22a:	4619      	mov	r1, r3
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 f8f7 	bl	800d420 <SCSI_ProcessWrite>
 800d232:	4603      	mov	r3, r0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	20000087 	.word	0x20000087

0800d240 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	460b      	mov	r3, r1
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	32b0      	adds	r2, #176	; 0xb0
 800d258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d102      	bne.n	800d26a <SCSI_Verify10+0x2a>
  {
    return -1;
 800d264:	f04f 33ff 	mov.w	r3, #4294967295
 800d268:	e023      	b.n	800d2b2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3301      	adds	r3, #1
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d008      	beq.n	800d28a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800d278:	7af9      	ldrb	r1, [r7, #11]
 800d27a:	2324      	movs	r3, #36	; 0x24
 800d27c:	2205      	movs	r2, #5
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff fbf7 	bl	800ca72 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800d284:	f04f 33ff 	mov.w	r3, #4294967295
 800d288:	e013      	b.n	800d2b2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d296:	7af9      	ldrb	r1, [r7, #11]
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 f80e 	bl	800d2ba <SCSI_CheckAddressRange>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da02      	bge.n	800d2aa <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800d2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a8:	e003      	b.n	800d2b2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	60da      	str	r2, [r3, #12]

  return 0;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b086      	sub	sp, #24
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	60f8      	str	r0, [r7, #12]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	32b0      	adds	r2, #176	; 0xb0
 800d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d102      	bne.n	800d2e6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800d2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e4:	e011      	b.n	800d30a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	441a      	add	r2, r3
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d908      	bls.n	800d308 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800d2f6:	7af9      	ldrb	r1, [r7, #11]
 800d2f8:	2321      	movs	r3, #33	; 0x21
 800d2fa:	2205      	movs	r2, #5
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7ff fbb8 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	e000      	b.n	800d30a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800d314:	b590      	push	{r4, r7, lr}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	32b0      	adds	r2, #176	; 0xb0
 800d32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d32e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800d336:	f04f 33ff 	mov.w	r3, #4294967295
 800d33a:	e06a      	b.n	800d412 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d348:	fb02 f303 	mul.w	r3, r2, r3
 800d34c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d354:	bf28      	it	cs
 800d356:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d35a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	33b0      	adds	r3, #176	; 0xb0
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4413      	add	r3, r2
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	691c      	ldr	r4, [r3, #16]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f103 0110 	add.w	r1, r3, #16
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d380:	4618      	mov	r0, r3
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800d388:	b29b      	uxth	r3, r3
 800d38a:	78f8      	ldrb	r0, [r7, #3]
 800d38c:	47a0      	blx	r4
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	da08      	bge.n	800d3a6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800d394:	78f9      	ldrb	r1, [r7, #3]
 800d396:	2311      	movs	r3, #17
 800d398:	2204      	movs	r2, #4
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fb69 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a4:	e035      	b.n	800d412 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800d3a6:	4b1d      	ldr	r3, [pc, #116]	; (800d41c <SCSI_ProcessRead+0x108>)
 800d3a8:	7819      	ldrb	r1, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0210 	add.w	r2, r3, #16
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f004 fd02 	bl	8011dbc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	1ad2      	subs	r2, r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2203      	movs	r2, #3
 800d40e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	bd90      	pop	{r4, r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000086 	.word	0x20000086

0800d420 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	32b0      	adds	r2, #176	; 0xb0
 800d436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d102      	bne.n	800d448 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800d442:	f04f 33ff 	mov.w	r3, #4294967295
 800d446:	e07a      	b.n	800d53e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d454:	fb02 f303 	mul.w	r3, r2, r3
 800d458:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d460:	bf28      	it	cs
 800d462:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d466:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	33b0      	adds	r3, #176	; 0xb0
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	695c      	ldr	r4, [r3, #20]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f103 0110 	add.w	r1, r3, #16
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d48c:	4618      	mov	r0, r3
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800d494:	b29b      	uxth	r3, r3
 800d496:	78f8      	ldrb	r0, [r7, #3]
 800d498:	47a0      	blx	r4
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	da08      	bge.n	800d4b2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800d4a0:	78f9      	ldrb	r1, [r7, #3]
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	2204      	movs	r2, #4
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7ff fae3 	bl	800ca72 <SCSI_SenseCode>
    return -1;
 800d4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b0:	e045      	b.n	800d53e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4c6:	441a      	add	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d4da:	4619      	mov	r1, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4e2:	1ad2      	subs	r2, r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	1ad2      	subs	r2, r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d500:	2b00      	cmp	r3, #0
 800d502:	d104      	bne.n	800d50e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d504:	2100      	movs	r1, #0
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7fe fd14 	bl	800bf34 <MSC_BOT_SendCSW>
 800d50c:	e016      	b.n	800d53c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d51a:	fb02 f303 	mul.w	r3, r2, r3
 800d51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d522:	bf28      	it	cs
 800d524:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d528:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800d52a:	4b07      	ldr	r3, [pc, #28]	; (800d548 <SCSI_ProcessWrite+0x128>)
 800d52c:	7819      	ldrb	r1, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f103 0210 	add.w	r2, r3, #16
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f004 fc61 	bl	8011dfe <USBD_LL_PrepareReceive>
  }

  return 0;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	bd90      	pop	{r4, r7, pc}
 800d546:	bf00      	nop
 800d548:	20000087 	.word	0x20000087

0800d54c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800d55a:	88fb      	ldrh	r3, [r7, #6]
 800d55c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800d564:	f04f 33ff 	mov.w	r3, #4294967295
 800d568:	e013      	b.n	800d592 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800d56a:	8afa      	ldrh	r2, [r7, #22]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800d570:	e00b      	b.n	800d58a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800d572:	8afb      	ldrh	r3, [r7, #22]
 800d574:	3b01      	subs	r3, #1
 800d576:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800d578:	8afb      	ldrh	r3, [r7, #22]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	441a      	add	r2, r3
 800d57e:	8afb      	ldrh	r3, [r7, #22]
 800d580:	7811      	ldrb	r1, [r2, #0]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	4413      	add	r3, r2
 800d586:	460a      	mov	r2, r1
 800d588:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800d58a:	8afb      	ldrh	r3, [r7, #22]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1f0      	bne.n	800d572 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	371c      	adds	r7, #28
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b086      	sub	sp, #24
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e01f      	b.n	800d5f6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	79fa      	ldrb	r2, [r7, #7]
 800d5e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f004 fa92 	bl	8011b14 <USBD_LL_Init>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d608:	2300      	movs	r3, #0
 800d60a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d612:	2303      	movs	r3, #3
 800d614:	e025      	b.n	800d662 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32ae      	adds	r2, #174	; 0xae
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00f      	beq.n	800d652 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	32ae      	adds	r2, #174	; 0xae
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d642:	f107 020e 	add.w	r2, r7, #14
 800d646:	4610      	mov	r0, r2
 800d648:	4798      	blx	r3
 800d64a:	4602      	mov	r2, r0
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f004 fa9a 	bl	8011bac <USBD_LL_Start>
 800d678:	4603      	mov	r3, r0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d682:	b480      	push	{r7}
 800d684:	b083      	sub	sp, #12
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d68a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d009      	beq.n	800d6c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	78fa      	ldrb	r2, [r7, #3]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	4798      	blx	r3
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	78fa      	ldrb	r2, [r7, #3]
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	4798      	blx	r3
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f001 f909 	bl	800e92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d72a:	461a      	mov	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d738:	f003 031f 	and.w	r3, r3, #31
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d01a      	beq.n	800d776 <USBD_LL_SetupStage+0x72>
 800d740:	2b02      	cmp	r3, #2
 800d742:	d822      	bhi.n	800d78a <USBD_LL_SetupStage+0x86>
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <USBD_LL_SetupStage+0x4a>
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d00a      	beq.n	800d762 <USBD_LL_SetupStage+0x5e>
 800d74c:	e01d      	b.n	800d78a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 fb60 	bl	800de1c <USBD_StdDevReq>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]
      break;
 800d760:	e020      	b.n	800d7a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fbc8 	bl	800df00 <USBD_StdItfReq>
 800d770:	4603      	mov	r3, r0
 800d772:	73fb      	strb	r3, [r7, #15]
      break;
 800d774:	e016      	b.n	800d7a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fc2a 	bl	800dfd8 <USBD_StdEPReq>
 800d784:	4603      	mov	r3, r0
 800d786:	73fb      	strb	r3, [r7, #15]
      break;
 800d788:	e00c      	b.n	800d7a4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d794:	b2db      	uxtb	r3, r3
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f004 fa86 	bl	8011caa <USBD_LL_StallEP>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d7a2:	bf00      	nop
  }

  return ret;
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b086      	sub	sp, #24
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d7c0:	7afb      	ldrb	r3, [r7, #11]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d16e      	bne.n	800d8a4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d7cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7d4:	2b03      	cmp	r3, #3
 800d7d6:	f040 8098 	bne.w	800d90a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	689a      	ldr	r2, [r3, #8]
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d913      	bls.n	800d80e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	68da      	ldr	r2, [r3, #12]
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	bf28      	it	cs
 800d800:	4613      	movcs	r3, r2
 800d802:	461a      	mov	r2, r3
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f001 f968 	bl	800eadc <USBD_CtlContinueRx>
 800d80c:	e07d      	b.n	800d90a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d814:	f003 031f 	and.w	r3, r3, #31
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d014      	beq.n	800d846 <USBD_LL_DataOutStage+0x98>
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d81d      	bhi.n	800d85c <USBD_LL_DataOutStage+0xae>
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <USBD_LL_DataOutStage+0x7c>
 800d824:	2b01      	cmp	r3, #1
 800d826:	d003      	beq.n	800d830 <USBD_LL_DataOutStage+0x82>
 800d828:	e018      	b.n	800d85c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d82a:	2300      	movs	r3, #0
 800d82c:	75bb      	strb	r3, [r7, #22]
            break;
 800d82e:	e018      	b.n	800d862 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d836:	b2db      	uxtb	r3, r3
 800d838:	4619      	mov	r1, r3
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f000 fa5e 	bl	800dcfc <USBD_CoreFindIF>
 800d840:	4603      	mov	r3, r0
 800d842:	75bb      	strb	r3, [r7, #22]
            break;
 800d844:	e00d      	b.n	800d862 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	4619      	mov	r1, r3
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 fa60 	bl	800dd16 <USBD_CoreFindEP>
 800d856:	4603      	mov	r3, r0
 800d858:	75bb      	strb	r3, [r7, #22]
            break;
 800d85a:	e002      	b.n	800d862 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	75bb      	strb	r3, [r7, #22]
            break;
 800d860:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d862:	7dbb      	ldrb	r3, [r7, #22]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d119      	bne.n	800d89c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b03      	cmp	r3, #3
 800d872:	d113      	bne.n	800d89c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d874:	7dba      	ldrb	r2, [r7, #22]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	32ae      	adds	r2, #174	; 0xae
 800d87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00b      	beq.n	800d89c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d884:	7dba      	ldrb	r2, [r7, #22]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d88c:	7dba      	ldrb	r2, [r7, #22]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	32ae      	adds	r2, #174	; 0xae
 800d892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f001 f92e 	bl	800eafe <USBD_CtlSendStatus>
 800d8a2:	e032      	b.n	800d90a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d8a4:	7afb      	ldrb	r3, [r7, #11]
 800d8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f000 fa31 	bl	800dd16 <USBD_CoreFindEP>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8b8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ba:	2bff      	cmp	r3, #255	; 0xff
 800d8bc:	d025      	beq.n	800d90a <USBD_LL_DataOutStage+0x15c>
 800d8be:	7dbb      	ldrb	r3, [r7, #22]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d122      	bne.n	800d90a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d117      	bne.n	800d900 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d8d0:	7dba      	ldrb	r2, [r7, #22]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	32ae      	adds	r2, #174	; 0xae
 800d8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00f      	beq.n	800d900 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d8e0:	7dba      	ldrb	r2, [r7, #22]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d8e8:	7dba      	ldrb	r2, [r7, #22]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	32ae      	adds	r2, #174	; 0xae
 800d8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	7afa      	ldrb	r2, [r7, #11]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	4798      	blx	r3
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	e000      	b.n	800d90c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	460b      	mov	r3, r1
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d922:	7afb      	ldrb	r3, [r7, #11]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d16f      	bne.n	800da08 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3314      	adds	r3, #20
 800d92c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d934:	2b02      	cmp	r3, #2
 800d936:	d15a      	bne.n	800d9ee <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	689a      	ldr	r2, [r3, #8]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	429a      	cmp	r2, r3
 800d942:	d914      	bls.n	800d96e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	689a      	ldr	r2, [r3, #8]
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	1ad2      	subs	r2, r2, r3
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	461a      	mov	r2, r3
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f001 f8ad 	bl	800eaba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d960:	2300      	movs	r3, #0
 800d962:	2200      	movs	r2, #0
 800d964:	2100      	movs	r1, #0
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f004 fa49 	bl	8011dfe <USBD_LL_PrepareReceive>
 800d96c:	e03f      	b.n	800d9ee <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	68da      	ldr	r2, [r3, #12]
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	429a      	cmp	r2, r3
 800d978:	d11c      	bne.n	800d9b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d982:	429a      	cmp	r2, r3
 800d984:	d316      	bcc.n	800d9b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d990:	429a      	cmp	r2, r3
 800d992:	d20f      	bcs.n	800d9b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d994:	2200      	movs	r2, #0
 800d996:	2100      	movs	r1, #0
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f001 f88e 	bl	800eaba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f004 fa26 	bl	8011dfe <USBD_LL_PrepareReceive>
 800d9b2:	e01c      	b.n	800d9ee <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b03      	cmp	r3, #3
 800d9be:	d10f      	bne.n	800d9e0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d009      	beq.n	800d9e0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9e0:	2180      	movs	r1, #128	; 0x80
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f004 f961 	bl	8011caa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f001 f89b 	bl	800eb24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d03a      	beq.n	800da6e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7ff fe42 	bl	800d682 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800da06:	e032      	b.n	800da6e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800da08:	7afb      	ldrb	r3, [r7, #11]
 800da0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 f97f 	bl	800dd16 <USBD_CoreFindEP>
 800da18:	4603      	mov	r3, r0
 800da1a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	2bff      	cmp	r3, #255	; 0xff
 800da20:	d025      	beq.n	800da6e <USBD_LL_DataInStage+0x15a>
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d122      	bne.n	800da6e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b03      	cmp	r3, #3
 800da32:	d11c      	bne.n	800da6e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800da34:	7dfa      	ldrb	r2, [r7, #23]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	32ae      	adds	r2, #174	; 0xae
 800da3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d014      	beq.n	800da6e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800da44:	7dfa      	ldrb	r2, [r7, #23]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800da4c:	7dfa      	ldrb	r2, [r7, #23]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	32ae      	adds	r2, #174	; 0xae
 800da52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	7afa      	ldrb	r2, [r7, #11]
 800da5a:	4611      	mov	r1, r2
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	4798      	blx	r3
 800da60:	4603      	mov	r3, r0
 800da62:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800da64:	7dbb      	ldrb	r3, [r7, #22]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800da6a:	7dbb      	ldrb	r3, [r7, #22]
 800da6c:	e000      	b.n	800da70 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d014      	beq.n	800dade <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00e      	beq.n	800dade <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6852      	ldr	r2, [r2, #4]
 800dacc:	b2d2      	uxtb	r2, r2
 800dace:	4611      	mov	r1, r2
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	4798      	blx	r3
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dada:	2303      	movs	r3, #3
 800dadc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dade:	2340      	movs	r3, #64	; 0x40
 800dae0:	2200      	movs	r2, #0
 800dae2:	2100      	movs	r1, #0
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f004 f87c 	bl	8011be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2240      	movs	r2, #64	; 0x40
 800daf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dafa:	2340      	movs	r3, #64	; 0x40
 800dafc:	2200      	movs	r2, #0
 800dafe:	2180      	movs	r1, #128	; 0x80
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f004 f86e 	bl	8011be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2240      	movs	r2, #64	; 0x40
 800db10:	621a      	str	r2, [r3, #32]

  return ret;
 800db12:	7bfb      	ldrb	r3, [r7, #15]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	460b      	mov	r3, r1
 800db26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	78fa      	ldrb	r2, [r7, #3]
 800db2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2204      	movs	r2, #4
 800db56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db76:	b2db      	uxtb	r3, r3
 800db78:	2b04      	cmp	r3, #4
 800db7a:	d106      	bne.n	800db8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800db82:	b2da      	uxtb	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d110      	bne.n	800dbce <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbbc:	69db      	ldr	r3, [r3, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d005      	beq.n	800dbce <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	32ae      	adds	r2, #174	; 0xae
 800dbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	e01c      	b.n	800dc34 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2b03      	cmp	r3, #3
 800dc04:	d115      	bne.n	800dc32 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	32ae      	adds	r2, #174	; 0xae
 800dc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00b      	beq.n	800dc32 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	32ae      	adds	r2, #174	; 0xae
 800dc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	78fa      	ldrb	r2, [r7, #3]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	32ae      	adds	r2, #174	; 0xae
 800dc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e01c      	b.n	800dc98 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d115      	bne.n	800dc96 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	32ae      	adds	r2, #174	; 0xae
 800dc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00b      	beq.n	800dc96 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	32ae      	adds	r2, #174	; 0xae
 800dc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	78fa      	ldrb	r2, [r7, #3]
 800dc90:	4611      	mov	r1, r2
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00e      	beq.n	800dcf2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	6852      	ldr	r2, [r2, #4]
 800dce0:	b2d2      	uxtb	r2, r2
 800dce2:	4611      	mov	r1, r2
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	4798      	blx	r3
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b083      	sub	sp, #12
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	885b      	ldrh	r3, [r3, #2]
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d920      	bls.n	800dd9a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd60:	e013      	b.n	800dd8a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd62:	f107 030a 	add.w	r3, r7, #10
 800dd66:	4619      	mov	r1, r3
 800dd68:	6978      	ldr	r0, [r7, #20]
 800dd6a:	f000 f81b 	bl	800dda4 <USBD_GetNextDesc>
 800dd6e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b05      	cmp	r3, #5
 800dd76:	d108      	bne.n	800dd8a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	789b      	ldrb	r3, [r3, #2]
 800dd80:	78fa      	ldrb	r2, [r7, #3]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d008      	beq.n	800dd98 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd86:	2300      	movs	r3, #0
 800dd88:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	885b      	ldrh	r3, [r3, #2]
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	897b      	ldrh	r3, [r7, #10]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d8e5      	bhi.n	800dd62 <USBD_GetEpDesc+0x32>
 800dd96:	e000      	b.n	800dd9a <USBD_GetEpDesc+0x6a>
          break;
 800dd98:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dd9a:	693b      	ldr	r3, [r7, #16]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	881a      	ldrh	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	4413      	add	r3, r2
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3714      	adds	r7, #20
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b087      	sub	sp, #28
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ddfc:	8a3b      	ldrh	r3, [r7, #16]
 800ddfe:	021b      	lsls	r3, r3, #8
 800de00:	b21a      	sxth	r2, r3
 800de02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de06:	4313      	orrs	r3, r2
 800de08:	b21b      	sxth	r3, r3
 800de0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de0c:	89fb      	ldrh	r3, [r7, #14]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	371c      	adds	r7, #28
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
	...

0800de1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de26:	2300      	movs	r3, #0
 800de28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de32:	2b40      	cmp	r3, #64	; 0x40
 800de34:	d005      	beq.n	800de42 <USBD_StdDevReq+0x26>
 800de36:	2b40      	cmp	r3, #64	; 0x40
 800de38:	d857      	bhi.n	800deea <USBD_StdDevReq+0xce>
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00f      	beq.n	800de5e <USBD_StdDevReq+0x42>
 800de3e:	2b20      	cmp	r3, #32
 800de40:	d153      	bne.n	800deea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	32ae      	adds	r2, #174	; 0xae
 800de4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	4798      	blx	r3
 800de58:	4603      	mov	r3, r0
 800de5a:	73fb      	strb	r3, [r7, #15]
      break;
 800de5c:	e04a      	b.n	800def4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	2b09      	cmp	r3, #9
 800de64:	d83b      	bhi.n	800dede <USBD_StdDevReq+0xc2>
 800de66:	a201      	add	r2, pc, #4	; (adr r2, 800de6c <USBD_StdDevReq+0x50>)
 800de68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6c:	0800dec1 	.word	0x0800dec1
 800de70:	0800ded5 	.word	0x0800ded5
 800de74:	0800dedf 	.word	0x0800dedf
 800de78:	0800decb 	.word	0x0800decb
 800de7c:	0800dedf 	.word	0x0800dedf
 800de80:	0800de9f 	.word	0x0800de9f
 800de84:	0800de95 	.word	0x0800de95
 800de88:	0800dedf 	.word	0x0800dedf
 800de8c:	0800deb7 	.word	0x0800deb7
 800de90:	0800dea9 	.word	0x0800dea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa3c 	bl	800e314 <USBD_GetDescriptor>
          break;
 800de9c:	e024      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 fba1 	bl	800e5e8 <USBD_SetAddress>
          break;
 800dea6:	e01f      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fbe0 	bl	800e670 <USBD_SetConfig>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]
          break;
 800deb4:	e018      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fc83 	bl	800e7c4 <USBD_GetConfig>
          break;
 800debe:	e013      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fcb4 	bl	800e830 <USBD_GetStatus>
          break;
 800dec8:	e00e      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fce3 	bl	800e898 <USBD_SetFeature>
          break;
 800ded2:	e009      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fd07 	bl	800e8ea <USBD_ClrFeature>
          break;
 800dedc:	e004      	b.n	800dee8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fd5e 	bl	800e9a2 <USBD_CtlError>
          break;
 800dee6:	bf00      	nop
      }
      break;
 800dee8:	e004      	b.n	800def4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800deea:	6839      	ldr	r1, [r7, #0]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 fd58 	bl	800e9a2 <USBD_CtlError>
      break;
 800def2:	bf00      	nop
  }

  return ret;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop

0800df00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df16:	2b40      	cmp	r3, #64	; 0x40
 800df18:	d005      	beq.n	800df26 <USBD_StdItfReq+0x26>
 800df1a:	2b40      	cmp	r3, #64	; 0x40
 800df1c:	d852      	bhi.n	800dfc4 <USBD_StdItfReq+0xc4>
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <USBD_StdItfReq+0x26>
 800df22:	2b20      	cmp	r3, #32
 800df24:	d14e      	bne.n	800dfc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	3b01      	subs	r3, #1
 800df30:	2b02      	cmp	r3, #2
 800df32:	d840      	bhi.n	800dfb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	889b      	ldrh	r3, [r3, #4]
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d836      	bhi.n	800dfac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	889b      	ldrh	r3, [r3, #4]
 800df42:	b2db      	uxtb	r3, r3
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7ff fed8 	bl	800dcfc <USBD_CoreFindIF>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	2bff      	cmp	r3, #255	; 0xff
 800df54:	d01d      	beq.n	800df92 <USBD_StdItfReq+0x92>
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d11a      	bne.n	800df92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df5c:	7bba      	ldrb	r2, [r7, #14]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	32ae      	adds	r2, #174	; 0xae
 800df62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00f      	beq.n	800df8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df6c:	7bba      	ldrb	r2, [r7, #14]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df74:	7bba      	ldrb	r2, [r7, #14]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	32ae      	adds	r2, #174	; 0xae
 800df7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	4798      	blx	r3
 800df86:	4603      	mov	r3, r0
 800df88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df8a:	e004      	b.n	800df96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800df8c:	2303      	movs	r3, #3
 800df8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df90:	e001      	b.n	800df96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800df92:	2303      	movs	r3, #3
 800df94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	88db      	ldrh	r3, [r3, #6]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d110      	bne.n	800dfc0 <USBD_StdItfReq+0xc0>
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10d      	bne.n	800dfc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fdaa 	bl	800eafe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dfaa:	e009      	b.n	800dfc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fcf7 	bl	800e9a2 <USBD_CtlError>
          break;
 800dfb4:	e004      	b.n	800dfc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fcf2 	bl	800e9a2 <USBD_CtlError>
          break;
 800dfbe:	e000      	b.n	800dfc2 <USBD_StdItfReq+0xc2>
          break;
 800dfc0:	bf00      	nop
      }
      break;
 800dfc2:	e004      	b.n	800dfce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fceb 	bl	800e9a2 <USBD_CtlError>
      break;
 800dfcc:	bf00      	nop
  }

  return ret;
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	889b      	ldrh	r3, [r3, #4]
 800dfea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dff4:	2b40      	cmp	r3, #64	; 0x40
 800dff6:	d007      	beq.n	800e008 <USBD_StdEPReq+0x30>
 800dff8:	2b40      	cmp	r3, #64	; 0x40
 800dffa:	f200 817f 	bhi.w	800e2fc <USBD_StdEPReq+0x324>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d02a      	beq.n	800e058 <USBD_StdEPReq+0x80>
 800e002:	2b20      	cmp	r3, #32
 800e004:	f040 817a 	bne.w	800e2fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fe82 	bl	800dd16 <USBD_CoreFindEP>
 800e012:	4603      	mov	r3, r0
 800e014:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e016:	7b7b      	ldrb	r3, [r7, #13]
 800e018:	2bff      	cmp	r3, #255	; 0xff
 800e01a:	f000 8174 	beq.w	800e306 <USBD_StdEPReq+0x32e>
 800e01e:	7b7b      	ldrb	r3, [r7, #13]
 800e020:	2b00      	cmp	r3, #0
 800e022:	f040 8170 	bne.w	800e306 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e026:	7b7a      	ldrb	r2, [r7, #13]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e02e:	7b7a      	ldrb	r2, [r7, #13]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	32ae      	adds	r2, #174	; 0xae
 800e034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 8163 	beq.w	800e306 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e040:	7b7a      	ldrb	r2, [r7, #13]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	32ae      	adds	r2, #174	; 0xae
 800e046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	4798      	blx	r3
 800e052:	4603      	mov	r3, r0
 800e054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e056:	e156      	b.n	800e306 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d008      	beq.n	800e072 <USBD_StdEPReq+0x9a>
 800e060:	2b03      	cmp	r3, #3
 800e062:	f300 8145 	bgt.w	800e2f0 <USBD_StdEPReq+0x318>
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 809b 	beq.w	800e1a2 <USBD_StdEPReq+0x1ca>
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d03c      	beq.n	800e0ea <USBD_StdEPReq+0x112>
 800e070:	e13e      	b.n	800e2f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d002      	beq.n	800e084 <USBD_StdEPReq+0xac>
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d016      	beq.n	800e0b0 <USBD_StdEPReq+0xd8>
 800e082:	e02c      	b.n	800e0de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00d      	beq.n	800e0a6 <USBD_StdEPReq+0xce>
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	2b80      	cmp	r3, #128	; 0x80
 800e08e:	d00a      	beq.n	800e0a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f003 fe08 	bl	8011caa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e09a:	2180      	movs	r1, #128	; 0x80
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f003 fe04 	bl	8011caa <USBD_LL_StallEP>
 800e0a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e0a4:	e020      	b.n	800e0e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fc7a 	bl	800e9a2 <USBD_CtlError>
              break;
 800e0ae:	e01b      	b.n	800e0e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10e      	bne.n	800e0d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <USBD_StdEPReq+0xfe>
 800e0be:	7bbb      	ldrb	r3, [r7, #14]
 800e0c0:	2b80      	cmp	r3, #128	; 0x80
 800e0c2:	d008      	beq.n	800e0d6 <USBD_StdEPReq+0xfe>
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	88db      	ldrh	r3, [r3, #6]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d104      	bne.n	800e0d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0cc:	7bbb      	ldrb	r3, [r7, #14]
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f003 fdea 	bl	8011caa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fd11 	bl	800eafe <USBD_CtlSendStatus>

              break;
 800e0dc:	e004      	b.n	800e0e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fc5e 	bl	800e9a2 <USBD_CtlError>
              break;
 800e0e6:	bf00      	nop
          }
          break;
 800e0e8:	e107      	b.n	800e2fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d002      	beq.n	800e0fc <USBD_StdEPReq+0x124>
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d016      	beq.n	800e128 <USBD_StdEPReq+0x150>
 800e0fa:	e04b      	b.n	800e194 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00d      	beq.n	800e11e <USBD_StdEPReq+0x146>
 800e102:	7bbb      	ldrb	r3, [r7, #14]
 800e104:	2b80      	cmp	r3, #128	; 0x80
 800e106:	d00a      	beq.n	800e11e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f003 fdcc 	bl	8011caa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e112:	2180      	movs	r1, #128	; 0x80
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f003 fdc8 	bl	8011caa <USBD_LL_StallEP>
 800e11a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e11c:	e040      	b.n	800e1a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 fc3e 	bl	800e9a2 <USBD_CtlError>
              break;
 800e126:	e03b      	b.n	800e1a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	885b      	ldrh	r3, [r3, #2]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d136      	bne.n	800e19e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e136:	2b00      	cmp	r3, #0
 800e138:	d004      	beq.n	800e144 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f003 fdd2 	bl	8011ce8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fcda 	bl	800eafe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e14a:	7bbb      	ldrb	r3, [r7, #14]
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff fde1 	bl	800dd16 <USBD_CoreFindEP>
 800e154:	4603      	mov	r3, r0
 800e156:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e158:	7b7b      	ldrb	r3, [r7, #13]
 800e15a:	2bff      	cmp	r3, #255	; 0xff
 800e15c:	d01f      	beq.n	800e19e <USBD_StdEPReq+0x1c6>
 800e15e:	7b7b      	ldrb	r3, [r7, #13]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d11c      	bne.n	800e19e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e164:	7b7a      	ldrb	r2, [r7, #13]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e16c:	7b7a      	ldrb	r2, [r7, #13]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	32ae      	adds	r2, #174	; 0xae
 800e172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d010      	beq.n	800e19e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e17c:	7b7a      	ldrb	r2, [r7, #13]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	32ae      	adds	r2, #174	; 0xae
 800e182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	4798      	blx	r3
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e192:	e004      	b.n	800e19e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fc03 	bl	800e9a2 <USBD_CtlError>
              break;
 800e19c:	e000      	b.n	800e1a0 <USBD_StdEPReq+0x1c8>
              break;
 800e19e:	bf00      	nop
          }
          break;
 800e1a0:	e0ab      	b.n	800e2fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d002      	beq.n	800e1b4 <USBD_StdEPReq+0x1dc>
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d032      	beq.n	800e218 <USBD_StdEPReq+0x240>
 800e1b2:	e097      	b.n	800e2e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <USBD_StdEPReq+0x1f2>
 800e1ba:	7bbb      	ldrb	r3, [r7, #14]
 800e1bc:	2b80      	cmp	r3, #128	; 0x80
 800e1be:	d004      	beq.n	800e1ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 fbed 	bl	800e9a2 <USBD_CtlError>
                break;
 800e1c8:	e091      	b.n	800e2ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	da0b      	bge.n	800e1ea <USBD_StdEPReq+0x212>
 800e1d2:	7bbb      	ldrb	r3, [r7, #14]
 800e1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1d8:	4613      	mov	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	3310      	adds	r3, #16
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	e00b      	b.n	800e202 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	4413      	add	r3, r2
 800e200:	3304      	adds	r3, #4
 800e202:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	2202      	movs	r2, #2
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fc37 	bl	800ea84 <USBD_CtlSendData>
              break;
 800e216:	e06a      	b.n	800e2ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	da11      	bge.n	800e244 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e220:	7bbb      	ldrb	r3, [r7, #14]
 800e222:	f003 020f 	and.w	r2, r3, #15
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	4613      	mov	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	440b      	add	r3, r1
 800e232:	3324      	adds	r3, #36	; 0x24
 800e234:	881b      	ldrh	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d117      	bne.n	800e26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 fbb0 	bl	800e9a2 <USBD_CtlError>
                  break;
 800e242:	e054      	b.n	800e2ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e244:	7bbb      	ldrb	r3, [r7, #14]
 800e246:	f003 020f 	and.w	r2, r3, #15
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	440b      	add	r3, r1
 800e256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d104      	bne.n	800e26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fb9d 	bl	800e9a2 <USBD_CtlError>
                  break;
 800e268:	e041      	b.n	800e2ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da0b      	bge.n	800e28a <USBD_StdEPReq+0x2b2>
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	3310      	adds	r3, #16
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	4413      	add	r3, r2
 800e286:	3304      	adds	r3, #4
 800e288:	e00b      	b.n	800e2a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e28a:	7bbb      	ldrb	r3, [r7, #14]
 800e28c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e290:	4613      	mov	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	4413      	add	r3, r2
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <USBD_StdEPReq+0x2d8>
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
 800e2ac:	2b80      	cmp	r3, #128	; 0x80
 800e2ae:	d103      	bne.n	800e2b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	e00e      	b.n	800e2d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f003 fd32 	bl	8011d26 <USBD_LL_IsStallEP>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d003      	beq.n	800e2d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2202      	movs	r2, #2
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fbd1 	bl	800ea84 <USBD_CtlSendData>
              break;
 800e2e2:	e004      	b.n	800e2ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fb5b 	bl	800e9a2 <USBD_CtlError>
              break;
 800e2ec:	bf00      	nop
          }
          break;
 800e2ee:	e004      	b.n	800e2fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fb55 	bl	800e9a2 <USBD_CtlError>
          break;
 800e2f8:	bf00      	nop
      }
      break;
 800e2fa:	e005      	b.n	800e308 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fb4f 	bl	800e9a2 <USBD_CtlError>
      break;
 800e304:	e000      	b.n	800e308 <USBD_StdEPReq+0x330>
      break;
 800e306:	bf00      	nop
  }

  return ret;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
	...

0800e314 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e31e:	2300      	movs	r3, #0
 800e320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	885b      	ldrh	r3, [r3, #2]
 800e32e:	0a1b      	lsrs	r3, r3, #8
 800e330:	b29b      	uxth	r3, r3
 800e332:	3b01      	subs	r3, #1
 800e334:	2b06      	cmp	r3, #6
 800e336:	f200 8128 	bhi.w	800e58a <USBD_GetDescriptor+0x276>
 800e33a:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <USBD_GetDescriptor+0x2c>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e35d 	.word	0x0800e35d
 800e344:	0800e375 	.word	0x0800e375
 800e348:	0800e3b5 	.word	0x0800e3b5
 800e34c:	0800e58b 	.word	0x0800e58b
 800e350:	0800e58b 	.word	0x0800e58b
 800e354:	0800e52b 	.word	0x0800e52b
 800e358:	0800e557 	.word	0x0800e557
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	7c12      	ldrb	r2, [r2, #16]
 800e368:	f107 0108 	add.w	r1, r7, #8
 800e36c:	4610      	mov	r0, r2
 800e36e:	4798      	blx	r3
 800e370:	60f8      	str	r0, [r7, #12]
      break;
 800e372:	e112      	b.n	800e59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7c1b      	ldrb	r3, [r3, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10d      	bne.n	800e398 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e384:	f107 0208 	add.w	r2, r7, #8
 800e388:	4610      	mov	r0, r2
 800e38a:	4798      	blx	r3
 800e38c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3301      	adds	r3, #1
 800e392:	2202      	movs	r2, #2
 800e394:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e396:	e100      	b.n	800e59a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a0:	f107 0208 	add.w	r2, r7, #8
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4798      	blx	r3
 800e3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	701a      	strb	r2, [r3, #0]
      break;
 800e3b2:	e0f2      	b.n	800e59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	885b      	ldrh	r3, [r3, #2]
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	2b05      	cmp	r3, #5
 800e3bc:	f200 80ac 	bhi.w	800e518 <USBD_GetDescriptor+0x204>
 800e3c0:	a201      	add	r2, pc, #4	; (adr r2, 800e3c8 <USBD_GetDescriptor+0xb4>)
 800e3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c6:	bf00      	nop
 800e3c8:	0800e3e1 	.word	0x0800e3e1
 800e3cc:	0800e415 	.word	0x0800e415
 800e3d0:	0800e449 	.word	0x0800e449
 800e3d4:	0800e47d 	.word	0x0800e47d
 800e3d8:	0800e4b1 	.word	0x0800e4b1
 800e3dc:	0800e4e5 	.word	0x0800e4e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00b      	beq.n	800e404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	7c12      	ldrb	r2, [r2, #16]
 800e3f8:	f107 0108 	add.w	r1, r7, #8
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
 800e400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e402:	e091      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 facb 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e40c:	7afb      	ldrb	r3, [r7, #11]
 800e40e:	3301      	adds	r3, #1
 800e410:	72fb      	strb	r3, [r7, #11]
          break;
 800e412:	e089      	b.n	800e528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00b      	beq.n	800e438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	7c12      	ldrb	r2, [r2, #16]
 800e42c:	f107 0108 	add.w	r1, r7, #8
 800e430:	4610      	mov	r0, r2
 800e432:	4798      	blx	r3
 800e434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e436:	e077      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fab1 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e440:	7afb      	ldrb	r3, [r7, #11]
 800e442:	3301      	adds	r3, #1
 800e444:	72fb      	strb	r3, [r7, #11]
          break;
 800e446:	e06f      	b.n	800e528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00b      	beq.n	800e46c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	7c12      	ldrb	r2, [r2, #16]
 800e460:	f107 0108 	add.w	r1, r7, #8
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
 800e468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e46a:	e05d      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa97 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e474:	7afb      	ldrb	r3, [r7, #11]
 800e476:	3301      	adds	r3, #1
 800e478:	72fb      	strb	r3, [r7, #11]
          break;
 800e47a:	e055      	b.n	800e528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	7c12      	ldrb	r2, [r2, #16]
 800e494:	f107 0108 	add.w	r1, r7, #8
 800e498:	4610      	mov	r0, r2
 800e49a:	4798      	blx	r3
 800e49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e49e:	e043      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4a0:	6839      	ldr	r1, [r7, #0]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fa7d 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e4a8:	7afb      	ldrb	r3, [r7, #11]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ae:	e03b      	b.n	800e528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c2:	695b      	ldr	r3, [r3, #20]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	7c12      	ldrb	r2, [r2, #16]
 800e4c8:	f107 0108 	add.w	r1, r7, #8
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	4798      	blx	r3
 800e4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4d2:	e029      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fa63 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e4dc:	7afb      	ldrb	r3, [r7, #11]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4e2:	e021      	b.n	800e528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00b      	beq.n	800e508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f6:	699b      	ldr	r3, [r3, #24]
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	7c12      	ldrb	r2, [r2, #16]
 800e4fc:	f107 0108 	add.w	r1, r7, #8
 800e500:	4610      	mov	r0, r2
 800e502:	4798      	blx	r3
 800e504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e506:	e00f      	b.n	800e528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e508:	6839      	ldr	r1, [r7, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fa49 	bl	800e9a2 <USBD_CtlError>
            err++;
 800e510:	7afb      	ldrb	r3, [r7, #11]
 800e512:	3301      	adds	r3, #1
 800e514:	72fb      	strb	r3, [r7, #11]
          break;
 800e516:	e007      	b.n	800e528 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fa41 	bl	800e9a2 <USBD_CtlError>
          err++;
 800e520:	7afb      	ldrb	r3, [r7, #11]
 800e522:	3301      	adds	r3, #1
 800e524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e526:	bf00      	nop
      }
      break;
 800e528:	e037      	b.n	800e59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	7c1b      	ldrb	r3, [r3, #16]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d109      	bne.n	800e546 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e53a:	f107 0208 	add.w	r2, r7, #8
 800e53e:	4610      	mov	r0, r2
 800e540:	4798      	blx	r3
 800e542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e544:	e029      	b.n	800e59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fa2a 	bl	800e9a2 <USBD_CtlError>
        err++;
 800e54e:	7afb      	ldrb	r3, [r7, #11]
 800e550:	3301      	adds	r3, #1
 800e552:	72fb      	strb	r3, [r7, #11]
      break;
 800e554:	e021      	b.n	800e59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	7c1b      	ldrb	r3, [r3, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d10d      	bne.n	800e57a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	f107 0208 	add.w	r2, r7, #8
 800e56a:	4610      	mov	r0, r2
 800e56c:	4798      	blx	r3
 800e56e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	3301      	adds	r3, #1
 800e574:	2207      	movs	r2, #7
 800e576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e578:	e00f      	b.n	800e59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fa10 	bl	800e9a2 <USBD_CtlError>
        err++;
 800e582:	7afb      	ldrb	r3, [r7, #11]
 800e584:	3301      	adds	r3, #1
 800e586:	72fb      	strb	r3, [r7, #11]
      break;
 800e588:	e007      	b.n	800e59a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa08 	bl	800e9a2 <USBD_CtlError>
      err++;
 800e592:	7afb      	ldrb	r3, [r7, #11]
 800e594:	3301      	adds	r3, #1
 800e596:	72fb      	strb	r3, [r7, #11]
      break;
 800e598:	bf00      	nop
  }

  if (err != 0U)
 800e59a:	7afb      	ldrb	r3, [r7, #11]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11e      	bne.n	800e5de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	88db      	ldrh	r3, [r3, #6]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d016      	beq.n	800e5d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e5a8:	893b      	ldrh	r3, [r7, #8]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00e      	beq.n	800e5cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	88da      	ldrh	r2, [r3, #6]
 800e5b2:	893b      	ldrh	r3, [r7, #8]
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	bf28      	it	cs
 800e5b8:	4613      	movcs	r3, r2
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e5be:	893b      	ldrh	r3, [r7, #8]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	68f9      	ldr	r1, [r7, #12]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 fa5d 	bl	800ea84 <USBD_CtlSendData>
 800e5ca:	e009      	b.n	800e5e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f9e7 	bl	800e9a2 <USBD_CtlError>
 800e5d4:	e004      	b.n	800e5e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fa91 	bl	800eafe <USBD_CtlSendStatus>
 800e5dc:	e000      	b.n	800e5e0 <USBD_GetDescriptor+0x2cc>
    return;
 800e5de:	bf00      	nop
  }
}
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop

0800e5e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	889b      	ldrh	r3, [r3, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d131      	bne.n	800e65e <USBD_SetAddress+0x76>
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	88db      	ldrh	r3, [r3, #6]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d12d      	bne.n	800e65e <USBD_SetAddress+0x76>
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	885b      	ldrh	r3, [r3, #2]
 800e606:	2b7f      	cmp	r3, #127	; 0x7f
 800e608:	d829      	bhi.n	800e65e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	885b      	ldrh	r3, [r3, #2]
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d104      	bne.n	800e62c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f9bc 	bl	800e9a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e62a:	e01d      	b.n	800e668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7bfa      	ldrb	r2, [r7, #15]
 800e630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f003 fba0 	bl	8011d7e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fa5d 	bl	800eafe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d004      	beq.n	800e654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2202      	movs	r2, #2
 800e64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e652:	e009      	b.n	800e668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e65c:	e004      	b.n	800e668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f99e 	bl	800e9a2 <USBD_CtlError>
  }
}
 800e666:	bf00      	nop
 800e668:	bf00      	nop
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e67a:	2300      	movs	r3, #0
 800e67c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	885b      	ldrh	r3, [r3, #2]
 800e682:	b2da      	uxtb	r2, r3
 800e684:	4b4e      	ldr	r3, [pc, #312]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e688:	4b4d      	ldr	r3, [pc, #308]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d905      	bls.n	800e69c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f985 	bl	800e9a2 <USBD_CtlError>
    return USBD_FAIL;
 800e698:	2303      	movs	r3, #3
 800e69a:	e08c      	b.n	800e7b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d002      	beq.n	800e6ae <USBD_SetConfig+0x3e>
 800e6a8:	2b03      	cmp	r3, #3
 800e6aa:	d029      	beq.n	800e700 <USBD_SetConfig+0x90>
 800e6ac:	e075      	b.n	800e79a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e6ae:	4b44      	ldr	r3, [pc, #272]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d020      	beq.n	800e6f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e6b6:	4b42      	ldr	r3, [pc, #264]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e6c0:	4b3f      	ldr	r3, [pc, #252]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7fe ffe6 	bl	800d698 <USBD_SetClassConfig>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d008      	beq.n	800e6e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f962 	bl	800e9a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e6e6:	e065      	b.n	800e7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fa08 	bl	800eafe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2203      	movs	r2, #3
 800e6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e6f6:	e05d      	b.n	800e7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fa00 	bl	800eafe <USBD_CtlSendStatus>
      break;
 800e6fe:	e059      	b.n	800e7b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e700:	4b2f      	ldr	r3, [pc, #188]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d112      	bne.n	800e72e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2202      	movs	r2, #2
 800e70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e710:	4b2b      	ldr	r3, [pc, #172]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	461a      	mov	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e71a:	4b29      	ldr	r3, [pc, #164]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7fe ffd5 	bl	800d6d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f9e9 	bl	800eafe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e72c:	e042      	b.n	800e7b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e72e:	4b24      	ldr	r3, [pc, #144]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d02a      	beq.n	800e792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	b2db      	uxtb	r3, r3
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7fe ffc3 	bl	800d6d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e74a:	4b1d      	ldr	r3, [pc, #116]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	461a      	mov	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e754:	4b1a      	ldr	r3, [pc, #104]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	4619      	mov	r1, r3
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7fe ff9c 	bl	800d698 <USBD_SetClassConfig>
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00f      	beq.n	800e78a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e76a:	6839      	ldr	r1, [r7, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f918 	bl	800e9a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7fe ffa8 	bl	800d6d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2202      	movs	r2, #2
 800e784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e788:	e014      	b.n	800e7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 f9b7 	bl	800eafe <USBD_CtlSendStatus>
      break;
 800e790:	e010      	b.n	800e7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f9b3 	bl	800eafe <USBD_CtlSendStatus>
      break;
 800e798:	e00c      	b.n	800e7b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f900 	bl	800e9a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7a2:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <USBD_SetConfig+0x150>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7fe ff91 	bl	800d6d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b2:	bf00      	nop
  }

  return ret;
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20000e3c 	.word	0x20000e3c

0800e7c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	88db      	ldrh	r3, [r3, #6]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d004      	beq.n	800e7e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f8e2 	bl	800e9a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e7de:	e023      	b.n	800e828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	dc02      	bgt.n	800e7f2 <USBD_GetConfig+0x2e>
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dc03      	bgt.n	800e7f8 <USBD_GetConfig+0x34>
 800e7f0:	e015      	b.n	800e81e <USBD_GetConfig+0x5a>
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d00b      	beq.n	800e80e <USBD_GetConfig+0x4a>
 800e7f6:	e012      	b.n	800e81e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	3308      	adds	r3, #8
 800e802:	2201      	movs	r2, #1
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f93c 	bl	800ea84 <USBD_CtlSendData>
        break;
 800e80c:	e00c      	b.n	800e828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	3304      	adds	r3, #4
 800e812:	2201      	movs	r2, #1
 800e814:	4619      	mov	r1, r3
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f934 	bl	800ea84 <USBD_CtlSendData>
        break;
 800e81c:	e004      	b.n	800e828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f8be 	bl	800e9a2 <USBD_CtlError>
        break;
 800e826:	bf00      	nop
}
 800e828:	bf00      	nop
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e840:	b2db      	uxtb	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	2b02      	cmp	r3, #2
 800e846:	d81e      	bhi.n	800e886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	88db      	ldrh	r3, [r3, #6]
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d004      	beq.n	800e85a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f8a5 	bl	800e9a2 <USBD_CtlError>
        break;
 800e858:	e01a      	b.n	800e890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e866:	2b00      	cmp	r3, #0
 800e868:	d005      	beq.n	800e876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	f043 0202 	orr.w	r2, r3, #2
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	330c      	adds	r3, #12
 800e87a:	2202      	movs	r2, #2
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f900 	bl	800ea84 <USBD_CtlSendData>
      break;
 800e884:	e004      	b.n	800e890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e886:	6839      	ldr	r1, [r7, #0]
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f88a 	bl	800e9a2 <USBD_CtlError>
      break;
 800e88e:	bf00      	nop
  }
}
 800e890:	bf00      	nop
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	885b      	ldrh	r3, [r3, #2]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d107      	bne.n	800e8ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f923 	bl	800eafe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e8b8:	e013      	b.n	800e8e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	885b      	ldrh	r3, [r3, #2]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d10b      	bne.n	800e8da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	889b      	ldrh	r3, [r3, #4]
 800e8c6:	0a1b      	lsrs	r3, r3, #8
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f913 	bl	800eafe <USBD_CtlSendStatus>
}
 800e8d8:	e003      	b.n	800e8e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f860 	bl	800e9a2 <USBD_CtlError>
}
 800e8e2:	bf00      	nop
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b082      	sub	sp, #8
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d80b      	bhi.n	800e91a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	885b      	ldrh	r3, [r3, #2]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d10c      	bne.n	800e924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f8f3 	bl	800eafe <USBD_CtlSendStatus>
      }
      break;
 800e918:	e004      	b.n	800e924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f840 	bl	800e9a2 <USBD_CtlError>
      break;
 800e922:	e000      	b.n	800e926 <USBD_ClrFeature+0x3c>
      break;
 800e924:	bf00      	nop
  }
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	781a      	ldrb	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3301      	adds	r3, #1
 800e948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3301      	adds	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f7ff fa40 	bl	800ddde <SWAPBYTE>
 800e95e:	4603      	mov	r3, r0
 800e960:	461a      	mov	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	3301      	adds	r3, #1
 800e96a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3301      	adds	r3, #1
 800e970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f7ff fa33 	bl	800ddde <SWAPBYTE>
 800e978:	4603      	mov	r3, r0
 800e97a:	461a      	mov	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	3301      	adds	r3, #1
 800e984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	3301      	adds	r3, #1
 800e98a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f7ff fa26 	bl	800ddde <SWAPBYTE>
 800e992:	4603      	mov	r3, r0
 800e994:	461a      	mov	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	80da      	strh	r2, [r3, #6]
}
 800e99a:	bf00      	nop
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9ac:	2180      	movs	r1, #128	; 0x80
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f003 f97b 	bl	8011caa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f003 f977 	bl	8011caa <USBD_LL_StallEP>
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d036      	beq.n	800ea48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e9de:	6938      	ldr	r0, [r7, #16]
 800e9e0:	f000 f836 	bl	800ea50 <USBD_GetLen>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	3301      	adds	r3, #1
 800ea02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea04:	7dfb      	ldrb	r3, [r7, #23]
 800ea06:	68ba      	ldr	r2, [r7, #8]
 800ea08:	4413      	add	r3, r2
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea0e:	7dfb      	ldrb	r3, [r7, #23]
 800ea10:	3301      	adds	r3, #1
 800ea12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea14:	e013      	b.n	800ea3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	7812      	ldrb	r2, [r2, #0]
 800ea20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	3301      	adds	r3, #1
 800ea26:	613b      	str	r3, [r7, #16]
    idx++;
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	4413      	add	r3, r2
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea38:	7dfb      	ldrb	r3, [r7, #23]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1e7      	bne.n	800ea16 <USBD_GetString+0x52>
 800ea46:	e000      	b.n	800ea4a <USBD_GetString+0x86>
    return;
 800ea48:	bf00      	nop
  }
}
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ea60:	e005      	b.n	800ea6e <USBD_GetLen+0x1e>
  {
    len++;
 800ea62:	7bfb      	ldrb	r3, [r7, #15]
 800ea64:	3301      	adds	r3, #1
 800ea66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1f5      	bne.n	800ea62 <USBD_GetLen+0x12>
  }

  return len;
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2202      	movs	r2, #2
 800ea94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f003 f986 	bl	8011dbc <USBD_LL_Transmit>

  return USBD_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	60f8      	str	r0, [r7, #12]
 800eac2:	60b9      	str	r1, [r7, #8]
 800eac4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	2100      	movs	r1, #0
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f003 f975 	bl	8011dbc <USBD_LL_Transmit>

  return USBD_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	2100      	movs	r1, #0
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f003 f985 	bl	8011dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b082      	sub	sp, #8
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2204      	movs	r2, #4
 800eb0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb0e:	2300      	movs	r3, #0
 800eb10:	2200      	movs	r2, #0
 800eb12:	2100      	movs	r1, #0
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f003 f951 	bl	8011dbc <USBD_LL_Transmit>

  return USBD_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2205      	movs	r2, #5
 800eb30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb34:	2300      	movs	r3, #0
 800eb36:	2200      	movs	r2, #0
 800eb38:	2100      	movs	r1, #0
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f003 f95f 	bl	8011dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	4a08      	ldr	r2, [pc, #32]	; (800eb7c <disk_status+0x30>)
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	4413      	add	r3, r2
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	79fa      	ldrb	r2, [r7, #7]
 800eb64:	4905      	ldr	r1, [pc, #20]	; (800eb7c <disk_status+0x30>)
 800eb66:	440a      	add	r2, r1
 800eb68:	7a12      	ldrb	r2, [r2, #8]
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	4798      	blx	r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	20000e68 	.word	0x20000e68

0800eb80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	4a0d      	ldr	r2, [pc, #52]	; (800ebc8 <disk_initialize+0x48>)
 800eb92:	5cd3      	ldrb	r3, [r2, r3]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d111      	bne.n	800ebbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	4a0b      	ldr	r2, [pc, #44]	; (800ebc8 <disk_initialize+0x48>)
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	4a09      	ldr	r2, [pc, #36]	; (800ebc8 <disk_initialize+0x48>)
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4413      	add	r3, r2
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	79fa      	ldrb	r2, [r7, #7]
 800ebae:	4906      	ldr	r1, [pc, #24]	; (800ebc8 <disk_initialize+0x48>)
 800ebb0:	440a      	add	r2, r1
 800ebb2:	7a12      	ldrb	r2, [r2, #8]
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	4798      	blx	r3
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000e68 	.word	0x20000e68

0800ebcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	607a      	str	r2, [r7, #4]
 800ebd6:	603b      	str	r3, [r7, #0]
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <disk_read+0x3c>)
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	4413      	add	r3, r2
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	689c      	ldr	r4, [r3, #8]
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	4a07      	ldr	r2, [pc, #28]	; (800ec08 <disk_read+0x3c>)
 800ebec:	4413      	add	r3, r2
 800ebee:	7a18      	ldrb	r0, [r3, #8]
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	68b9      	ldr	r1, [r7, #8]
 800ebf6:	47a0      	blx	r4
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	75fb      	strb	r3, [r7, #23]
  return res;
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd90      	pop	{r4, r7, pc}
 800ec06:	bf00      	nop
 800ec08:	20000e68 	.word	0x20000e68

0800ec0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ec0c:	b590      	push	{r4, r7, lr}
 800ec0e:	b087      	sub	sp, #28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60b9      	str	r1, [r7, #8]
 800ec14:	607a      	str	r2, [r7, #4]
 800ec16:	603b      	str	r3, [r7, #0]
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
 800ec1e:	4a0a      	ldr	r2, [pc, #40]	; (800ec48 <disk_write+0x3c>)
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	68dc      	ldr	r4, [r3, #12]
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	4a07      	ldr	r2, [pc, #28]	; (800ec48 <disk_write+0x3c>)
 800ec2c:	4413      	add	r3, r2
 800ec2e:	7a18      	ldrb	r0, [r3, #8]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	68b9      	ldr	r1, [r7, #8]
 800ec36:	47a0      	blx	r4
 800ec38:	4603      	mov	r3, r0
 800ec3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	371c      	adds	r7, #28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd90      	pop	{r4, r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20000e68 	.word	0x20000e68

0800ec4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	603a      	str	r2, [r7, #0]
 800ec56:	71fb      	strb	r3, [r7, #7]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	4a09      	ldr	r2, [pc, #36]	; (800ec84 <disk_ioctl+0x38>)
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4413      	add	r3, r2
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	691b      	ldr	r3, [r3, #16]
 800ec68:	79fa      	ldrb	r2, [r7, #7]
 800ec6a:	4906      	ldr	r1, [pc, #24]	; (800ec84 <disk_ioctl+0x38>)
 800ec6c:	440a      	add	r2, r1
 800ec6e:	7a10      	ldrb	r0, [r2, #8]
 800ec70:	79b9      	ldrb	r1, [r7, #6]
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	4798      	blx	r3
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]
  return res;
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	20000e68 	.word	0x20000e68

0800ec88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3301      	adds	r3, #1
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ec98:	89fb      	ldrh	r3, [r7, #14]
 800ec9a:	021b      	lsls	r3, r3, #8
 800ec9c:	b21a      	sxth	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	b21b      	sxth	r3, r3
 800eca4:	4313      	orrs	r3, r2
 800eca6:	b21b      	sxth	r3, r3
 800eca8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ecaa:	89fb      	ldrh	r3, [r7, #14]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3303      	adds	r3, #3
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	021b      	lsls	r3, r3, #8
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	3202      	adds	r2, #2
 800ecd0:	7812      	ldrb	r2, [r2, #0]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	021b      	lsls	r3, r3, #8
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	3201      	adds	r2, #1
 800ecde:	7812      	ldrb	r2, [r2, #0]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	021b      	lsls	r3, r3, #8
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	7812      	ldrb	r2, [r2, #0]
 800ecec:	4313      	orrs	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
	return rv;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b083      	sub	sp, #12
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	887a      	ldrh	r2, [r7, #2]
 800ed12:	b2d2      	uxtb	r2, r2
 800ed14:	701a      	strb	r2, [r3, #0]
 800ed16:	887b      	ldrh	r3, [r7, #2]
 800ed18:	0a1b      	lsrs	r3, r3, #8
 800ed1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	607a      	str	r2, [r7, #4]
 800ed22:	887a      	ldrh	r2, [r7, #2]
 800ed24:	b2d2      	uxtb	r2, r2
 800ed26:	701a      	strb	r2, [r3, #0]
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	607a      	str	r2, [r7, #4]
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	b2d2      	uxtb	r2, r2
 800ed48:	701a      	strb	r2, [r3, #0]
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	0a1b      	lsrs	r3, r3, #8
 800ed4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	607a      	str	r2, [r7, #4]
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	b2d2      	uxtb	r2, r2
 800ed5a:	701a      	strb	r2, [r3, #0]
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	0a1b      	lsrs	r3, r3, #8
 800ed60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	b2d2      	uxtb	r2, r2
 800ed6c:	701a      	strb	r2, [r3, #0]
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	0a1b      	lsrs	r3, r3, #8
 800ed72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	607a      	str	r2, [r7, #4]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	b2d2      	uxtb	r2, r2
 800ed7e:	701a      	strb	r2, [r3, #0]
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ed8c:	b480      	push	{r7}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00d      	beq.n	800edc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eda6:	693a      	ldr	r2, [r7, #16]
 800eda8:	1c53      	adds	r3, r2, #1
 800edaa:	613b      	str	r3, [r7, #16]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	1c59      	adds	r1, r3, #1
 800edb0:	6179      	str	r1, [r7, #20]
 800edb2:	7812      	ldrb	r2, [r2, #0]
 800edb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3b01      	subs	r3, #1
 800edba:	607b      	str	r3, [r7, #4]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1f1      	bne.n	800eda6 <mem_cpy+0x1a>
	}
}
 800edc2:	bf00      	nop
 800edc4:	371c      	adds	r7, #28
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800edce:	b480      	push	{r7}
 800edd0:	b087      	sub	sp, #28
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	60f8      	str	r0, [r7, #12]
 800edd6:	60b9      	str	r1, [r7, #8]
 800edd8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	617a      	str	r2, [r7, #20]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	b2d2      	uxtb	r2, r2
 800ede8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	3b01      	subs	r3, #1
 800edee:	607b      	str	r3, [r7, #4]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1f3      	bne.n	800edde <mem_set+0x10>
}
 800edf6:	bf00      	nop
 800edf8:	bf00      	nop
 800edfa:	371c      	adds	r7, #28
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ee04:	b480      	push	{r7}
 800ee06:	b089      	sub	sp, #36	; 0x24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	61fb      	str	r3, [r7, #28]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	61fa      	str	r2, [r7, #28]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	4619      	mov	r1, r3
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	1c5a      	adds	r2, r3, #1
 800ee2a:	61ba      	str	r2, [r7, #24]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	1acb      	subs	r3, r1, r3
 800ee30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	3b01      	subs	r3, #1
 800ee36:	607b      	str	r3, [r7, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <mem_cmp+0x40>
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d0eb      	beq.n	800ee1c <mem_cmp+0x18>

	return r;
 800ee44:	697b      	ldr	r3, [r7, #20]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3724      	adds	r7, #36	; 0x24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ee52:	b480      	push	{r7}
 800ee54:	b083      	sub	sp, #12
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ee5c:	e002      	b.n	800ee64 <chk_chr+0x12>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	3301      	adds	r3, #1
 800ee62:	607b      	str	r3, [r7, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <chk_chr+0x26>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d1f2      	bne.n	800ee5e <chk_chr+0xc>
	return *str;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee92:	2300      	movs	r3, #0
 800ee94:	60bb      	str	r3, [r7, #8]
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	e029      	b.n	800eef0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ee9c:	4a27      	ldr	r2, [pc, #156]	; (800ef3c <chk_lock+0xb4>)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	011b      	lsls	r3, r3, #4
 800eea2:	4413      	add	r3, r2
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d01d      	beq.n	800eee6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eeaa:	4a24      	ldr	r2, [pc, #144]	; (800ef3c <chk_lock+0xb4>)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	4413      	add	r3, r2
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d116      	bne.n	800eeea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eebc:	4a1f      	ldr	r2, [pc, #124]	; (800ef3c <chk_lock+0xb4>)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	011b      	lsls	r3, r3, #4
 800eec2:	4413      	add	r3, r2
 800eec4:	3304      	adds	r3, #4
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eecc:	429a      	cmp	r2, r3
 800eece:	d10c      	bne.n	800eeea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eed0:	4a1a      	ldr	r2, [pc, #104]	; (800ef3c <chk_lock+0xb4>)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	011b      	lsls	r3, r3, #4
 800eed6:	4413      	add	r3, r2
 800eed8:	3308      	adds	r3, #8
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d102      	bne.n	800eeea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eee4:	e007      	b.n	800eef6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eee6:	2301      	movs	r3, #1
 800eee8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3301      	adds	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d9d2      	bls.n	800ee9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d109      	bne.n	800ef10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d102      	bne.n	800ef08 <chk_lock+0x80>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d101      	bne.n	800ef0c <chk_lock+0x84>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e010      	b.n	800ef2e <chk_lock+0xa6>
 800ef0c:	2312      	movs	r3, #18
 800ef0e:	e00e      	b.n	800ef2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d108      	bne.n	800ef28 <chk_lock+0xa0>
 800ef16:	4a09      	ldr	r2, [pc, #36]	; (800ef3c <chk_lock+0xb4>)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	011b      	lsls	r3, r3, #4
 800ef1c:	4413      	add	r3, r2
 800ef1e:	330c      	adds	r3, #12
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef26:	d101      	bne.n	800ef2c <chk_lock+0xa4>
 800ef28:	2310      	movs	r3, #16
 800ef2a:	e000      	b.n	800ef2e <chk_lock+0xa6>
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	20000e48 	.word	0x20000e48

0800ef40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	e002      	b.n	800ef52 <enq_lock+0x12>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	607b      	str	r3, [r7, #4]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d806      	bhi.n	800ef66 <enq_lock+0x26>
 800ef58:	4a09      	ldr	r2, [pc, #36]	; (800ef80 <enq_lock+0x40>)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	011b      	lsls	r3, r3, #4
 800ef5e:	4413      	add	r3, r2
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1f2      	bne.n	800ef4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	bf14      	ite	ne
 800ef6c:	2301      	movne	r3, #1
 800ef6e:	2300      	moveq	r3, #0
 800ef70:	b2db      	uxtb	r3, r3
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	20000e48 	.word	0x20000e48

0800ef84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	e01f      	b.n	800efd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ef94:	4a41      	ldr	r2, [pc, #260]	; (800f09c <inc_lock+0x118>)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	011b      	lsls	r3, r3, #4
 800ef9a:	4413      	add	r3, r2
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d113      	bne.n	800efce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800efa6:	4a3d      	ldr	r2, [pc, #244]	; (800f09c <inc_lock+0x118>)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	011b      	lsls	r3, r3, #4
 800efac:	4413      	add	r3, r2
 800efae:	3304      	adds	r3, #4
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d109      	bne.n	800efce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800efba:	4a38      	ldr	r2, [pc, #224]	; (800f09c <inc_lock+0x118>)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	011b      	lsls	r3, r3, #4
 800efc0:	4413      	add	r3, r2
 800efc2:	3308      	adds	r3, #8
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800efca:	429a      	cmp	r2, r3
 800efcc:	d006      	beq.n	800efdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3301      	adds	r3, #1
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d9dc      	bls.n	800ef94 <inc_lock+0x10>
 800efda:	e000      	b.n	800efde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800efdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d132      	bne.n	800f04a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efe4:	2300      	movs	r3, #0
 800efe6:	60fb      	str	r3, [r7, #12]
 800efe8:	e002      	b.n	800eff0 <inc_lock+0x6c>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3301      	adds	r3, #1
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d806      	bhi.n	800f004 <inc_lock+0x80>
 800eff6:	4a29      	ldr	r2, [pc, #164]	; (800f09c <inc_lock+0x118>)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	4413      	add	r3, r2
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1f2      	bne.n	800efea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b02      	cmp	r3, #2
 800f008:	d101      	bne.n	800f00e <inc_lock+0x8a>
 800f00a:	2300      	movs	r3, #0
 800f00c:	e040      	b.n	800f090 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	4922      	ldr	r1, [pc, #136]	; (800f09c <inc_lock+0x118>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	440b      	add	r3, r1
 800f01a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689a      	ldr	r2, [r3, #8]
 800f020:	491e      	ldr	r1, [pc, #120]	; (800f09c <inc_lock+0x118>)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	011b      	lsls	r3, r3, #4
 800f026:	440b      	add	r3, r1
 800f028:	3304      	adds	r3, #4
 800f02a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	695a      	ldr	r2, [r3, #20]
 800f030:	491a      	ldr	r1, [pc, #104]	; (800f09c <inc_lock+0x118>)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	011b      	lsls	r3, r3, #4
 800f036:	440b      	add	r3, r1
 800f038:	3308      	adds	r3, #8
 800f03a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f03c:	4a17      	ldr	r2, [pc, #92]	; (800f09c <inc_lock+0x118>)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	011b      	lsls	r3, r3, #4
 800f042:	4413      	add	r3, r2
 800f044:	330c      	adds	r3, #12
 800f046:	2200      	movs	r2, #0
 800f048:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d009      	beq.n	800f064 <inc_lock+0xe0>
 800f050:	4a12      	ldr	r2, [pc, #72]	; (800f09c <inc_lock+0x118>)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	011b      	lsls	r3, r3, #4
 800f056:	4413      	add	r3, r2
 800f058:	330c      	adds	r3, #12
 800f05a:	881b      	ldrh	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <inc_lock+0xe0>
 800f060:	2300      	movs	r3, #0
 800f062:	e015      	b.n	800f090 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d108      	bne.n	800f07c <inc_lock+0xf8>
 800f06a:	4a0c      	ldr	r2, [pc, #48]	; (800f09c <inc_lock+0x118>)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	011b      	lsls	r3, r3, #4
 800f070:	4413      	add	r3, r2
 800f072:	330c      	adds	r3, #12
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	3301      	adds	r3, #1
 800f078:	b29a      	uxth	r2, r3
 800f07a:	e001      	b.n	800f080 <inc_lock+0xfc>
 800f07c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f080:	4906      	ldr	r1, [pc, #24]	; (800f09c <inc_lock+0x118>)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	011b      	lsls	r3, r3, #4
 800f086:	440b      	add	r3, r1
 800f088:	330c      	adds	r3, #12
 800f08a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	3301      	adds	r3, #1
}
 800f090:	4618      	mov	r0, r3
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	20000e48 	.word	0x20000e48

0800f0a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	607b      	str	r3, [r7, #4]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d825      	bhi.n	800f100 <dec_lock+0x60>
		n = Files[i].ctr;
 800f0b4:	4a17      	ldr	r2, [pc, #92]	; (800f114 <dec_lock+0x74>)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	011b      	lsls	r3, r3, #4
 800f0ba:	4413      	add	r3, r2
 800f0bc:	330c      	adds	r3, #12
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f0c2:	89fb      	ldrh	r3, [r7, #14]
 800f0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0c8:	d101      	bne.n	800f0ce <dec_lock+0x2e>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f0ce:	89fb      	ldrh	r3, [r7, #14]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <dec_lock+0x3a>
 800f0d4:	89fb      	ldrh	r3, [r7, #14]
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f0da:	4a0e      	ldr	r2, [pc, #56]	; (800f114 <dec_lock+0x74>)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	011b      	lsls	r3, r3, #4
 800f0e0:	4413      	add	r3, r2
 800f0e2:	330c      	adds	r3, #12
 800f0e4:	89fa      	ldrh	r2, [r7, #14]
 800f0e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f0e8:	89fb      	ldrh	r3, [r7, #14]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d105      	bne.n	800f0fa <dec_lock+0x5a>
 800f0ee:	4a09      	ldr	r2, [pc, #36]	; (800f114 <dec_lock+0x74>)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	011b      	lsls	r3, r3, #4
 800f0f4:	4413      	add	r3, r2
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	737b      	strb	r3, [r7, #13]
 800f0fe:	e001      	b.n	800f104 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f100:	2302      	movs	r3, #2
 800f102:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f104:	7b7b      	ldrb	r3, [r7, #13]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3714      	adds	r7, #20
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	20000e48 	.word	0x20000e48

0800f118 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f120:	2300      	movs	r3, #0
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	e010      	b.n	800f148 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f126:	4a0d      	ldr	r2, [pc, #52]	; (800f15c <clear_lock+0x44>)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	011b      	lsls	r3, r3, #4
 800f12c:	4413      	add	r3, r2
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	d105      	bne.n	800f142 <clear_lock+0x2a>
 800f136:	4a09      	ldr	r2, [pc, #36]	; (800f15c <clear_lock+0x44>)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	011b      	lsls	r3, r3, #4
 800f13c:	4413      	add	r3, r2
 800f13e:	2200      	movs	r2, #0
 800f140:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3301      	adds	r3, #1
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d9eb      	bls.n	800f126 <clear_lock+0xe>
	}
}
 800f14e:	bf00      	nop
 800f150:	bf00      	nop
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	20000e48 	.word	0x20000e48

0800f160 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f168:	2300      	movs	r3, #0
 800f16a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	78db      	ldrb	r3, [r3, #3]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d034      	beq.n	800f1de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f178:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7858      	ldrb	r0, [r3, #1]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f184:	2301      	movs	r3, #1
 800f186:	697a      	ldr	r2, [r7, #20]
 800f188:	f7ff fd40 	bl	800ec0c <disk_write>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f192:	2301      	movs	r3, #1
 800f194:	73fb      	strb	r3, [r7, #15]
 800f196:	e022      	b.n	800f1de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	1ad2      	subs	r2, r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	699b      	ldr	r3, [r3, #24]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d217      	bcs.n	800f1de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	789b      	ldrb	r3, [r3, #2]
 800f1b2:	613b      	str	r3, [r7, #16]
 800f1b4:	e010      	b.n	800f1d8 <sync_window+0x78>
					wsect += fs->fsize;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	4413      	add	r3, r2
 800f1be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	7858      	ldrb	r0, [r3, #1]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	f7ff fd1d 	bl	800ec0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	613b      	str	r3, [r7, #16]
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d8eb      	bhi.n	800f1b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d01b      	beq.n	800f238 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff ffad 	bl	800f160 <sync_window>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d113      	bne.n	800f238 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7858      	ldrb	r0, [r3, #1]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f21a:	2301      	movs	r3, #1
 800f21c:	683a      	ldr	r2, [r7, #0]
 800f21e:	f7ff fcd5 	bl	800ebcc <disk_read>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d004      	beq.n	800f232 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f228:	f04f 33ff 	mov.w	r3, #4294967295
 800f22c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f22e:	2301      	movs	r3, #1
 800f230:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f238:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
	...

0800f244 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff ff87 	bl	800f160 <sync_window>
 800f252:	4603      	mov	r3, r0
 800f254:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d158      	bne.n	800f30e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	2b03      	cmp	r3, #3
 800f262:	d148      	bne.n	800f2f6 <sync_fs+0xb2>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	791b      	ldrb	r3, [r3, #4]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d144      	bne.n	800f2f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	3330      	adds	r3, #48	; 0x30
 800f270:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f274:	2100      	movs	r1, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fda9 	bl	800edce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3330      	adds	r3, #48	; 0x30
 800f280:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f284:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff fd38 	bl	800ecfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	3330      	adds	r3, #48	; 0x30
 800f292:	4921      	ldr	r1, [pc, #132]	; (800f318 <sync_fs+0xd4>)
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fd4d 	bl	800ed34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	3330      	adds	r3, #48	; 0x30
 800f29e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f2a2:	491e      	ldr	r1, [pc, #120]	; (800f31c <sync_fs+0xd8>)
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff fd45 	bl	800ed34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	3330      	adds	r3, #48	; 0x30
 800f2ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	f7ff fd3b 	bl	800ed34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3330      	adds	r3, #48	; 0x30
 800f2c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f7ff fd31 	bl	800ed34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	7858      	ldrb	r0, [r3, #1]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	f7ff fc8e 	bl	800ec0c <disk_write>
			fs->fsi_flag = 0;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	785b      	ldrb	r3, [r3, #1]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7ff fca4 	bl	800ec4c <disk_ioctl>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <sync_fs+0xca>
 800f30a:	2301      	movs	r3, #1
 800f30c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	41615252 	.word	0x41615252
 800f31c:	61417272 	.word	0x61417272

0800f320 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	3b02      	subs	r3, #2
 800f32e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	695b      	ldr	r3, [r3, #20]
 800f334:	3b02      	subs	r3, #2
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d301      	bcc.n	800f340 <clust2sect+0x20>
 800f33c:	2300      	movs	r3, #0
 800f33e:	e008      	b.n	800f352 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	895b      	ldrh	r3, [r3, #10]
 800f344:	461a      	mov	r2, r3
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	fb03 f202 	mul.w	r2, r3, r2
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f350:	4413      	add	r3, r2
}
 800f352:	4618      	mov	r0, r3
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d904      	bls.n	800f37e <get_fat+0x20>
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	695b      	ldr	r3, [r3, #20]
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d302      	bcc.n	800f384 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f37e:	2301      	movs	r3, #1
 800f380:	617b      	str	r3, [r7, #20]
 800f382:	e08f      	b.n	800f4a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d062      	beq.n	800f458 <get_fat+0xfa>
 800f392:	2b03      	cmp	r3, #3
 800f394:	dc7c      	bgt.n	800f490 <get_fat+0x132>
 800f396:	2b01      	cmp	r3, #1
 800f398:	d002      	beq.n	800f3a0 <get_fat+0x42>
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d042      	beq.n	800f424 <get_fat+0xc6>
 800f39e:	e077      	b.n	800f490 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	085b      	lsrs	r3, r3, #1
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	6a1a      	ldr	r2, [r3, #32]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	0a5b      	lsrs	r3, r3, #9
 800f3b6:	4413      	add	r3, r2
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	6938      	ldr	r0, [r7, #16]
 800f3bc:	f7ff ff14 	bl	800f1e8 <move_window>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d167      	bne.n	800f496 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	60fa      	str	r2, [r7, #12]
 800f3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3d0:	693a      	ldr	r2, [r7, #16]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	6a1a      	ldr	r2, [r3, #32]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	0a5b      	lsrs	r3, r3, #9
 800f3e2:	4413      	add	r3, r2
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6938      	ldr	r0, [r7, #16]
 800f3e8:	f7ff fefe 	bl	800f1e8 <move_window>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d153      	bne.n	800f49a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3f8:	693a      	ldr	r2, [r7, #16]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	461a      	mov	r2, r3
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	4313      	orrs	r3, r2
 800f408:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <get_fat+0xbc>
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	091b      	lsrs	r3, r3, #4
 800f418:	e002      	b.n	800f420 <get_fat+0xc2>
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f420:	617b      	str	r3, [r7, #20]
			break;
 800f422:	e03f      	b.n	800f4a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	6a1a      	ldr	r2, [r3, #32]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	0a1b      	lsrs	r3, r3, #8
 800f42c:	4413      	add	r3, r2
 800f42e:	4619      	mov	r1, r3
 800f430:	6938      	ldr	r0, [r7, #16]
 800f432:	f7ff fed9 	bl	800f1e8 <move_window>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d130      	bne.n	800f49e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	005b      	lsls	r3, r3, #1
 800f446:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f44a:	4413      	add	r3, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff fc1b 	bl	800ec88 <ld_word>
 800f452:	4603      	mov	r3, r0
 800f454:	617b      	str	r3, [r7, #20]
			break;
 800f456:	e025      	b.n	800f4a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	6a1a      	ldr	r2, [r3, #32]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	09db      	lsrs	r3, r3, #7
 800f460:	4413      	add	r3, r2
 800f462:	4619      	mov	r1, r3
 800f464:	6938      	ldr	r0, [r7, #16]
 800f466:	f7ff febf 	bl	800f1e8 <move_window>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d118      	bne.n	800f4a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f47e:	4413      	add	r3, r2
 800f480:	4618      	mov	r0, r3
 800f482:	f7ff fc19 	bl	800ecb8 <ld_dword>
 800f486:	4603      	mov	r3, r0
 800f488:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f48c:	617b      	str	r3, [r7, #20]
			break;
 800f48e:	e009      	b.n	800f4a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f490:	2301      	movs	r3, #1
 800f492:	617b      	str	r3, [r7, #20]
 800f494:	e006      	b.n	800f4a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f496:	bf00      	nop
 800f498:	e004      	b.n	800f4a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f49a:	bf00      	nop
 800f49c:	e002      	b.n	800f4a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f49e:	bf00      	nop
 800f4a0:	e000      	b.n	800f4a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f4a2:	bf00      	nop
		}
	}

	return val;
 800f4a4:	697b      	ldr	r3, [r7, #20]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3718      	adds	r7, #24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f4ae:	b590      	push	{r4, r7, lr}
 800f4b0:	b089      	sub	sp, #36	; 0x24
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	f240 80d2 	bls.w	800f66a <put_fat+0x1bc>
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	f080 80cc 	bcs.w	800f66a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	f000 8096 	beq.w	800f608 <put_fat+0x15a>
 800f4dc:	2b03      	cmp	r3, #3
 800f4de:	f300 80cd 	bgt.w	800f67c <put_fat+0x1ce>
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d002      	beq.n	800f4ec <put_fat+0x3e>
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d06e      	beq.n	800f5c8 <put_fat+0x11a>
 800f4ea:	e0c7      	b.n	800f67c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	61bb      	str	r3, [r7, #24]
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	085b      	lsrs	r3, r3, #1
 800f4f4:	69ba      	ldr	r2, [r7, #24]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6a1a      	ldr	r2, [r3, #32]
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	0a5b      	lsrs	r3, r3, #9
 800f502:	4413      	add	r3, r2
 800f504:	4619      	mov	r1, r3
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fe6e 	bl	800f1e8 <move_window>
 800f50c:	4603      	mov	r3, r0
 800f50e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f510:	7ffb      	ldrb	r3, [r7, #31]
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 80ab 	bne.w	800f66e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	1c59      	adds	r1, r3, #1
 800f522:	61b9      	str	r1, [r7, #24]
 800f524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f528:	4413      	add	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00d      	beq.n	800f552 <put_fat+0xa4>
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b25b      	sxtb	r3, r3
 800f53c:	f003 030f 	and.w	r3, r3, #15
 800f540:	b25a      	sxtb	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	b2db      	uxtb	r3, r3
 800f546:	011b      	lsls	r3, r3, #4
 800f548:	b25b      	sxtb	r3, r3
 800f54a:	4313      	orrs	r3, r2
 800f54c:	b25b      	sxtb	r3, r3
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	e001      	b.n	800f556 <put_fat+0xa8>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	b2db      	uxtb	r3, r3
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2201      	movs	r2, #1
 800f55e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6a1a      	ldr	r2, [r3, #32]
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	0a5b      	lsrs	r3, r3, #9
 800f568:	4413      	add	r3, r2
 800f56a:	4619      	mov	r1, r3
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff fe3b 	bl	800f1e8 <move_window>
 800f572:	4603      	mov	r3, r0
 800f574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f576:	7ffb      	ldrb	r3, [r7, #31]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d17a      	bne.n	800f672 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f588:	4413      	add	r3, r2
 800f58a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d003      	beq.n	800f59e <put_fat+0xf0>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	091b      	lsrs	r3, r3, #4
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	e00e      	b.n	800f5bc <put_fat+0x10e>
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	b25b      	sxtb	r3, r3
 800f5a4:	f023 030f 	bic.w	r3, r3, #15
 800f5a8:	b25a      	sxtb	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	0a1b      	lsrs	r3, r3, #8
 800f5ae:	b25b      	sxtb	r3, r3
 800f5b0:	f003 030f 	and.w	r3, r3, #15
 800f5b4:	b25b      	sxtb	r3, r3
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	b25b      	sxtb	r3, r3
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	697a      	ldr	r2, [r7, #20]
 800f5be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	70da      	strb	r2, [r3, #3]
			break;
 800f5c6:	e059      	b.n	800f67c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6a1a      	ldr	r2, [r3, #32]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	0a1b      	lsrs	r3, r3, #8
 800f5d0:	4413      	add	r3, r2
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f7ff fe07 	bl	800f1e8 <move_window>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5de:	7ffb      	ldrb	r3, [r7, #31]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d148      	bne.n	800f676 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	005b      	lsls	r3, r3, #1
 800f5ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f5f2:	4413      	add	r3, r2
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	b292      	uxth	r2, r2
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7ff fb7f 	bl	800ecfe <st_word>
			fs->wflag = 1;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2201      	movs	r2, #1
 800f604:	70da      	strb	r2, [r3, #3]
			break;
 800f606:	e039      	b.n	800f67c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6a1a      	ldr	r2, [r3, #32]
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	09db      	lsrs	r3, r3, #7
 800f610:	4413      	add	r3, r2
 800f612:	4619      	mov	r1, r3
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f7ff fde7 	bl	800f1e8 <move_window>
 800f61a:	4603      	mov	r3, r0
 800f61c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f61e:	7ffb      	ldrb	r3, [r7, #31]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d12a      	bne.n	800f67a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f638:	4413      	add	r3, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7ff fb3c 	bl	800ecb8 <ld_dword>
 800f640:	4603      	mov	r3, r0
 800f642:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f646:	4323      	orrs	r3, r4
 800f648:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f658:	4413      	add	r3, r2
 800f65a:	6879      	ldr	r1, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fb69 	bl	800ed34 <st_dword>
			fs->wflag = 1;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2201      	movs	r2, #1
 800f666:	70da      	strb	r2, [r3, #3]
			break;
 800f668:	e008      	b.n	800f67c <put_fat+0x1ce>
		}
	}
 800f66a:	bf00      	nop
 800f66c:	e006      	b.n	800f67c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f66e:	bf00      	nop
 800f670:	e004      	b.n	800f67c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f672:	bf00      	nop
 800f674:	e002      	b.n	800f67c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f676:	bf00      	nop
 800f678:	e000      	b.n	800f67c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f67a:	bf00      	nop
	return res;
 800f67c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3724      	adds	r7, #36	; 0x24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd90      	pop	{r4, r7, pc}

0800f686 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b088      	sub	sp, #32
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	60f8      	str	r0, [r7, #12]
 800f68e:	60b9      	str	r1, [r7, #8]
 800f690:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f692:	2300      	movs	r3, #0
 800f694:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d904      	bls.n	800f6ac <remove_chain+0x26>
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d301      	bcc.n	800f6b0 <remove_chain+0x2a>
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	e04b      	b.n	800f748 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d00c      	beq.n	800f6d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ba:	6879      	ldr	r1, [r7, #4]
 800f6bc:	69b8      	ldr	r0, [r7, #24]
 800f6be:	f7ff fef6 	bl	800f4ae <put_fat>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f6c6:	7ffb      	ldrb	r3, [r7, #31]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <remove_chain+0x4a>
 800f6cc:	7ffb      	ldrb	r3, [r7, #31]
 800f6ce:	e03b      	b.n	800f748 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f6d0:	68b9      	ldr	r1, [r7, #8]
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f7ff fe43 	bl	800f35e <get_fat>
 800f6d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d031      	beq.n	800f744 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d101      	bne.n	800f6ea <remove_chain+0x64>
 800f6e6:	2302      	movs	r3, #2
 800f6e8:	e02e      	b.n	800f748 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f0:	d101      	bne.n	800f6f6 <remove_chain+0x70>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e028      	b.n	800f748 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	68b9      	ldr	r1, [r7, #8]
 800f6fa:	69b8      	ldr	r0, [r7, #24]
 800f6fc:	f7ff fed7 	bl	800f4ae <put_fat>
 800f700:	4603      	mov	r3, r0
 800f702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f704:	7ffb      	ldrb	r3, [r7, #31]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <remove_chain+0x88>
 800f70a:	7ffb      	ldrb	r3, [r7, #31]
 800f70c:	e01c      	b.n	800f748 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	691a      	ldr	r2, [r3, #16]
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	695b      	ldr	r3, [r3, #20]
 800f716:	3b02      	subs	r3, #2
 800f718:	429a      	cmp	r2, r3
 800f71a:	d20b      	bcs.n	800f734 <remove_chain+0xae>
			fs->free_clst++;
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	791b      	ldrb	r3, [r3, #4]
 800f72a:	f043 0301 	orr.w	r3, r3, #1
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d3c6      	bcc.n	800f6d0 <remove_chain+0x4a>
 800f742:	e000      	b.n	800f746 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f744:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3720      	adds	r7, #32
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10d      	bne.n	800f782 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d004      	beq.n	800f77c <create_chain+0x2c>
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	69ba      	ldr	r2, [r7, #24]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d31b      	bcc.n	800f7b4 <create_chain+0x64>
 800f77c:	2301      	movs	r3, #1
 800f77e:	61bb      	str	r3, [r7, #24]
 800f780:	e018      	b.n	800f7b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff fdea 	bl	800f35e <get_fat>
 800f78a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d801      	bhi.n	800f796 <create_chain+0x46>
 800f792:	2301      	movs	r3, #1
 800f794:	e070      	b.n	800f878 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79c:	d101      	bne.n	800f7a2 <create_chain+0x52>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	e06a      	b.n	800f878 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	695b      	ldr	r3, [r3, #20]
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d201      	bcs.n	800f7b0 <create_chain+0x60>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	e063      	b.n	800f878 <create_chain+0x128>
		scl = clst;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	69fa      	ldr	r2, [r7, #28]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d307      	bcc.n	800f7d8 <create_chain+0x88>
				ncl = 2;
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f7cc:	69fa      	ldr	r2, [r7, #28]
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d901      	bls.n	800f7d8 <create_chain+0x88>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e04f      	b.n	800f878 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f7d8:	69f9      	ldr	r1, [r7, #28]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7ff fdbf 	bl	800f35e <get_fat>
 800f7e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00e      	beq.n	800f806 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d003      	beq.n	800f7f6 <create_chain+0xa6>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f4:	d101      	bne.n	800f7fa <create_chain+0xaa>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	e03e      	b.n	800f878 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f7fa:	69fa      	ldr	r2, [r7, #28]
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d1da      	bne.n	800f7b8 <create_chain+0x68>
 800f802:	2300      	movs	r3, #0
 800f804:	e038      	b.n	800f878 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f806:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f808:	f04f 32ff 	mov.w	r2, #4294967295
 800f80c:	69f9      	ldr	r1, [r7, #28]
 800f80e:	6938      	ldr	r0, [r7, #16]
 800f810:	f7ff fe4d 	bl	800f4ae <put_fat>
 800f814:	4603      	mov	r3, r0
 800f816:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f818:	7dfb      	ldrb	r3, [r7, #23]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d109      	bne.n	800f832 <create_chain+0xe2>
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d006      	beq.n	800f832 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6938      	ldr	r0, [r7, #16]
 800f82a:	f7ff fe40 	bl	800f4ae <put_fat>
 800f82e:	4603      	mov	r3, r0
 800f830:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f832:	7dfb      	ldrb	r3, [r7, #23]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d116      	bne.n	800f866 <create_chain+0x116>
		fs->last_clst = ncl;
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	69fa      	ldr	r2, [r7, #28]
 800f83c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	691a      	ldr	r2, [r3, #16]
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	695b      	ldr	r3, [r3, #20]
 800f846:	3b02      	subs	r3, #2
 800f848:	429a      	cmp	r2, r3
 800f84a:	d804      	bhi.n	800f856 <create_chain+0x106>
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	1e5a      	subs	r2, r3, #1
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	791b      	ldrb	r3, [r3, #4]
 800f85a:	f043 0301 	orr.w	r3, r3, #1
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	711a      	strb	r2, [r3, #4]
 800f864:	e007      	b.n	800f876 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d102      	bne.n	800f872 <create_chain+0x122>
 800f86c:	f04f 33ff 	mov.w	r3, #4294967295
 800f870:	e000      	b.n	800f874 <create_chain+0x124>
 800f872:	2301      	movs	r3, #1
 800f874:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f876:	69fb      	ldr	r3, [r7, #28]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3720      	adds	r7, #32
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f880:	b480      	push	{r7}
 800f882:	b087      	sub	sp, #28
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f894:	3304      	adds	r3, #4
 800f896:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	0a5b      	lsrs	r3, r3, #9
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	8952      	ldrh	r2, [r2, #10]
 800f8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	1d1a      	adds	r2, r3, #4
 800f8aa:	613a      	str	r2, [r7, #16]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <clmt_clust+0x3a>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e010      	b.n	800f8dc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f8ba:	697a      	ldr	r2, [r7, #20]
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d307      	bcc.n	800f8d2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	1ad3      	subs	r3, r2, r3
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f8d0:	e7e9      	b.n	800f8a6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f8d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	4413      	add	r3, r2
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	371c      	adds	r7, #28
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8fe:	d204      	bcs.n	800f90a <dir_sdi+0x22>
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	f003 031f 	and.w	r3, r3, #31
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <dir_sdi+0x26>
		return FR_INT_ERR;
 800f90a:	2302      	movs	r3, #2
 800f90c:	e063      	b.n	800f9d6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	683a      	ldr	r2, [r7, #0]
 800f912:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d106      	bne.n	800f92e <dir_sdi+0x46>
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d902      	bls.n	800f92e <dir_sdi+0x46>
		clst = fs->dirbase;
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10c      	bne.n	800f94e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	095b      	lsrs	r3, r3, #5
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	8912      	ldrh	r2, [r2, #8]
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d301      	bcc.n	800f944 <dir_sdi+0x5c>
 800f940:	2302      	movs	r3, #2
 800f942:	e048      	b.n	800f9d6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	61da      	str	r2, [r3, #28]
 800f94c:	e029      	b.n	800f9a2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	895b      	ldrh	r3, [r3, #10]
 800f952:	025b      	lsls	r3, r3, #9
 800f954:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f956:	e019      	b.n	800f98c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6979      	ldr	r1, [r7, #20]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7ff fcfe 	bl	800f35e <get_fat>
 800f962:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96a:	d101      	bne.n	800f970 <dir_sdi+0x88>
 800f96c:	2301      	movs	r3, #1
 800f96e:	e032      	b.n	800f9d6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d904      	bls.n	800f980 <dir_sdi+0x98>
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	695b      	ldr	r3, [r3, #20]
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d301      	bcc.n	800f984 <dir_sdi+0x9c>
 800f980:	2302      	movs	r3, #2
 800f982:	e028      	b.n	800f9d6 <dir_sdi+0xee>
			ofs -= csz;
 800f984:	683a      	ldr	r2, [r7, #0]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	429a      	cmp	r2, r3
 800f992:	d2e1      	bcs.n	800f958 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f994:	6979      	ldr	r1, [r7, #20]
 800f996:	6938      	ldr	r0, [r7, #16]
 800f998:	f7ff fcc2 	bl	800f320 <clust2sect>
 800f99c:	4602      	mov	r2, r0
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	69db      	ldr	r3, [r3, #28]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <dir_sdi+0xcc>
 800f9b0:	2302      	movs	r3, #2
 800f9b2:	e010      	b.n	800f9d6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	69da      	ldr	r2, [r3, #28]
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	0a5b      	lsrs	r3, r3, #9
 800f9bc:	441a      	add	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ce:	441a      	add	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b086      	sub	sp, #24
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	695b      	ldr	r3, [r3, #20]
 800f9f2:	3320      	adds	r3, #32
 800f9f4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <dir_next+0x28>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa04:	d301      	bcc.n	800fa0a <dir_next+0x2c>
 800fa06:	2304      	movs	r3, #4
 800fa08:	e0aa      	b.n	800fb60 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f040 8098 	bne.w	800fb46 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	69db      	ldr	r3, [r3, #28]
 800fa1a:	1c5a      	adds	r2, r3, #1
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	699b      	ldr	r3, [r3, #24]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d10b      	bne.n	800fa40 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	095b      	lsrs	r3, r3, #5
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	8912      	ldrh	r2, [r2, #8]
 800fa30:	4293      	cmp	r3, r2
 800fa32:	f0c0 8088 	bcc.w	800fb46 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	61da      	str	r2, [r3, #28]
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	e08f      	b.n	800fb60 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	0a5b      	lsrs	r3, r3, #9
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	8952      	ldrh	r2, [r2, #10]
 800fa48:	3a01      	subs	r2, #1
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d17a      	bne.n	800fb46 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	699b      	ldr	r3, [r3, #24]
 800fa56:	4619      	mov	r1, r3
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f7ff fc80 	bl	800f35e <get_fat>
 800fa5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d801      	bhi.n	800fa6a <dir_next+0x8c>
 800fa66:	2302      	movs	r3, #2
 800fa68:	e07a      	b.n	800fb60 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa70:	d101      	bne.n	800fa76 <dir_next+0x98>
 800fa72:	2301      	movs	r3, #1
 800fa74:	e074      	b.n	800fb60 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	695b      	ldr	r3, [r3, #20]
 800fa7a:	697a      	ldr	r2, [r7, #20]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d358      	bcc.n	800fb32 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d104      	bne.n	800fa90 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	61da      	str	r2, [r3, #28]
 800fa8c:	2304      	movs	r3, #4
 800fa8e:	e067      	b.n	800fb60 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	699b      	ldr	r3, [r3, #24]
 800fa96:	4619      	mov	r1, r3
 800fa98:	4610      	mov	r0, r2
 800fa9a:	f7ff fe59 	bl	800f750 <create_chain>
 800fa9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <dir_next+0xcc>
 800faa6:	2307      	movs	r3, #7
 800faa8:	e05a      	b.n	800fb60 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d101      	bne.n	800fab4 <dir_next+0xd6>
 800fab0:	2302      	movs	r3, #2
 800fab2:	e055      	b.n	800fb60 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faba:	d101      	bne.n	800fac0 <dir_next+0xe2>
 800fabc:	2301      	movs	r3, #1
 800fabe:	e04f      	b.n	800fb60 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f7ff fb4d 	bl	800f160 <sync_window>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <dir_next+0xf2>
 800facc:	2301      	movs	r3, #1
 800face:	e047      	b.n	800fb60 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	3330      	adds	r3, #48	; 0x30
 800fad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fad8:	2100      	movs	r1, #0
 800fada:	4618      	mov	r0, r3
 800fadc:	f7ff f977 	bl	800edce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fae0:	2300      	movs	r3, #0
 800fae2:	613b      	str	r3, [r7, #16]
 800fae4:	6979      	ldr	r1, [r7, #20]
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7ff fc1a 	bl	800f320 <clust2sect>
 800faec:	4602      	mov	r2, r0
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	62da      	str	r2, [r3, #44]	; 0x2c
 800faf2:	e012      	b.n	800fb1a <dir_next+0x13c>
						fs->wflag = 1;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2201      	movs	r2, #1
 800faf8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	f7ff fb30 	bl	800f160 <sync_window>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <dir_next+0x12c>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e02a      	b.n	800fb60 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	613b      	str	r3, [r7, #16]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	895b      	ldrh	r3, [r3, #10]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d3e6      	bcc.n	800faf4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	1ad2      	subs	r2, r2, r3
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	697a      	ldr	r2, [r7, #20]
 800fb36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fb38:	6979      	ldr	r1, [r7, #20]
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f7ff fbf0 	bl	800f320 <clust2sect>
 800fb40:	4602      	mov	r2, r0
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb58:	441a      	add	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b086      	sub	sp, #24
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fb78:	2100      	movs	r1, #0
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7ff feb4 	bl	800f8e8 <dir_sdi>
 800fb80:	4603      	mov	r3, r0
 800fb82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb84:	7dfb      	ldrb	r3, [r7, #23]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d12b      	bne.n	800fbe2 <dir_alloc+0x7a>
		n = 0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	4619      	mov	r1, r3
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7ff fb27 	bl	800f1e8 <move_window>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb9e:	7dfb      	ldrb	r3, [r7, #23]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d11d      	bne.n	800fbe0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6a1b      	ldr	r3, [r3, #32]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	2be5      	cmp	r3, #229	; 0xe5
 800fbac:	d004      	beq.n	800fbb8 <dir_alloc+0x50>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d107      	bne.n	800fbc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	613b      	str	r3, [r7, #16]
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d102      	bne.n	800fbcc <dir_alloc+0x64>
 800fbc6:	e00c      	b.n	800fbe2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fbc8:	2300      	movs	r3, #0
 800fbca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fbcc:	2101      	movs	r1, #1
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff ff05 	bl	800f9de <dir_next>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0d7      	beq.n	800fb8e <dir_alloc+0x26>
 800fbde:	e000      	b.n	800fbe2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fbe0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	d101      	bne.n	800fbec <dir_alloc+0x84>
 800fbe8:	2307      	movs	r3, #7
 800fbea:	75fb      	strb	r3, [r7, #23]
	return res;
 800fbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3718      	adds	r7, #24
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	331a      	adds	r3, #26
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff f83f 	bl	800ec88 <ld_word>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d109      	bne.n	800fc2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	3314      	adds	r3, #20
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff f834 	bl	800ec88 <ld_word>
 800fc20:	4603      	mov	r3, r0
 800fc22:	041b      	lsls	r3, r3, #16
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	331a      	adds	r3, #26
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	b292      	uxth	r2, r2
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff f857 	bl	800ecfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	2b03      	cmp	r3, #3
 800fc56:	d109      	bne.n	800fc6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	f103 0214 	add.w	r2, r3, #20
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	0c1b      	lsrs	r3, r3, #16
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7ff f849 	bl	800ecfe <st_word>
	}
}
 800fc6c:	bf00      	nop
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fc7e:	2304      	movs	r3, #4
 800fc80:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fc88:	e03c      	b.n	800fd04 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	69db      	ldr	r3, [r3, #28]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	6938      	ldr	r0, [r7, #16]
 800fc92:	f7ff faa9 	bl	800f1e8 <move_window>
 800fc96:	4603      	mov	r3, r0
 800fc98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d136      	bne.n	800fd0e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a1b      	ldr	r3, [r3, #32]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d102      	bne.n	800fcb4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fcae:	2304      	movs	r3, #4
 800fcb0:	75fb      	strb	r3, [r7, #23]
 800fcb2:	e031      	b.n	800fd18 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a1b      	ldr	r3, [r3, #32]
 800fcb8:	330b      	adds	r3, #11
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcc0:	73bb      	strb	r3, [r7, #14]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7bba      	ldrb	r2, [r7, #14]
 800fcc6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	2be5      	cmp	r3, #229	; 0xe5
 800fccc:	d011      	beq.n	800fcf2 <dir_read+0x7e>
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	2b2e      	cmp	r3, #46	; 0x2e
 800fcd2:	d00e      	beq.n	800fcf2 <dir_read+0x7e>
 800fcd4:	7bbb      	ldrb	r3, [r7, #14]
 800fcd6:	2b0f      	cmp	r3, #15
 800fcd8:	d00b      	beq.n	800fcf2 <dir_read+0x7e>
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
 800fcdc:	f023 0320 	bic.w	r3, r3, #32
 800fce0:	2b08      	cmp	r3, #8
 800fce2:	bf0c      	ite	eq
 800fce4:	2301      	moveq	r3, #1
 800fce6:	2300      	movne	r3, #0
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	461a      	mov	r2, r3
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d00f      	beq.n	800fd12 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff fe72 	bl	800f9de <dir_next>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fcfe:	7dfb      	ldrb	r3, [r7, #23]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d108      	bne.n	800fd16 <dir_read+0xa2>
	while (dp->sect) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	69db      	ldr	r3, [r3, #28]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1be      	bne.n	800fc8a <dir_read+0x16>
 800fd0c:	e004      	b.n	800fd18 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fd0e:	bf00      	nop
 800fd10:	e002      	b.n	800fd18 <dir_read+0xa4>
				break;
 800fd12:	bf00      	nop
 800fd14:	e000      	b.n	800fd18 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fd16:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fd18:	7dfb      	ldrb	r3, [r7, #23]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d002      	beq.n	800fd24 <dir_read+0xb0>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	61da      	str	r2, [r3, #28]
	return res;
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b086      	sub	sp, #24
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff fdd2 	bl	800f8e8 <dir_sdi>
 800fd44:	4603      	mov	r3, r0
 800fd46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fd48:	7dfb      	ldrb	r3, [r7, #23]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <dir_find+0x24>
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	e03e      	b.n	800fdd0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	4619      	mov	r1, r3
 800fd58:	6938      	ldr	r0, [r7, #16]
 800fd5a:	f7ff fa45 	bl	800f1e8 <move_window>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d12f      	bne.n	800fdc8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d102      	bne.n	800fd7c <dir_find+0x4e>
 800fd76:	2304      	movs	r3, #4
 800fd78:	75fb      	strb	r3, [r7, #23]
 800fd7a:	e028      	b.n	800fdce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6a1b      	ldr	r3, [r3, #32]
 800fd80:	330b      	adds	r3, #11
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd88:	b2da      	uxtb	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	330b      	adds	r3, #11
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	f003 0308 	and.w	r3, r3, #8
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10a      	bne.n	800fdb4 <dir_find+0x86>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6a18      	ldr	r0, [r3, #32]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	3324      	adds	r3, #36	; 0x24
 800fda6:	220b      	movs	r2, #11
 800fda8:	4619      	mov	r1, r3
 800fdaa:	f7ff f82b 	bl	800ee04 <mem_cmp>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00b      	beq.n	800fdcc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff fe11 	bl	800f9de <dir_next>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fdc0:	7dfb      	ldrb	r3, [r7, #23]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d0c5      	beq.n	800fd52 <dir_find+0x24>
 800fdc6:	e002      	b.n	800fdce <dir_find+0xa0>
		if (res != FR_OK) break;
 800fdc8:	bf00      	nop
 800fdca:	e000      	b.n	800fdce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fdcc:	bf00      	nop

	return res;
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fde6:	2101      	movs	r1, #1
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff febd 	bl	800fb68 <dir_alloc>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d11c      	bne.n	800fe32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	69db      	ldr	r3, [r3, #28]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	68b8      	ldr	r0, [r7, #8]
 800fe00:	f7ff f9f2 	bl	800f1e8 <move_window>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d111      	bne.n	800fe32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	2220      	movs	r2, #32
 800fe14:	2100      	movs	r1, #0
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fe ffd9 	bl	800edce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a18      	ldr	r0, [r3, #32]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3324      	adds	r3, #36	; 0x24
 800fe24:	220b      	movs	r2, #11
 800fe26:	4619      	mov	r1, r3
 800fe28:	f7fe ffb0 	bl	800ed8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	69db      	ldr	r3, [r3, #28]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d04e      	beq.n	800fef2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fe54:	2300      	movs	r3, #0
 800fe56:	613b      	str	r3, [r7, #16]
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fe5c:	e021      	b.n	800fea2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1a      	ldr	r2, [r3, #32]
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	1c59      	adds	r1, r3, #1
 800fe66:	6179      	str	r1, [r7, #20]
 800fe68:	4413      	add	r3, r2
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	2b20      	cmp	r3, #32
 800fe72:	d100      	bne.n	800fe76 <get_fileinfo+0x3a>
 800fe74:	e015      	b.n	800fea2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	2b05      	cmp	r3, #5
 800fe7a:	d101      	bne.n	800fe80 <get_fileinfo+0x44>
 800fe7c:	23e5      	movs	r3, #229	; 0xe5
 800fe7e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	2b09      	cmp	r3, #9
 800fe84:	d106      	bne.n	800fe94 <get_fileinfo+0x58>
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	1c5a      	adds	r2, r3, #1
 800fe8a:	613a      	str	r2, [r7, #16]
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	4413      	add	r3, r2
 800fe90:	222e      	movs	r2, #46	; 0x2e
 800fe92:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	1c5a      	adds	r2, r3, #1
 800fe98:	613a      	str	r2, [r7, #16]
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	7bfa      	ldrb	r2, [r7, #15]
 800fea0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	2b0a      	cmp	r3, #10
 800fea6:	d9da      	bls.n	800fe5e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	4413      	add	r3, r2
 800feae:	3309      	adds	r3, #9
 800feb0:	2200      	movs	r2, #0
 800feb2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	7ada      	ldrb	r2, [r3, #11]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	331c      	adds	r3, #28
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fe fef7 	bl	800ecb8 <ld_dword>
 800feca:	4602      	mov	r2, r0
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a1b      	ldr	r3, [r3, #32]
 800fed4:	3316      	adds	r3, #22
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fe feee 	bl	800ecb8 <ld_dword>
 800fedc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	80da      	strh	r2, [r3, #6]
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	0c1b      	lsrs	r3, r3, #16
 800feea:	b29a      	uxth	r2, r3
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	809a      	strh	r2, [r3, #4]
 800fef0:	e000      	b.n	800fef4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fef2:	bf00      	nop
}
 800fef4:	3718      	adds	r7, #24
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
	...

0800fefc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	60fb      	str	r3, [r7, #12]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3324      	adds	r3, #36	; 0x24
 800ff10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ff12:	220b      	movs	r2, #11
 800ff14:	2120      	movs	r1, #32
 800ff16:	68b8      	ldr	r0, [r7, #8]
 800ff18:	f7fe ff59 	bl	800edce <mem_set>
	si = i = 0; ni = 8;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	613b      	str	r3, [r7, #16]
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	61fb      	str	r3, [r7, #28]
 800ff24:	2308      	movs	r3, #8
 800ff26:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	61fa      	str	r2, [r7, #28]
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	4413      	add	r3, r2
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ff36:	7efb      	ldrb	r3, [r7, #27]
 800ff38:	2b20      	cmp	r3, #32
 800ff3a:	d94e      	bls.n	800ffda <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ff3c:	7efb      	ldrb	r3, [r7, #27]
 800ff3e:	2b2f      	cmp	r3, #47	; 0x2f
 800ff40:	d006      	beq.n	800ff50 <create_name+0x54>
 800ff42:	7efb      	ldrb	r3, [r7, #27]
 800ff44:	2b5c      	cmp	r3, #92	; 0x5c
 800ff46:	d110      	bne.n	800ff6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ff48:	e002      	b.n	800ff50 <create_name+0x54>
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	68fa      	ldr	r2, [r7, #12]
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	4413      	add	r3, r2
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	2b2f      	cmp	r3, #47	; 0x2f
 800ff5a:	d0f6      	beq.n	800ff4a <create_name+0x4e>
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	4413      	add	r3, r2
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	2b5c      	cmp	r3, #92	; 0x5c
 800ff66:	d0f0      	beq.n	800ff4a <create_name+0x4e>
			break;
 800ff68:	e038      	b.n	800ffdc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ff6a:	7efb      	ldrb	r3, [r7, #27]
 800ff6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ff6e:	d003      	beq.n	800ff78 <create_name+0x7c>
 800ff70:	693a      	ldr	r2, [r7, #16]
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d30c      	bcc.n	800ff92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2b0b      	cmp	r3, #11
 800ff7c:	d002      	beq.n	800ff84 <create_name+0x88>
 800ff7e:	7efb      	ldrb	r3, [r7, #27]
 800ff80:	2b2e      	cmp	r3, #46	; 0x2e
 800ff82:	d001      	beq.n	800ff88 <create_name+0x8c>
 800ff84:	2306      	movs	r3, #6
 800ff86:	e044      	b.n	8010012 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ff88:	2308      	movs	r3, #8
 800ff8a:	613b      	str	r3, [r7, #16]
 800ff8c:	230b      	movs	r3, #11
 800ff8e:	617b      	str	r3, [r7, #20]
			continue;
 800ff90:	e022      	b.n	800ffd8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ff92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da04      	bge.n	800ffa4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ff9a:	7efb      	ldrb	r3, [r7, #27]
 800ff9c:	3b80      	subs	r3, #128	; 0x80
 800ff9e:	4a1f      	ldr	r2, [pc, #124]	; (801001c <create_name+0x120>)
 800ffa0:	5cd3      	ldrb	r3, [r2, r3]
 800ffa2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ffa4:	7efb      	ldrb	r3, [r7, #27]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	481d      	ldr	r0, [pc, #116]	; (8010020 <create_name+0x124>)
 800ffaa:	f7fe ff52 	bl	800ee52 <chk_chr>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <create_name+0xbc>
 800ffb4:	2306      	movs	r3, #6
 800ffb6:	e02c      	b.n	8010012 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ffb8:	7efb      	ldrb	r3, [r7, #27]
 800ffba:	2b60      	cmp	r3, #96	; 0x60
 800ffbc:	d905      	bls.n	800ffca <create_name+0xce>
 800ffbe:	7efb      	ldrb	r3, [r7, #27]
 800ffc0:	2b7a      	cmp	r3, #122	; 0x7a
 800ffc2:	d802      	bhi.n	800ffca <create_name+0xce>
 800ffc4:	7efb      	ldrb	r3, [r7, #27]
 800ffc6:	3b20      	subs	r3, #32
 800ffc8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	1c5a      	adds	r2, r3, #1
 800ffce:	613a      	str	r2, [r7, #16]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	7efa      	ldrb	r2, [r7, #27]
 800ffd6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ffd8:	e7a6      	b.n	800ff28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ffda:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	441a      	add	r2, r3
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <create_name+0xf4>
 800ffec:	2306      	movs	r3, #6
 800ffee:	e010      	b.n	8010012 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2be5      	cmp	r3, #229	; 0xe5
 800fff6:	d102      	bne.n	800fffe <create_name+0x102>
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	2205      	movs	r2, #5
 800fffc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fffe:	7efb      	ldrb	r3, [r7, #27]
 8010000:	2b20      	cmp	r3, #32
 8010002:	d801      	bhi.n	8010008 <create_name+0x10c>
 8010004:	2204      	movs	r2, #4
 8010006:	e000      	b.n	801000a <create_name+0x10e>
 8010008:	2200      	movs	r2, #0
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	330b      	adds	r3, #11
 801000e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010010:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010012:	4618      	mov	r0, r3
 8010014:	3720      	adds	r7, #32
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	08013c90 	.word	0x08013c90
 8010020:	08013bdc 	.word	0x08013bdc

08010024 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010038:	e002      	b.n	8010040 <follow_path+0x1c>
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	3301      	adds	r3, #1
 801003e:	603b      	str	r3, [r7, #0]
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	2b2f      	cmp	r3, #47	; 0x2f
 8010046:	d0f8      	beq.n	801003a <follow_path+0x16>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2b5c      	cmp	r3, #92	; 0x5c
 801004e:	d0f4      	beq.n	801003a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2200      	movs	r2, #0
 8010054:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b1f      	cmp	r3, #31
 801005c:	d80a      	bhi.n	8010074 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2280      	movs	r2, #128	; 0x80
 8010062:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010066:	2100      	movs	r1, #0
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff fc3d 	bl	800f8e8 <dir_sdi>
 801006e:	4603      	mov	r3, r0
 8010070:	75fb      	strb	r3, [r7, #23]
 8010072:	e043      	b.n	80100fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010074:	463b      	mov	r3, r7
 8010076:	4619      	mov	r1, r3
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7ff ff3f 	bl	800fefc <create_name>
 801007e:	4603      	mov	r3, r0
 8010080:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010082:	7dfb      	ldrb	r3, [r7, #23]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d134      	bne.n	80100f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff fe50 	bl	800fd2e <dir_find>
 801008e:	4603      	mov	r3, r0
 8010090:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010098:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801009a:	7dfb      	ldrb	r3, [r7, #23]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00a      	beq.n	80100b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
 80100a2:	2b04      	cmp	r3, #4
 80100a4:	d127      	bne.n	80100f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80100a6:	7afb      	ldrb	r3, [r7, #11]
 80100a8:	f003 0304 	and.w	r3, r3, #4
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d122      	bne.n	80100f6 <follow_path+0xd2>
 80100b0:	2305      	movs	r3, #5
 80100b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80100b4:	e01f      	b.n	80100f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100b6:	7afb      	ldrb	r3, [r7, #11]
 80100b8:	f003 0304 	and.w	r3, r3, #4
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d11c      	bne.n	80100fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	799b      	ldrb	r3, [r3, #6]
 80100c4:	f003 0310 	and.w	r3, r3, #16
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d102      	bne.n	80100d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80100cc:	2305      	movs	r3, #5
 80100ce:	75fb      	strb	r3, [r7, #23]
 80100d0:	e014      	b.n	80100fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	695b      	ldr	r3, [r3, #20]
 80100dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100e0:	4413      	add	r3, r2
 80100e2:	4619      	mov	r1, r3
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f7ff fd86 	bl	800fbf6 <ld_clust>
 80100ea:	4602      	mov	r2, r0
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80100f0:	e7c0      	b.n	8010074 <follow_path+0x50>
			if (res != FR_OK) break;
 80100f2:	bf00      	nop
 80100f4:	e002      	b.n	80100fc <follow_path+0xd8>
				break;
 80100f6:	bf00      	nop
 80100f8:	e000      	b.n	80100fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100fa:	bf00      	nop
			}
		}
	}

	return res;
 80100fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010106:	b480      	push	{r7}
 8010108:	b087      	sub	sp, #28
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801010e:	f04f 33ff 	mov.w	r3, #4294967295
 8010112:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d031      	beq.n	8010180 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	e002      	b.n	801012a <get_ldnumber+0x24>
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	3301      	adds	r3, #1
 8010128:	617b      	str	r3, [r7, #20]
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b20      	cmp	r3, #32
 8010130:	d903      	bls.n	801013a <get_ldnumber+0x34>
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b3a      	cmp	r3, #58	; 0x3a
 8010138:	d1f4      	bne.n	8010124 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b3a      	cmp	r3, #58	; 0x3a
 8010140:	d11c      	bne.n	801017c <get_ldnumber+0x76>
			tp = *path;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	60fa      	str	r2, [r7, #12]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	3b30      	subs	r3, #48	; 0x30
 8010152:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	2b09      	cmp	r3, #9
 8010158:	d80e      	bhi.n	8010178 <get_ldnumber+0x72>
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	429a      	cmp	r2, r3
 8010160:	d10a      	bne.n	8010178 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d107      	bne.n	8010178 <get_ldnumber+0x72>
					vol = (int)i;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	3301      	adds	r3, #1
 8010170:	617b      	str	r3, [r7, #20]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	697a      	ldr	r2, [r7, #20]
 8010176:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	e002      	b.n	8010182 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801017c:	2300      	movs	r3, #0
 801017e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010180:	693b      	ldr	r3, [r7, #16]
}
 8010182:	4618      	mov	r0, r3
 8010184:	371c      	adds	r7, #28
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
	...

08010190 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	70da      	strb	r2, [r3, #3]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f04f 32ff 	mov.w	r2, #4294967295
 80101a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff f81c 	bl	800f1e8 <move_window>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <check_fs+0x2a>
 80101b6:	2304      	movs	r3, #4
 80101b8:	e038      	b.n	801022c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3330      	adds	r3, #48	; 0x30
 80101be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fd60 	bl	800ec88 <ld_word>
 80101c8:	4603      	mov	r3, r0
 80101ca:	461a      	mov	r2, r3
 80101cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d001      	beq.n	80101d8 <check_fs+0x48>
 80101d4:	2303      	movs	r3, #3
 80101d6:	e029      	b.n	801022c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101de:	2be9      	cmp	r3, #233	; 0xe9
 80101e0:	d009      	beq.n	80101f6 <check_fs+0x66>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101e8:	2beb      	cmp	r3, #235	; 0xeb
 80101ea:	d11e      	bne.n	801022a <check_fs+0x9a>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80101f2:	2b90      	cmp	r3, #144	; 0x90
 80101f4:	d119      	bne.n	801022a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	3330      	adds	r3, #48	; 0x30
 80101fa:	3336      	adds	r3, #54	; 0x36
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe fd5b 	bl	800ecb8 <ld_dword>
 8010202:	4603      	mov	r3, r0
 8010204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010208:	4a0a      	ldr	r2, [pc, #40]	; (8010234 <check_fs+0xa4>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d101      	bne.n	8010212 <check_fs+0x82>
 801020e:	2300      	movs	r3, #0
 8010210:	e00c      	b.n	801022c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3330      	adds	r3, #48	; 0x30
 8010216:	3352      	adds	r3, #82	; 0x52
 8010218:	4618      	mov	r0, r3
 801021a:	f7fe fd4d 	bl	800ecb8 <ld_dword>
 801021e:	4603      	mov	r3, r0
 8010220:	4a05      	ldr	r2, [pc, #20]	; (8010238 <check_fs+0xa8>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d101      	bne.n	801022a <check_fs+0x9a>
 8010226:	2300      	movs	r3, #0
 8010228:	e000      	b.n	801022c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801022a:	2302      	movs	r3, #2
}
 801022c:	4618      	mov	r0, r3
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	00544146 	.word	0x00544146
 8010238:	33544146 	.word	0x33544146

0801023c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b096      	sub	sp, #88	; 0x58
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	2200      	movs	r2, #0
 801024e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f7ff ff58 	bl	8010106 <get_ldnumber>
 8010256:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025a:	2b00      	cmp	r3, #0
 801025c:	da01      	bge.n	8010262 <find_volume+0x26>
 801025e:	230b      	movs	r3, #11
 8010260:	e22d      	b.n	80106be <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010262:	4aa1      	ldr	r2, [pc, #644]	; (80104e8 <find_volume+0x2ac>)
 8010264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <find_volume+0x3a>
 8010272:	230c      	movs	r3, #12
 8010274:	e223      	b.n	80106be <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801027a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	f023 0301 	bic.w	r3, r3, #1
 8010282:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d01a      	beq.n	80102c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028e:	785b      	ldrb	r3, [r3, #1]
 8010290:	4618      	mov	r0, r3
 8010292:	f7fe fc5b 	bl	800eb4c <disk_status>
 8010296:	4603      	mov	r3, r0
 8010298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801029c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102a0:	f003 0301 	and.w	r3, r3, #1
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10c      	bne.n	80102c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80102a8:	79fb      	ldrb	r3, [r7, #7]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d007      	beq.n	80102be <find_volume+0x82>
 80102ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102b2:	f003 0304 	and.w	r3, r3, #4
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d001      	beq.n	80102be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80102ba:	230a      	movs	r3, #10
 80102bc:	e1ff      	b.n	80106be <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80102be:	2300      	movs	r3, #0
 80102c0:	e1fd      	b.n	80106be <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	2200      	movs	r2, #0
 80102c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80102c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	785b      	ldrb	r3, [r3, #1]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe fc53 	bl	800eb80 <disk_initialize>
 80102da:	4603      	mov	r3, r0
 80102dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80102e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102e4:	f003 0301 	and.w	r3, r3, #1
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80102ec:	2303      	movs	r3, #3
 80102ee:	e1e6      	b.n	80106be <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d007      	beq.n	8010306 <find_volume+0xca>
 80102f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102fa:	f003 0304 	and.w	r3, r3, #4
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010302:	230a      	movs	r3, #10
 8010304:	e1db      	b.n	80106be <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010306:	2300      	movs	r3, #0
 8010308:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801030a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801030c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801030e:	f7ff ff3f 	bl	8010190 <check_fs>
 8010312:	4603      	mov	r3, r0
 8010314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801031c:	2b02      	cmp	r3, #2
 801031e:	d149      	bne.n	80103b4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010320:	2300      	movs	r3, #0
 8010322:	643b      	str	r3, [r7, #64]	; 0x40
 8010324:	e01e      	b.n	8010364 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801032c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801032e:	011b      	lsls	r3, r3, #4
 8010330:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010334:	4413      	add	r3, r2
 8010336:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033a:	3304      	adds	r3, #4
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d006      	beq.n	8010350 <find_volume+0x114>
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	3308      	adds	r3, #8
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe fcb6 	bl	800ecb8 <ld_dword>
 801034c:	4602      	mov	r2, r0
 801034e:	e000      	b.n	8010352 <find_volume+0x116>
 8010350:	2200      	movs	r2, #0
 8010352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	3358      	adds	r3, #88	; 0x58
 8010358:	443b      	add	r3, r7
 801035a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801035e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010360:	3301      	adds	r3, #1
 8010362:	643b      	str	r3, [r7, #64]	; 0x40
 8010364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010366:	2b03      	cmp	r3, #3
 8010368:	d9dd      	bls.n	8010326 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801036a:	2300      	movs	r3, #0
 801036c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801036e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010370:	2b00      	cmp	r3, #0
 8010372:	d002      	beq.n	801037a <find_volume+0x13e>
 8010374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010376:	3b01      	subs	r3, #1
 8010378:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801037a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	3358      	adds	r3, #88	; 0x58
 8010380:	443b      	add	r3, r7
 8010382:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010386:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <find_volume+0x15e>
 801038e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010392:	f7ff fefd 	bl	8010190 <check_fs>
 8010396:	4603      	mov	r3, r0
 8010398:	e000      	b.n	801039c <find_volume+0x160>
 801039a:	2303      	movs	r3, #3
 801039c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80103a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d905      	bls.n	80103b4 <find_volume+0x178>
 80103a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103aa:	3301      	adds	r3, #1
 80103ac:	643b      	str	r3, [r7, #64]	; 0x40
 80103ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	d9e2      	bls.n	801037a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80103b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103b8:	2b04      	cmp	r3, #4
 80103ba:	d101      	bne.n	80103c0 <find_volume+0x184>
 80103bc:	2301      	movs	r3, #1
 80103be:	e17e      	b.n	80106be <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80103c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d901      	bls.n	80103cc <find_volume+0x190>
 80103c8:	230d      	movs	r3, #13
 80103ca:	e178      	b.n	80106be <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	3330      	adds	r3, #48	; 0x30
 80103d0:	330b      	adds	r3, #11
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe fc58 	bl	800ec88 <ld_word>
 80103d8:	4603      	mov	r3, r0
 80103da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103de:	d001      	beq.n	80103e4 <find_volume+0x1a8>
 80103e0:	230d      	movs	r3, #13
 80103e2:	e16c      	b.n	80106be <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80103e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e6:	3330      	adds	r3, #48	; 0x30
 80103e8:	3316      	adds	r3, #22
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fe fc4c 	bl	800ec88 <ld_word>
 80103f0:	4603      	mov	r3, r0
 80103f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80103f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d106      	bne.n	8010408 <find_volume+0x1cc>
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	3330      	adds	r3, #48	; 0x30
 80103fe:	3324      	adds	r3, #36	; 0x24
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe fc59 	bl	800ecb8 <ld_dword>
 8010406:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801040c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801040e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010410:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010416:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	789b      	ldrb	r3, [r3, #2]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d005      	beq.n	801042c <find_volume+0x1f0>
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	789b      	ldrb	r3, [r3, #2]
 8010424:	2b02      	cmp	r3, #2
 8010426:	d001      	beq.n	801042c <find_volume+0x1f0>
 8010428:	230d      	movs	r3, #13
 801042a:	e148      	b.n	80106be <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042e:	789b      	ldrb	r3, [r3, #2]
 8010430:	461a      	mov	r2, r3
 8010432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010434:	fb02 f303 	mul.w	r3, r2, r3
 8010438:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010440:	b29a      	uxth	r2, r3
 8010442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010444:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010448:	895b      	ldrh	r3, [r3, #10]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d008      	beq.n	8010460 <find_volume+0x224>
 801044e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010450:	895b      	ldrh	r3, [r3, #10]
 8010452:	461a      	mov	r2, r3
 8010454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010456:	895b      	ldrh	r3, [r3, #10]
 8010458:	3b01      	subs	r3, #1
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <find_volume+0x228>
 8010460:	230d      	movs	r3, #13
 8010462:	e12c      	b.n	80106be <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010466:	3330      	adds	r3, #48	; 0x30
 8010468:	3311      	adds	r3, #17
 801046a:	4618      	mov	r0, r3
 801046c:	f7fe fc0c 	bl	800ec88 <ld_word>
 8010470:	4603      	mov	r3, r0
 8010472:	461a      	mov	r2, r3
 8010474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010476:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	891b      	ldrh	r3, [r3, #8]
 801047c:	f003 030f 	and.w	r3, r3, #15
 8010480:	b29b      	uxth	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <find_volume+0x24e>
 8010486:	230d      	movs	r3, #13
 8010488:	e119      	b.n	80106be <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	3330      	adds	r3, #48	; 0x30
 801048e:	3313      	adds	r3, #19
 8010490:	4618      	mov	r0, r3
 8010492:	f7fe fbf9 	bl	800ec88 <ld_word>
 8010496:	4603      	mov	r3, r0
 8010498:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801049a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801049c:	2b00      	cmp	r3, #0
 801049e:	d106      	bne.n	80104ae <find_volume+0x272>
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	3330      	adds	r3, #48	; 0x30
 80104a4:	3320      	adds	r3, #32
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fe fc06 	bl	800ecb8 <ld_dword>
 80104ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	3330      	adds	r3, #48	; 0x30
 80104b2:	330e      	adds	r3, #14
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fe fbe7 	bl	800ec88 <ld_word>
 80104ba:	4603      	mov	r3, r0
 80104bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80104be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d101      	bne.n	80104c8 <find_volume+0x28c>
 80104c4:	230d      	movs	r3, #13
 80104c6:	e0fa      	b.n	80106be <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80104c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80104ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104cc:	4413      	add	r3, r2
 80104ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d0:	8912      	ldrh	r2, [r2, #8]
 80104d2:	0912      	lsrs	r2, r2, #4
 80104d4:	b292      	uxth	r2, r2
 80104d6:	4413      	add	r3, r2
 80104d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80104da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104de:	429a      	cmp	r2, r3
 80104e0:	d204      	bcs.n	80104ec <find_volume+0x2b0>
 80104e2:	230d      	movs	r3, #13
 80104e4:	e0eb      	b.n	80106be <find_volume+0x482>
 80104e6:	bf00      	nop
 80104e8:	20000e40 	.word	0x20000e40
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80104ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104f4:	8952      	ldrh	r2, [r2, #10]
 80104f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <find_volume+0x2ca>
 8010502:	230d      	movs	r3, #13
 8010504:	e0db      	b.n	80106be <find_volume+0x482>
		fmt = FS_FAT32;
 8010506:	2303      	movs	r3, #3
 8010508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010512:	4293      	cmp	r3, r2
 8010514:	d802      	bhi.n	801051c <find_volume+0x2e0>
 8010516:	2302      	movs	r3, #2
 8010518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010522:	4293      	cmp	r3, r2
 8010524:	d802      	bhi.n	801052c <find_volume+0x2f0>
 8010526:	2301      	movs	r3, #1
 8010528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	1c9a      	adds	r2, r3, #2
 8010530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010532:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010536:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010538:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801053a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801053c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801053e:	441a      	add	r2, r3
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010548:	441a      	add	r2, r3
 801054a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801054e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010552:	2b03      	cmp	r3, #3
 8010554:	d11e      	bne.n	8010594 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	3330      	adds	r3, #48	; 0x30
 801055a:	332a      	adds	r3, #42	; 0x2a
 801055c:	4618      	mov	r0, r3
 801055e:	f7fe fb93 	bl	800ec88 <ld_word>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <find_volume+0x330>
 8010568:	230d      	movs	r3, #13
 801056a:	e0a8      	b.n	80106be <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801056c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056e:	891b      	ldrh	r3, [r3, #8]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <find_volume+0x33c>
 8010574:	230d      	movs	r3, #13
 8010576:	e0a2      	b.n	80106be <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057a:	3330      	adds	r3, #48	; 0x30
 801057c:	332c      	adds	r3, #44	; 0x2c
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fb9a 	bl	800ecb8 <ld_dword>
 8010584:	4602      	mov	r2, r0
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801058a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058c:	695b      	ldr	r3, [r3, #20]
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	647b      	str	r3, [r7, #68]	; 0x44
 8010592:	e01f      	b.n	80105d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	891b      	ldrh	r3, [r3, #8]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d101      	bne.n	80105a0 <find_volume+0x364>
 801059c:	230d      	movs	r3, #13
 801059e:	e08e      	b.n	80106be <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80105a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a2:	6a1a      	ldr	r2, [r3, #32]
 80105a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a6:	441a      	add	r2, r3
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80105ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	d103      	bne.n	80105bc <find_volume+0x380>
 80105b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	e00a      	b.n	80105d2 <find_volume+0x396>
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	695a      	ldr	r2, [r3, #20]
 80105c0:	4613      	mov	r3, r2
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	085a      	lsrs	r2, r3, #1
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	695b      	ldr	r3, [r3, #20]
 80105cc:	f003 0301 	and.w	r3, r3, #1
 80105d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80105d2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	699a      	ldr	r2, [r3, #24]
 80105d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80105de:	0a5b      	lsrs	r3, r3, #9
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d201      	bcs.n	80105e8 <find_volume+0x3ac>
 80105e4:	230d      	movs	r3, #13
 80105e6:	e06a      	b.n	80106be <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295
 80105ee:	611a      	str	r2, [r3, #16]
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	691a      	ldr	r2, [r3, #16]
 80105f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	2280      	movs	r2, #128	; 0x80
 80105fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80105fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010602:	2b03      	cmp	r3, #3
 8010604:	d149      	bne.n	801069a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	3330      	adds	r3, #48	; 0x30
 801060a:	3330      	adds	r3, #48	; 0x30
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe fb3b 	bl	800ec88 <ld_word>
 8010612:	4603      	mov	r3, r0
 8010614:	2b01      	cmp	r3, #1
 8010616:	d140      	bne.n	801069a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061a:	3301      	adds	r3, #1
 801061c:	4619      	mov	r1, r3
 801061e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010620:	f7fe fde2 	bl	800f1e8 <move_window>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d137      	bne.n	801069a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062c:	2200      	movs	r2, #0
 801062e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010632:	3330      	adds	r3, #48	; 0x30
 8010634:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe fb25 	bl	800ec88 <ld_word>
 801063e:	4603      	mov	r3, r0
 8010640:	461a      	mov	r2, r3
 8010642:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010646:	429a      	cmp	r2, r3
 8010648:	d127      	bne.n	801069a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801064a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064c:	3330      	adds	r3, #48	; 0x30
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe fb32 	bl	800ecb8 <ld_dword>
 8010654:	4603      	mov	r3, r0
 8010656:	4a1c      	ldr	r2, [pc, #112]	; (80106c8 <find_volume+0x48c>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d11e      	bne.n	801069a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801065c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065e:	3330      	adds	r3, #48	; 0x30
 8010660:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010664:	4618      	mov	r0, r3
 8010666:	f7fe fb27 	bl	800ecb8 <ld_dword>
 801066a:	4603      	mov	r3, r0
 801066c:	4a17      	ldr	r2, [pc, #92]	; (80106cc <find_volume+0x490>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d113      	bne.n	801069a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010674:	3330      	adds	r3, #48	; 0x30
 8010676:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801067a:	4618      	mov	r0, r3
 801067c:	f7fe fb1c 	bl	800ecb8 <ld_dword>
 8010680:	4602      	mov	r2, r0
 8010682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010684:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010688:	3330      	adds	r3, #48	; 0x30
 801068a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801068e:	4618      	mov	r0, r3
 8010690:	f7fe fb12 	bl	800ecb8 <ld_dword>
 8010694:	4602      	mov	r2, r0
 8010696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010698:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801069a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80106a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80106a2:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <find_volume+0x494>)
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	3301      	adds	r3, #1
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	4b09      	ldr	r3, [pc, #36]	; (80106d0 <find_volume+0x494>)
 80106ac:	801a      	strh	r2, [r3, #0]
 80106ae:	4b08      	ldr	r3, [pc, #32]	; (80106d0 <find_volume+0x494>)
 80106b0:	881a      	ldrh	r2, [r3, #0]
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80106b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106b8:	f7fe fd2e 	bl	800f118 <clear_lock>
#endif
	return FR_OK;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3758      	adds	r7, #88	; 0x58
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	41615252 	.word	0x41615252
 80106cc:	61417272 	.word	0x61417272
 80106d0:	20000e44 	.word	0x20000e44

080106d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80106de:	2309      	movs	r3, #9
 80106e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d01c      	beq.n	8010722 <validate+0x4e>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d018      	beq.n	8010722 <validate+0x4e>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d013      	beq.n	8010722 <validate+0x4e>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	889a      	ldrh	r2, [r3, #4]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	88db      	ldrh	r3, [r3, #6]
 8010704:	429a      	cmp	r2, r3
 8010706:	d10c      	bne.n	8010722 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	785b      	ldrb	r3, [r3, #1]
 801070e:	4618      	mov	r0, r3
 8010710:	f7fe fa1c 	bl	800eb4c <disk_status>
 8010714:	4603      	mov	r3, r0
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <validate+0x4e>
			res = FR_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d102      	bne.n	801072e <validate+0x5a>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	e000      	b.n	8010730 <validate+0x5c>
 801072e:	2300      	movs	r3, #0
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	6013      	str	r3, [r2, #0]
	return res;
 8010734:	7bfb      	ldrb	r3, [r7, #15]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010752:	f107 0310 	add.w	r3, r7, #16
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff fcd5 	bl	8010106 <get_ldnumber>
 801075c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	2b00      	cmp	r3, #0
 8010762:	da01      	bge.n	8010768 <f_mount+0x28>
 8010764:	230b      	movs	r3, #11
 8010766:	e02b      	b.n	80107c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010768:	4a17      	ldr	r2, [pc, #92]	; (80107c8 <f_mount+0x88>)
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010770:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d005      	beq.n	8010784 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010778:	69b8      	ldr	r0, [r7, #24]
 801077a:	f7fe fccd 	bl	800f118 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	2200      	movs	r2, #0
 8010782:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d002      	beq.n	8010790 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2200      	movs	r2, #0
 801078e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	490d      	ldr	r1, [pc, #52]	; (80107c8 <f_mount+0x88>)
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d002      	beq.n	80107a6 <f_mount+0x66>
 80107a0:	79fb      	ldrb	r3, [r7, #7]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d001      	beq.n	80107aa <f_mount+0x6a>
 80107a6:	2300      	movs	r3, #0
 80107a8:	e00a      	b.n	80107c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80107aa:	f107 010c 	add.w	r1, r7, #12
 80107ae:	f107 0308 	add.w	r3, r7, #8
 80107b2:	2200      	movs	r2, #0
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff fd41 	bl	801023c <find_volume>
 80107ba:	4603      	mov	r3, r0
 80107bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80107be:	7dfb      	ldrb	r3, [r7, #23]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3720      	adds	r7, #32
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	20000e40 	.word	0x20000e40

080107cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b098      	sub	sp, #96	; 0x60
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	4613      	mov	r3, r2
 80107d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d101      	bne.n	80107e4 <f_open+0x18>
 80107e0:	2309      	movs	r3, #9
 80107e2:	e1ad      	b.n	8010b40 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80107ec:	79fa      	ldrb	r2, [r7, #7]
 80107ee:	f107 0110 	add.w	r1, r7, #16
 80107f2:	f107 0308 	add.w	r3, r7, #8
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff fd20 	bl	801023c <find_volume>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010806:	2b00      	cmp	r3, #0
 8010808:	f040 8191 	bne.w	8010b2e <f_open+0x362>
		dj.obj.fs = fs;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	f107 0314 	add.w	r3, r7, #20
 8010816:	4611      	mov	r1, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f7ff fc03 	bl	8010024 <follow_path>
 801081e:	4603      	mov	r3, r0
 8010820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010828:	2b00      	cmp	r3, #0
 801082a:	d11a      	bne.n	8010862 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801082c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010830:	b25b      	sxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	da03      	bge.n	801083e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010836:	2306      	movs	r3, #6
 8010838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801083c:	e011      	b.n	8010862 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	f023 0301 	bic.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	bf14      	ite	ne
 8010848:	2301      	movne	r3, #1
 801084a:	2300      	moveq	r3, #0
 801084c:	b2db      	uxtb	r3, r3
 801084e:	461a      	mov	r2, r3
 8010850:	f107 0314 	add.w	r3, r7, #20
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe fb16 	bl	800ee88 <chk_lock>
 801085c:	4603      	mov	r3, r0
 801085e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010862:	79fb      	ldrb	r3, [r7, #7]
 8010864:	f003 031c 	and.w	r3, r3, #28
 8010868:	2b00      	cmp	r3, #0
 801086a:	d07f      	beq.n	801096c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801086c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010870:	2b00      	cmp	r3, #0
 8010872:	d017      	beq.n	80108a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010878:	2b04      	cmp	r3, #4
 801087a:	d10e      	bne.n	801089a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801087c:	f7fe fb60 	bl	800ef40 <enq_lock>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d006      	beq.n	8010894 <f_open+0xc8>
 8010886:	f107 0314 	add.w	r3, r7, #20
 801088a:	4618      	mov	r0, r3
 801088c:	f7ff faa4 	bl	800fdd8 <dir_register>
 8010890:	4603      	mov	r3, r0
 8010892:	e000      	b.n	8010896 <f_open+0xca>
 8010894:	2312      	movs	r3, #18
 8010896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801089a:	79fb      	ldrb	r3, [r7, #7]
 801089c:	f043 0308 	orr.w	r3, r3, #8
 80108a0:	71fb      	strb	r3, [r7, #7]
 80108a2:	e010      	b.n	80108c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80108a4:	7ebb      	ldrb	r3, [r7, #26]
 80108a6:	f003 0311 	and.w	r3, r3, #17
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d003      	beq.n	80108b6 <f_open+0xea>
					res = FR_DENIED;
 80108ae:	2307      	movs	r3, #7
 80108b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80108b4:	e007      	b.n	80108c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	f003 0304 	and.w	r3, r3, #4
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <f_open+0xfa>
 80108c0:	2308      	movs	r3, #8
 80108c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80108c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d168      	bne.n	80109a0 <f_open+0x1d4>
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	f003 0308 	and.w	r3, r3, #8
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d063      	beq.n	80109a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80108d8:	f7fa fd22 	bl	800b320 <get_fattime>
 80108dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80108de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e0:	330e      	adds	r3, #14
 80108e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7fe fa25 	bl	800ed34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80108ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ec:	3316      	adds	r3, #22
 80108ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fe fa1f 	bl	800ed34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	330b      	adds	r3, #11
 80108fa:	2220      	movs	r2, #32
 80108fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010902:	4611      	mov	r1, r2
 8010904:	4618      	mov	r0, r3
 8010906:	f7ff f976 	bl	800fbf6 <ld_clust>
 801090a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010910:	2200      	movs	r2, #0
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff f98e 	bl	800fc34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091a:	331c      	adds	r3, #28
 801091c:	2100      	movs	r1, #0
 801091e:	4618      	mov	r0, r3
 8010920:	f7fe fa08 	bl	800ed34 <st_dword>
					fs->wflag = 1;
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	2201      	movs	r2, #1
 8010928:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801092a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092c:	2b00      	cmp	r3, #0
 801092e:	d037      	beq.n	80109a0 <f_open+0x1d4>
						dw = fs->winsect;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010934:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010936:	f107 0314 	add.w	r3, r7, #20
 801093a:	2200      	movs	r2, #0
 801093c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801093e:	4618      	mov	r0, r3
 8010940:	f7fe fea1 	bl	800f686 <remove_chain>
 8010944:	4603      	mov	r3, r0
 8010946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801094a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801094e:	2b00      	cmp	r3, #0
 8010950:	d126      	bne.n	80109a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fc46 	bl	800f1e8 <move_window>
 801095c:	4603      	mov	r3, r0
 801095e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010966:	3a01      	subs	r2, #1
 8010968:	60da      	str	r2, [r3, #12]
 801096a:	e019      	b.n	80109a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801096c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010970:	2b00      	cmp	r3, #0
 8010972:	d115      	bne.n	80109a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010974:	7ebb      	ldrb	r3, [r7, #26]
 8010976:	f003 0310 	and.w	r3, r3, #16
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <f_open+0x1ba>
					res = FR_NO_FILE;
 801097e:	2304      	movs	r3, #4
 8010980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010984:	e00c      	b.n	80109a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010986:	79fb      	ldrb	r3, [r7, #7]
 8010988:	f003 0302 	and.w	r3, r3, #2
 801098c:	2b00      	cmp	r3, #0
 801098e:	d007      	beq.n	80109a0 <f_open+0x1d4>
 8010990:	7ebb      	ldrb	r3, [r7, #26]
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <f_open+0x1d4>
						res = FR_DENIED;
 801099a:	2307      	movs	r3, #7
 801099c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80109a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d128      	bne.n	80109fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80109a8:	79fb      	ldrb	r3, [r7, #7]
 80109aa:	f003 0308 	and.w	r3, r3, #8
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d003      	beq.n	80109ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80109c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	f023 0301 	bic.w	r3, r3, #1
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bf14      	ite	ne
 80109d2:	2301      	movne	r3, #1
 80109d4:	2300      	moveq	r3, #0
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	461a      	mov	r2, r3
 80109da:	f107 0314 	add.w	r3, r7, #20
 80109de:	4611      	mov	r1, r2
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fe facf 	bl	800ef84 <inc_lock>
 80109e6:	4602      	mov	r2, r0
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d102      	bne.n	80109fa <f_open+0x22e>
 80109f4:	2302      	movs	r3, #2
 80109f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80109fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f040 8095 	bne.w	8010b2e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a08:	4611      	mov	r1, r2
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff f8f3 	bl	800fbf6 <ld_clust>
 8010a10:	4602      	mov	r2, r0
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a18:	331c      	adds	r3, #28
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe f94c 	bl	800ecb8 <ld_dword>
 8010a20:	4602      	mov	r2, r0
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010a2c:	693a      	ldr	r2, [r7, #16]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	88da      	ldrh	r2, [r3, #6]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	79fa      	ldrb	r2, [r7, #7]
 8010a3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2200      	movs	r2, #0
 8010a44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	3330      	adds	r3, #48	; 0x30
 8010a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fe f9b6 	bl	800edce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	f003 0320 	and.w	r3, r3, #32
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d060      	beq.n	8010b2e <f_open+0x362>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d05c      	beq.n	8010b2e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	895b      	ldrh	r3, [r3, #10]
 8010a80:	025b      	lsls	r3, r3, #9
 8010a82:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8010a90:	e016      	b.n	8010ac0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fe fc61 	bl	800f35e <get_fat>
 8010a9c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d802      	bhi.n	8010aaa <f_open+0x2de>
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab0:	d102      	bne.n	8010ab8 <f_open+0x2ec>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	657b      	str	r3, [r7, #84]	; 0x54
 8010ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d103      	bne.n	8010ad0 <f_open+0x304>
 8010ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d8e0      	bhi.n	8010a92 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ad4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d127      	bne.n	8010b2e <f_open+0x362>
 8010ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d022      	beq.n	8010b2e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fc17 	bl	800f320 <clust2sect>
 8010af2:	6478      	str	r0, [r7, #68]	; 0x44
 8010af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d103      	bne.n	8010b02 <f_open+0x336>
						res = FR_INT_ERR;
 8010afa:	2302      	movs	r3, #2
 8010afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010b00:	e015      	b.n	8010b2e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b04:	0a5a      	lsrs	r2, r3, #9
 8010b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b08:	441a      	add	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	7858      	ldrb	r0, [r3, #1]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6a1a      	ldr	r2, [r3, #32]
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	f7fe f855 	bl	800ebcc <disk_read>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <f_open+0x362>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d002      	beq.n	8010b3c <f_open+0x370>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3760      	adds	r7, #96	; 0x60
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b08e      	sub	sp, #56	; 0x38
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
 8010b54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f107 0214 	add.w	r2, r7, #20
 8010b66:	4611      	mov	r1, r2
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fdb3 	bl	80106d4 <validate>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d107      	bne.n	8010b8c <f_read+0x44>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	7d5b      	ldrb	r3, [r3, #21]
 8010b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d002      	beq.n	8010b92 <f_read+0x4a>
 8010b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b90:	e115      	b.n	8010dbe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	7d1b      	ldrb	r3, [r3, #20]
 8010b96:	f003 0301 	and.w	r3, r3, #1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d101      	bne.n	8010ba2 <f_read+0x5a>
 8010b9e:	2307      	movs	r3, #7
 8010ba0:	e10d      	b.n	8010dbe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	68da      	ldr	r2, [r3, #12]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6a3b      	ldr	r3, [r7, #32]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	f240 80fe 	bls.w	8010db4 <f_read+0x26c>
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010bbc:	e0fa      	b.n	8010db4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	699b      	ldr	r3, [r3, #24]
 8010bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f040 80c6 	bne.w	8010d58 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	0a5b      	lsrs	r3, r3, #9
 8010bd2:	697a      	ldr	r2, [r7, #20]
 8010bd4:	8952      	ldrh	r2, [r2, #10]
 8010bd6:	3a01      	subs	r2, #1
 8010bd8:	4013      	ands	r3, r2
 8010bda:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d12f      	bne.n	8010c42 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d103      	bne.n	8010bf2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	633b      	str	r3, [r7, #48]	; 0x30
 8010bf0:	e013      	b.n	8010c1a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d007      	beq.n	8010c0a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	4619      	mov	r1, r3
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f7fe fe3d 	bl	800f880 <clmt_clust>
 8010c06:	6338      	str	r0, [r7, #48]	; 0x30
 8010c08:	e007      	b.n	8010c1a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	69db      	ldr	r3, [r3, #28]
 8010c10:	4619      	mov	r1, r3
 8010c12:	4610      	mov	r0, r2
 8010c14:	f7fe fba3 	bl	800f35e <get_fat>
 8010c18:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d804      	bhi.n	8010c2a <f_read+0xe2>
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2202      	movs	r2, #2
 8010c24:	755a      	strb	r2, [r3, #21]
 8010c26:	2302      	movs	r3, #2
 8010c28:	e0c9      	b.n	8010dbe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c30:	d104      	bne.n	8010c3c <f_read+0xf4>
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2201      	movs	r2, #1
 8010c36:	755a      	strb	r2, [r3, #21]
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e0c0      	b.n	8010dbe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	69db      	ldr	r3, [r3, #28]
 8010c48:	4619      	mov	r1, r3
 8010c4a:	4610      	mov	r0, r2
 8010c4c:	f7fe fb68 	bl	800f320 <clust2sect>
 8010c50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d104      	bne.n	8010c62 <f_read+0x11a>
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	755a      	strb	r2, [r3, #21]
 8010c5e:	2302      	movs	r3, #2
 8010c60:	e0ad      	b.n	8010dbe <f_read+0x276>
			sect += csect;
 8010c62:	69ba      	ldr	r2, [r7, #24]
 8010c64:	69fb      	ldr	r3, [r7, #28]
 8010c66:	4413      	add	r3, r2
 8010c68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	0a5b      	lsrs	r3, r3, #9
 8010c6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d039      	beq.n	8010cea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c76:	69fa      	ldr	r2, [r7, #28]
 8010c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7a:	4413      	add	r3, r2
 8010c7c:	697a      	ldr	r2, [r7, #20]
 8010c7e:	8952      	ldrh	r2, [r2, #10]
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d905      	bls.n	8010c90 <f_read+0x148>
					cc = fs->csize - csect;
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	895b      	ldrh	r3, [r3, #10]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	7858      	ldrb	r0, [r3, #1]
 8010c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c96:	69ba      	ldr	r2, [r7, #24]
 8010c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c9a:	f7fd ff97 	bl	800ebcc <disk_read>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d004      	beq.n	8010cae <f_read+0x166>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	755a      	strb	r2, [r3, #21]
 8010caa:	2301      	movs	r3, #1
 8010cac:	e087      	b.n	8010dbe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	7d1b      	ldrb	r3, [r3, #20]
 8010cb2:	b25b      	sxtb	r3, r3
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	da14      	bge.n	8010ce2 <f_read+0x19a>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	6a1a      	ldr	r2, [r3, #32]
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d90d      	bls.n	8010ce2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6a1a      	ldr	r2, [r3, #32]
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	025b      	lsls	r3, r3, #9
 8010cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd2:	18d0      	adds	r0, r2, r3
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	3330      	adds	r3, #48	; 0x30
 8010cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cdc:	4619      	mov	r1, r3
 8010cde:	f7fe f855 	bl	800ed8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	025b      	lsls	r3, r3, #9
 8010ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010ce8:	e050      	b.n	8010d8c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6a1b      	ldr	r3, [r3, #32]
 8010cee:	69ba      	ldr	r2, [r7, #24]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d02e      	beq.n	8010d52 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	7d1b      	ldrb	r3, [r3, #20]
 8010cf8:	b25b      	sxtb	r3, r3
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	da18      	bge.n	8010d30 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	7858      	ldrb	r0, [r3, #1]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6a1a      	ldr	r2, [r3, #32]
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	f7fd ff7d 	bl	800ec0c <disk_write>
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d004      	beq.n	8010d22 <f_read+0x1da>
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	755a      	strb	r2, [r3, #21]
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e04d      	b.n	8010dbe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	7d1b      	ldrb	r3, [r3, #20]
 8010d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	7858      	ldrb	r0, [r3, #1]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	69ba      	ldr	r2, [r7, #24]
 8010d3e:	f7fd ff45 	bl	800ebcc <disk_read>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d004      	beq.n	8010d52 <f_read+0x20a>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	755a      	strb	r2, [r3, #21]
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e035      	b.n	8010dbe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	69ba      	ldr	r2, [r7, #24]
 8010d56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	699b      	ldr	r3, [r3, #24]
 8010d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d64:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d901      	bls.n	8010d72 <f_read+0x22a>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	699b      	ldr	r3, [r3, #24]
 8010d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d80:	4413      	add	r3, r2
 8010d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d84:	4619      	mov	r1, r3
 8010d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d88:	f7fe f800 	bl	800ed8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d90:	4413      	add	r3, r2
 8010d92:	627b      	str	r3, [r7, #36]	; 0x24
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	699a      	ldr	r2, [r3, #24]
 8010d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9a:	441a      	add	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	619a      	str	r2, [r3, #24]
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da6:	441a      	add	r2, r3
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	601a      	str	r2, [r3, #0]
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f47f af01 	bne.w	8010bbe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010dbc:	2300      	movs	r3, #0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3738      	adds	r7, #56	; 0x38
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b08c      	sub	sp, #48	; 0x30
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	60f8      	str	r0, [r7, #12]
 8010dce:	60b9      	str	r1, [r7, #8]
 8010dd0:	607a      	str	r2, [r7, #4]
 8010dd2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f107 0210 	add.w	r2, r7, #16
 8010de4:	4611      	mov	r1, r2
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff fc74 	bl	80106d4 <validate>
 8010dec:	4603      	mov	r3, r0
 8010dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d107      	bne.n	8010e0a <f_write+0x44>
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	7d5b      	ldrb	r3, [r3, #21]
 8010dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <f_write+0x4a>
 8010e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e0e:	e14b      	b.n	80110a8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	7d1b      	ldrb	r3, [r3, #20]
 8010e14:	f003 0302 	and.w	r3, r3, #2
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d101      	bne.n	8010e20 <f_write+0x5a>
 8010e1c:	2307      	movs	r3, #7
 8010e1e:	e143      	b.n	80110a8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	699a      	ldr	r2, [r3, #24]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	441a      	add	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	f080 812d 	bcs.w	801108c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	43db      	mvns	r3, r3
 8010e38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010e3a:	e127      	b.n	801108c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f040 80e3 	bne.w	8011010 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	699b      	ldr	r3, [r3, #24]
 8010e4e:	0a5b      	lsrs	r3, r3, #9
 8010e50:	693a      	ldr	r2, [r7, #16]
 8010e52:	8952      	ldrh	r2, [r2, #10]
 8010e54:	3a01      	subs	r2, #1
 8010e56:	4013      	ands	r3, r2
 8010e58:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d143      	bne.n	8010ee8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10c      	bne.n	8010e82 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d11a      	bne.n	8010eaa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2100      	movs	r1, #0
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fe fc69 	bl	800f750 <create_chain>
 8010e7e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010e80:	e013      	b.n	8010eaa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d007      	beq.n	8010e9a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	699b      	ldr	r3, [r3, #24]
 8010e8e:	4619      	mov	r1, r3
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f7fe fcf5 	bl	800f880 <clmt_clust>
 8010e96:	62b8      	str	r0, [r7, #40]	; 0x28
 8010e98:	e007      	b.n	8010eaa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	69db      	ldr	r3, [r3, #28]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	f7fe fc54 	bl	800f750 <create_chain>
 8010ea8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f000 80f2 	beq.w	8011096 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d104      	bne.n	8010ec2 <f_write+0xfc>
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2202      	movs	r2, #2
 8010ebc:	755a      	strb	r2, [r3, #21]
 8010ebe:	2302      	movs	r3, #2
 8010ec0:	e0f2      	b.n	80110a8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec8:	d104      	bne.n	8010ed4 <f_write+0x10e>
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2201      	movs	r2, #1
 8010ece:	755a      	strb	r2, [r3, #21]
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e0e9      	b.n	80110a8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ed8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d102      	bne.n	8010ee8 <f_write+0x122>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ee6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	7d1b      	ldrb	r3, [r3, #20]
 8010eec:	b25b      	sxtb	r3, r3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	da18      	bge.n	8010f24 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	7858      	ldrb	r0, [r3, #1]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6a1a      	ldr	r2, [r3, #32]
 8010f00:	2301      	movs	r3, #1
 8010f02:	f7fd fe83 	bl	800ec0c <disk_write>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d004      	beq.n	8010f16 <f_write+0x150>
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	755a      	strb	r2, [r3, #21]
 8010f12:	2301      	movs	r3, #1
 8010f14:	e0c8      	b.n	80110a8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	7d1b      	ldrb	r3, [r3, #20]
 8010f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	69db      	ldr	r3, [r3, #28]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	4610      	mov	r0, r2
 8010f2e:	f7fe f9f7 	bl	800f320 <clust2sect>
 8010f32:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d104      	bne.n	8010f44 <f_write+0x17e>
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	755a      	strb	r2, [r3, #21]
 8010f40:	2302      	movs	r3, #2
 8010f42:	e0b1      	b.n	80110a8 <f_write+0x2e2>
			sect += csect;
 8010f44:	697a      	ldr	r2, [r7, #20]
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	4413      	add	r3, r2
 8010f4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	0a5b      	lsrs	r3, r3, #9
 8010f50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010f52:	6a3b      	ldr	r3, [r7, #32]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d03c      	beq.n	8010fd2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010f58:	69ba      	ldr	r2, [r7, #24]
 8010f5a:	6a3b      	ldr	r3, [r7, #32]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	693a      	ldr	r2, [r7, #16]
 8010f60:	8952      	ldrh	r2, [r2, #10]
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d905      	bls.n	8010f72 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	895b      	ldrh	r3, [r3, #10]
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	7858      	ldrb	r0, [r3, #1]
 8010f76:	6a3b      	ldr	r3, [r7, #32]
 8010f78:	697a      	ldr	r2, [r7, #20]
 8010f7a:	69f9      	ldr	r1, [r7, #28]
 8010f7c:	f7fd fe46 	bl	800ec0c <disk_write>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d004      	beq.n	8010f90 <f_write+0x1ca>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	755a      	strb	r2, [r3, #21]
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e08b      	b.n	80110a8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6a1a      	ldr	r2, [r3, #32]
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	6a3a      	ldr	r2, [r7, #32]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d915      	bls.n	8010fca <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	6a1a      	ldr	r2, [r3, #32]
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	025b      	lsls	r3, r3, #9
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	f7fd fee8 	bl	800ed8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7d1b      	ldrb	r3, [r3, #20]
 8010fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fc4:	b2da      	uxtb	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010fca:	6a3b      	ldr	r3, [r7, #32]
 8010fcc:	025b      	lsls	r3, r3, #9
 8010fce:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010fd0:	e03f      	b.n	8011052 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6a1b      	ldr	r3, [r3, #32]
 8010fd6:	697a      	ldr	r2, [r7, #20]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d016      	beq.n	801100a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	699a      	ldr	r2, [r3, #24]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d210      	bcs.n	801100a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	7858      	ldrb	r0, [r3, #1]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	f7fd fde9 	bl	800ebcc <disk_read>
 8010ffa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d004      	beq.n	801100a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2201      	movs	r2, #1
 8011004:	755a      	strb	r2, [r3, #21]
 8011006:	2301      	movs	r3, #1
 8011008:	e04e      	b.n	80110a8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	699b      	ldr	r3, [r3, #24]
 8011014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011018:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801101c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801101e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	d901      	bls.n	801102a <f_write+0x264>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011038:	4413      	add	r3, r2
 801103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801103c:	69f9      	ldr	r1, [r7, #28]
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd fea4 	bl	800ed8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	7d1b      	ldrb	r3, [r3, #20]
 8011048:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801104c:	b2da      	uxtb	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011052:	69fa      	ldr	r2, [r7, #28]
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	4413      	add	r3, r2
 8011058:	61fb      	str	r3, [r7, #28]
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	699a      	ldr	r2, [r3, #24]
 801105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011060:	441a      	add	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	619a      	str	r2, [r3, #24]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68da      	ldr	r2, [r3, #12]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	699b      	ldr	r3, [r3, #24]
 801106e:	429a      	cmp	r2, r3
 8011070:	bf38      	it	cc
 8011072:	461a      	movcc	r2, r3
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	60da      	str	r2, [r3, #12]
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	441a      	add	r2, r3
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	601a      	str	r2, [r3, #0]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	f47f aed4 	bne.w	8010e3c <f_write+0x76>
 8011094:	e000      	b.n	8011098 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011096:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	7d1b      	ldrb	r3, [r3, #20]
 801109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3730      	adds	r7, #48	; 0x30
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f107 0208 	add.w	r2, r7, #8
 80110be:	4611      	mov	r1, r2
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff fb07 	bl	80106d4 <validate>
 80110c6:	4603      	mov	r3, r0
 80110c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d168      	bne.n	80111a2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	7d1b      	ldrb	r3, [r3, #20]
 80110d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d062      	beq.n	80111a2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	7d1b      	ldrb	r3, [r3, #20]
 80110e0:	b25b      	sxtb	r3, r3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	da15      	bge.n	8011112 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	7858      	ldrb	r0, [r3, #1]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6a1a      	ldr	r2, [r3, #32]
 80110f4:	2301      	movs	r3, #1
 80110f6:	f7fd fd89 	bl	800ec0c <disk_write>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <f_sync+0x54>
 8011100:	2301      	movs	r3, #1
 8011102:	e04f      	b.n	80111a4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	7d1b      	ldrb	r3, [r3, #20]
 8011108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801110c:	b2da      	uxtb	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011112:	f7fa f905 	bl	800b320 <get_fattime>
 8011116:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111e:	4619      	mov	r1, r3
 8011120:	4610      	mov	r0, r2
 8011122:	f7fe f861 	bl	800f1e8 <move_window>
 8011126:	4603      	mov	r3, r0
 8011128:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d138      	bne.n	80111a2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011134:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	330b      	adds	r3, #11
 801113a:	781a      	ldrb	r2, [r3, #0]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	330b      	adds	r3, #11
 8011140:	f042 0220 	orr.w	r2, r2, #32
 8011144:	b2d2      	uxtb	r2, r2
 8011146:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6818      	ldr	r0, [r3, #0]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	689b      	ldr	r3, [r3, #8]
 8011150:	461a      	mov	r2, r3
 8011152:	68f9      	ldr	r1, [r7, #12]
 8011154:	f7fe fd6e 	bl	800fc34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f103 021c 	add.w	r2, r3, #28
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	4619      	mov	r1, r3
 8011164:	4610      	mov	r0, r2
 8011166:	f7fd fde5 	bl	800ed34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	3316      	adds	r3, #22
 801116e:	6939      	ldr	r1, [r7, #16]
 8011170:	4618      	mov	r0, r3
 8011172:	f7fd fddf 	bl	800ed34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	3312      	adds	r3, #18
 801117a:	2100      	movs	r1, #0
 801117c:	4618      	mov	r0, r3
 801117e:	f7fd fdbe 	bl	800ecfe <st_word>
					fs->wflag = 1;
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	2201      	movs	r2, #1
 8011186:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	4618      	mov	r0, r3
 801118c:	f7fe f85a 	bl	800f244 <sync_fs>
 8011190:	4603      	mov	r3, r0
 8011192:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	7d1b      	ldrb	r3, [r3, #20]
 8011198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801119c:	b2da      	uxtb	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80111a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3718      	adds	r7, #24
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7ff ff7b 	bl	80110b0 <f_sync>
 80111ba:	4603      	mov	r3, r0
 80111bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80111be:	7bfb      	ldrb	r3, [r7, #15]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d118      	bne.n	80111f6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f107 0208 	add.w	r2, r7, #8
 80111ca:	4611      	mov	r1, r2
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7ff fa81 	bl	80106d4 <validate>
 80111d2:	4603      	mov	r3, r0
 80111d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80111d6:	7bfb      	ldrb	r3, [r7, #15]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10c      	bne.n	80111f6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fd ff5d 	bl	800f0a0 <dec_lock>
 80111e6:	4603      	mov	r3, r0
 80111e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d102      	bne.n	80111f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d101      	bne.n	8011214 <f_opendir+0x14>
 8011210:	2309      	movs	r3, #9
 8011212:	e064      	b.n	80112de <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011218:	f107 010c 	add.w	r1, r7, #12
 801121c:	463b      	mov	r3, r7
 801121e:	2200      	movs	r2, #0
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff f80b 	bl	801023c <find_volume>
 8011226:	4603      	mov	r3, r0
 8011228:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801122a:	7dfb      	ldrb	r3, [r7, #23]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d14f      	bne.n	80112d0 <f_opendir+0xd0>
		obj->fs = fs;
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	4619      	mov	r1, r3
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7fe fef2 	bl	8010024 <follow_path>
 8011240:	4603      	mov	r3, r0
 8011242:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011244:	7dfb      	ldrb	r3, [r7, #23]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d13d      	bne.n	80112c6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011250:	b25b      	sxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	db12      	blt.n	801127c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	799b      	ldrb	r3, [r3, #6]
 801125a:	f003 0310 	and.w	r3, r3, #16
 801125e:	2b00      	cmp	r3, #0
 8011260:	d00a      	beq.n	8011278 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6a1b      	ldr	r3, [r3, #32]
 8011268:	4619      	mov	r1, r3
 801126a:	4610      	mov	r0, r2
 801126c:	f7fe fcc3 	bl	800fbf6 <ld_clust>
 8011270:	4602      	mov	r2, r0
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	609a      	str	r2, [r3, #8]
 8011276:	e001      	b.n	801127c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011278:	2305      	movs	r3, #5
 801127a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801127c:	7dfb      	ldrb	r3, [r7, #23]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d121      	bne.n	80112c6 <f_opendir+0xc6>
				obj->id = fs->id;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	88da      	ldrh	r2, [r3, #6]
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801128a:	2100      	movs	r1, #0
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7fe fb2b 	bl	800f8e8 <dir_sdi>
 8011292:	4603      	mov	r3, r0
 8011294:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011296:	7dfb      	ldrb	r3, [r7, #23]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d114      	bne.n	80112c6 <f_opendir+0xc6>
					if (obj->sclust) {
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d00d      	beq.n	80112c0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80112a4:	2100      	movs	r1, #0
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f7fd fe6c 	bl	800ef84 <inc_lock>
 80112ac:	4602      	mov	r2, r0
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d105      	bne.n	80112c6 <f_opendir+0xc6>
 80112ba:	2312      	movs	r3, #18
 80112bc:	75fb      	strb	r3, [r7, #23]
 80112be:	e002      	b.n	80112c6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	2200      	movs	r2, #0
 80112c4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80112c6:	7dfb      	ldrb	r3, [r7, #23]
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	d101      	bne.n	80112d0 <f_opendir+0xd0>
 80112cc:	2305      	movs	r3, #5
 80112ce:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80112d0:	7dfb      	ldrb	r3, [r7, #23]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d002      	beq.n	80112dc <f_opendir+0xdc>
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80112dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3718      	adds	r7, #24
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f107 0208 	add.w	r2, r7, #8
 80112f4:	4611      	mov	r1, r2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7ff f9ec 	bl	80106d4 <validate>
 80112fc:	4603      	mov	r3, r0
 80112fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011300:	7bfb      	ldrb	r3, [r7, #15]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d110      	bne.n	8011328 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d006      	beq.n	801131c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	4618      	mov	r0, r3
 8011314:	f7fd fec4 	bl	800f0a0 <dec_lock>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801131c:	7bfb      	ldrb	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d102      	bne.n	8011328 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011328:	7bfb      	ldrb	r3, [r7, #15]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b084      	sub	sp, #16
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f107 0208 	add.w	r2, r7, #8
 8011342:	4611      	mov	r1, r2
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff f9c5 	bl	80106d4 <validate>
 801134a:	4603      	mov	r3, r0
 801134c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801134e:	7bfb      	ldrb	r3, [r7, #15]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d126      	bne.n	80113a2 <f_readdir+0x70>
		if (!fno) {
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d106      	bne.n	8011368 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801135a:	2100      	movs	r1, #0
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7fe fac3 	bl	800f8e8 <dir_sdi>
 8011362:	4603      	mov	r3, r0
 8011364:	73fb      	strb	r3, [r7, #15]
 8011366:	e01c      	b.n	80113a2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011368:	2100      	movs	r1, #0
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7fe fc82 	bl	800fc74 <dir_read>
 8011370:	4603      	mov	r3, r0
 8011372:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011374:	7bfb      	ldrb	r3, [r7, #15]
 8011376:	2b04      	cmp	r3, #4
 8011378:	d101      	bne.n	801137e <f_readdir+0x4c>
 801137a:	2300      	movs	r3, #0
 801137c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10e      	bne.n	80113a2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011384:	6839      	ldr	r1, [r7, #0]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7fe fd58 	bl	800fe3c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801138c:	2100      	movs	r1, #0
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7fe fb25 	bl	800f9de <dir_next>
 8011394:	4603      	mov	r3, r0
 8011396:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011398:	7bfb      	ldrb	r3, [r7, #15]
 801139a:	2b04      	cmp	r3, #4
 801139c:	d101      	bne.n	80113a2 <f_readdir+0x70>
 801139e:	2300      	movs	r3, #0
 80113a0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80113a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b090      	sub	sp, #64	; 0x40
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80113b6:	f107 010c 	add.w	r1, r7, #12
 80113ba:	1d3b      	adds	r3, r7, #4
 80113bc:	2200      	movs	r2, #0
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fe ff3c 	bl	801023c <find_volume>
 80113c4:	4603      	mov	r3, r0
 80113c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80113ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d11f      	bne.n	8011412 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	f107 030c 	add.w	r3, r7, #12
 80113d8:	4611      	mov	r1, r2
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fe fe22 	bl	8010024 <follow_path>
 80113e0:	4603      	mov	r3, r0
 80113e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80113e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d111      	bne.n	8011412 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80113ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80113f2:	b25b      	sxtb	r3, r3
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	da03      	bge.n	8011400 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80113f8:	2306      	movs	r3, #6
 80113fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80113fe:	e008      	b.n	8011412 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d005      	beq.n	8011412 <f_stat+0x66>
 8011406:	f107 030c 	add.w	r3, r7, #12
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	4618      	mov	r0, r3
 801140e:	f7fe fd15 	bl	800fe3c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8011412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011416:	4618      	mov	r0, r3
 8011418:	3740      	adds	r7, #64	; 0x40
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
	...

08011420 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011420:	b480      	push	{r7}
 8011422:	b087      	sub	sp, #28
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	4613      	mov	r3, r2
 801142c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801142e:	2301      	movs	r3, #1
 8011430:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011432:	2300      	movs	r3, #0
 8011434:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011436:	4b1f      	ldr	r3, [pc, #124]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011438:	7a5b      	ldrb	r3, [r3, #9]
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d131      	bne.n	80114a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011440:	4b1c      	ldr	r3, [pc, #112]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011442:	7a5b      	ldrb	r3, [r3, #9]
 8011444:	b2db      	uxtb	r3, r3
 8011446:	461a      	mov	r2, r3
 8011448:	4b1a      	ldr	r3, [pc, #104]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 801144a:	2100      	movs	r1, #0
 801144c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801144e:	4b19      	ldr	r3, [pc, #100]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011450:	7a5b      	ldrb	r3, [r3, #9]
 8011452:	b2db      	uxtb	r3, r3
 8011454:	4a17      	ldr	r2, [pc, #92]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	68fa      	ldr	r2, [r7, #12]
 801145c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801145e:	4b15      	ldr	r3, [pc, #84]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011460:	7a5b      	ldrb	r3, [r3, #9]
 8011462:	b2db      	uxtb	r3, r3
 8011464:	461a      	mov	r2, r3
 8011466:	4b13      	ldr	r3, [pc, #76]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011468:	4413      	add	r3, r2
 801146a:	79fa      	ldrb	r2, [r7, #7]
 801146c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801146e:	4b11      	ldr	r3, [pc, #68]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 8011470:	7a5b      	ldrb	r3, [r3, #9]
 8011472:	b2db      	uxtb	r3, r3
 8011474:	1c5a      	adds	r2, r3, #1
 8011476:	b2d1      	uxtb	r1, r2
 8011478:	4a0e      	ldr	r2, [pc, #56]	; (80114b4 <FATFS_LinkDriverEx+0x94>)
 801147a:	7251      	strb	r1, [r2, #9]
 801147c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801147e:	7dbb      	ldrb	r3, [r7, #22]
 8011480:	3330      	adds	r3, #48	; 0x30
 8011482:	b2da      	uxtb	r2, r3
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	3301      	adds	r3, #1
 801148c:	223a      	movs	r2, #58	; 0x3a
 801148e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	3302      	adds	r3, #2
 8011494:	222f      	movs	r2, #47	; 0x2f
 8011496:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	3303      	adds	r3, #3
 801149c:	2200      	movs	r2, #0
 801149e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80114a0:	2300      	movs	r3, #0
 80114a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80114a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	371c      	adds	r7, #28
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop
 80114b4:	20000e68 	.word	0x20000e68

080114b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80114c2:	2200      	movs	r2, #0
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7ff ffaa 	bl	8011420 <FATFS_LinkDriverEx>
 80114cc:	4603      	mov	r3, r0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
	...

080114d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80114dc:	2200      	movs	r2, #0
 80114de:	4912      	ldr	r1, [pc, #72]	; (8011528 <MX_USB_DEVICE_Init+0x50>)
 80114e0:	4812      	ldr	r0, [pc, #72]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 80114e2:	f7fc f85c 	bl	800d59e <USBD_Init>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d001      	beq.n	80114f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80114ec:	f7f0 fb90 	bl	8001c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80114f0:	490f      	ldr	r1, [pc, #60]	; (8011530 <MX_USB_DEVICE_Init+0x58>)
 80114f2:	480e      	ldr	r0, [pc, #56]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 80114f4:	f7fc f883 	bl	800d5fe <USBD_RegisterClass>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d001      	beq.n	8011502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80114fe:	f7f0 fb87 	bl	8001c10 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011502:	490c      	ldr	r1, [pc, #48]	; (8011534 <MX_USB_DEVICE_Init+0x5c>)
 8011504:	4809      	ldr	r0, [pc, #36]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 8011506:	f7fa fb2d 	bl	800bb64 <USBD_MSC_RegisterStorage>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d001      	beq.n	8011514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011510:	f7f0 fb7e 	bl	8001c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011514:	4805      	ldr	r0, [pc, #20]	; (801152c <MX_USB_DEVICE_Init+0x54>)
 8011516:	f7fc f8a8 	bl	800d66a <USBD_Start>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011520:	f7f0 fb76 	bl	8001c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011524:	bf00      	nop
 8011526:	bd80      	pop	{r7, pc}
 8011528:	200000cc 	.word	0x200000cc
 801152c:	20000e74 	.word	0x20000e74
 8011530:	20000024 	.word	0x20000024
 8011534:	2000011c 	.word	0x2000011c

08011538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	6039      	str	r1, [r7, #0]
 8011542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	2212      	movs	r2, #18
 8011548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801154a:	4b03      	ldr	r3, [pc, #12]	; (8011558 <USBD_FS_DeviceDescriptor+0x20>)
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	200000e8 	.word	0x200000e8

0801155c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	6039      	str	r1, [r7, #0]
 8011566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2204      	movs	r2, #4
 801156c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801156e:	4b03      	ldr	r3, [pc, #12]	; (801157c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	200000fc 	.word	0x200000fc

08011580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d105      	bne.n	801159e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	4907      	ldr	r1, [pc, #28]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011596:	4808      	ldr	r0, [pc, #32]	; (80115b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011598:	f7fd fa14 	bl	800e9c4 <USBD_GetString>
 801159c:	e004      	b.n	80115a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	4904      	ldr	r1, [pc, #16]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80115a2:	4805      	ldr	r0, [pc, #20]	; (80115b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80115a4:	f7fd fa0e 	bl	800e9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115a8:	4b02      	ldr	r3, [pc, #8]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20001150 	.word	0x20001150
 80115b8:	08013c20 	.word	0x08013c20

080115bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80115c8:	683a      	ldr	r2, [r7, #0]
 80115ca:	4904      	ldr	r1, [pc, #16]	; (80115dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80115cc:	4804      	ldr	r0, [pc, #16]	; (80115e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80115ce:	f7fd f9f9 	bl	800e9c4 <USBD_GetString>
  return USBD_StrDesc;
 80115d2:	4b02      	ldr	r3, [pc, #8]	; (80115dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20001150 	.word	0x20001150
 80115e0:	08013c34 	.word	0x08013c34

080115e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	221a      	movs	r2, #26
 80115f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115f6:	f000 f843 	bl	8011680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115fa:	4b02      	ldr	r3, [pc, #8]	; (8011604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	20000100 	.word	0x20000100

08011608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	4907      	ldr	r1, [pc, #28]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
 801161e:	4808      	ldr	r0, [pc, #32]	; (8011640 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011620:	f7fd f9d0 	bl	800e9c4 <USBD_GetString>
 8011624:	e004      	b.n	8011630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4904      	ldr	r1, [pc, #16]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
 801162a:	4805      	ldr	r0, [pc, #20]	; (8011640 <USBD_FS_ConfigStrDescriptor+0x38>)
 801162c:	f7fd f9ca 	bl	800e9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011632:	4618      	mov	r0, r3
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20001150 	.word	0x20001150
 8011640:	08013c40 	.word	0x08013c40

08011644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d105      	bne.n	8011662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	4907      	ldr	r1, [pc, #28]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801165a:	4808      	ldr	r0, [pc, #32]	; (801167c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801165c:	f7fd f9b2 	bl	800e9c4 <USBD_GetString>
 8011660:	e004      	b.n	801166c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	4904      	ldr	r1, [pc, #16]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011666:	4805      	ldr	r0, [pc, #20]	; (801167c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011668:	f7fd f9ac 	bl	800e9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801166c:	4b02      	ldr	r3, [pc, #8]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20001150 	.word	0x20001150
 801167c:	08013c4c 	.word	0x08013c4c

08011680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011686:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <Get_SerialNum+0x44>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801168c:	4b0e      	ldr	r3, [pc, #56]	; (80116c8 <Get_SerialNum+0x48>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011692:	4b0e      	ldr	r3, [pc, #56]	; (80116cc <Get_SerialNum+0x4c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4413      	add	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80116a6:	2208      	movs	r2, #8
 80116a8:	4909      	ldr	r1, [pc, #36]	; (80116d0 <Get_SerialNum+0x50>)
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 f814 	bl	80116d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80116b0:	2204      	movs	r2, #4
 80116b2:	4908      	ldr	r1, [pc, #32]	; (80116d4 <Get_SerialNum+0x54>)
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f000 f80f 	bl	80116d8 <IntToUnicode>
  }
}
 80116ba:	bf00      	nop
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	1fff7a10 	.word	0x1fff7a10
 80116c8:	1fff7a14 	.word	0x1fff7a14
 80116cc:	1fff7a18 	.word	0x1fff7a18
 80116d0:	20000102 	.word	0x20000102
 80116d4:	20000112 	.word	0x20000112

080116d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80116d8:	b480      	push	{r7}
 80116da:	b087      	sub	sp, #28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	4613      	mov	r3, r2
 80116e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116e6:	2300      	movs	r3, #0
 80116e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116ea:	2300      	movs	r3, #0
 80116ec:	75fb      	strb	r3, [r7, #23]
 80116ee:	e027      	b.n	8011740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	0f1b      	lsrs	r3, r3, #28
 80116f4:	2b09      	cmp	r3, #9
 80116f6:	d80b      	bhi.n	8011710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	0f1b      	lsrs	r3, r3, #28
 80116fc:	b2da      	uxtb	r2, r3
 80116fe:	7dfb      	ldrb	r3, [r7, #23]
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	4619      	mov	r1, r3
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	440b      	add	r3, r1
 8011708:	3230      	adds	r2, #48	; 0x30
 801170a:	b2d2      	uxtb	r2, r2
 801170c:	701a      	strb	r2, [r3, #0]
 801170e:	e00a      	b.n	8011726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	0f1b      	lsrs	r3, r3, #28
 8011714:	b2da      	uxtb	r2, r3
 8011716:	7dfb      	ldrb	r3, [r7, #23]
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	4619      	mov	r1, r3
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	440b      	add	r3, r1
 8011720:	3237      	adds	r2, #55	; 0x37
 8011722:	b2d2      	uxtb	r2, r2
 8011724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	011b      	lsls	r3, r3, #4
 801172a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801172c:	7dfb      	ldrb	r3, [r7, #23]
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	3301      	adds	r3, #1
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	4413      	add	r3, r2
 8011736:	2200      	movs	r2, #0
 8011738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	3301      	adds	r3, #1
 801173e:	75fb      	strb	r3, [r7, #23]
 8011740:	7dfa      	ldrb	r2, [r7, #23]
 8011742:	79fb      	ldrb	r3, [r7, #7]
 8011744:	429a      	cmp	r2, r3
 8011746:	d3d3      	bcc.n	80116f0 <IntToUnicode+0x18>
  }
}
 8011748:	bf00      	nop
 801174a:	bf00      	nop
 801174c:	371c      	adds	r7, #28
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011756:	b480      	push	{r7}
 8011758:	b083      	sub	sp, #12
 801175a:	af00      	add	r7, sp, #0
 801175c:	4603      	mov	r3, r0
 801175e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8011760:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011762:	4618      	mov	r0, r3
 8011764:	370c      	adds	r7, #12
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
	...

08011770 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b08e      	sub	sp, #56	; 0x38
 8011774:	af00      	add	r7, sp, #0
 8011776:	4603      	mov	r3, r0
 8011778:	60b9      	str	r1, [r7, #8]
 801177a:	607a      	str	r2, [r7, #4]
 801177c:	73fb      	strb	r3, [r7, #15]
////    HAL_SD_Get_CardInfo(&hsd, &SDCardInfo);
//    *block_num  = SDCardInfo.BlockNbr / BLOCK_SIZE;
//    *block_size = BLOCK_SIZE;
//  return (USBD_OK);
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801177e:	23ff      	movs	r3, #255	; 0xff
 8011780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 8011784:	f107 0314 	add.w	r3, r7, #20
 8011788:	4619      	mov	r1, r3
 801178a:	480a      	ldr	r0, [pc, #40]	; (80117b4 <STORAGE_GetCapacity_FS+0x44>)
 801178c:	f7f5 fbea 	bl	8006f64 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8011790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011792:	1e5a      	subs	r2, r3, #1
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80117a0:	2300      	movs	r3, #0
 80117a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 80117a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3738      	adds	r7, #56	; 0x38
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	2000090c 	.word	0x2000090c

080117b8 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	4603      	mov	r3, r0
 80117c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80117c2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	4603      	mov	r3, r0
 80117d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80117da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80117dc:	4618      	mov	r0, r3
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b086      	sub	sp, #24
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60b9      	str	r1, [r7, #8]
 80117f0:	607a      	str	r2, [r7, #4]
 80117f2:	461a      	mov	r2, r3
 80117f4:	4603      	mov	r3, r0
 80117f6:	73fb      	strb	r3, [r7, #15]
 80117f8:	4613      	mov	r3, r2
 80117fa:	81bb      	strh	r3, [r7, #12]
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
//	HAL_SD_ReadBlocks_DMA ( &hsd, buf, blk_addr, ( uint32_t ) blk_len) ;
//  return (USBD_OK);
	   int8_t ret = -1;
 80117fc:	23ff      	movs	r3, #255	; 0xff
 80117fe:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);
 8011800:	89bb      	ldrh	r3, [r7, #12]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	68b9      	ldr	r1, [r7, #8]
 8011806:	4809      	ldr	r0, [pc, #36]	; (801182c <STORAGE_Read_FS+0x44>)
 8011808:	f7f5 f836 	bl	8006878 <HAL_SD_ReadBlocks_DMA>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801180c:	bf00      	nop
 801180e:	4807      	ldr	r0, [pc, #28]	; (801182c <STORAGE_Read_FS+0x44>)
 8011810:	f7f5 fc6e 	bl	80070f0 <HAL_SD_GetCardState>
 8011814:	4603      	mov	r3, r0
 8011816:	2b04      	cmp	r3, #4
 8011818:	d1f9      	bne.n	801180e <STORAGE_Read_FS+0x26>
	  ret = 0;
 801181a:	2300      	movs	r3, #0
 801181c:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801181e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8011822:	4618      	mov	r0, r3
 8011824:	3718      	adds	r7, #24
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	2000090c 	.word	0x2000090c

08011830 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
 8011836:	60b9      	str	r1, [r7, #8]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	461a      	mov	r2, r3
 801183c:	4603      	mov	r3, r0
 801183e:	73fb      	strb	r3, [r7, #15]
 8011840:	4613      	mov	r3, r2
 8011842:	81bb      	strh	r3, [r7, #12]
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
//	HAL_SD_WriteBlocks_DMA( &hsd, buf, blk_addr, ( uint32_t ) blk_len) ;
//  return (USBD_OK);

	  int8_t ret = -1;
 8011844:	23ff      	movs	r3, #255	; 0xff
 8011846:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);
 8011848:	89bb      	ldrh	r3, [r7, #12]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	68b9      	ldr	r1, [r7, #8]
 801184e:	4809      	ldr	r0, [pc, #36]	; (8011874 <STORAGE_Write_FS+0x44>)
 8011850:	f7f5 f8f4 	bl	8006a3c <HAL_SD_WriteBlocks_DMA>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8011854:	bf00      	nop
 8011856:	4807      	ldr	r0, [pc, #28]	; (8011874 <STORAGE_Write_FS+0x44>)
 8011858:	f7f5 fc4a 	bl	80070f0 <HAL_SD_GetCardState>
 801185c:	4603      	mov	r3, r0
 801185e:	2b04      	cmp	r3, #4
 8011860:	d1f9      	bne.n	8011856 <STORAGE_Write_FS+0x26>
	  ret = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8011866:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801186a:	4618      	mov	r0, r3
 801186c:	3718      	adds	r7, #24
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	2000090c 	.word	0x2000090c

08011878 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8011878:	b480      	push	{r7}
 801187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801187c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801187e:	4618      	mov	r0, r3
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08a      	sub	sp, #40	; 0x28
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011890:	f107 0314 	add.w	r3, r7, #20
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]
 8011898:	605a      	str	r2, [r3, #4]
 801189a:	609a      	str	r2, [r3, #8]
 801189c:	60da      	str	r2, [r3, #12]
 801189e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80118a8:	d13a      	bne.n	8011920 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80118aa:	2300      	movs	r3, #0
 80118ac:	613b      	str	r3, [r7, #16]
 80118ae:	4b1e      	ldr	r3, [pc, #120]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118b2:	4a1d      	ldr	r2, [pc, #116]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118b4:	f043 0301 	orr.w	r3, r3, #1
 80118b8:	6313      	str	r3, [r2, #48]	; 0x30
 80118ba:	4b1b      	ldr	r3, [pc, #108]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118be:	f003 0301 	and.w	r3, r3, #1
 80118c2:	613b      	str	r3, [r7, #16]
 80118c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80118c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80118ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118cc:	2302      	movs	r3, #2
 80118ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118d0:	2300      	movs	r3, #0
 80118d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118d4:	2303      	movs	r3, #3
 80118d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80118d8:	230a      	movs	r3, #10
 80118da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118dc:	f107 0314 	add.w	r3, r7, #20
 80118e0:	4619      	mov	r1, r3
 80118e2:	4812      	ldr	r0, [pc, #72]	; (801192c <HAL_PCD_MspInit+0xa4>)
 80118e4:	f7f1 fbf2 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118e8:	4b0f      	ldr	r3, [pc, #60]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118ec:	4a0e      	ldr	r2, [pc, #56]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118f2:	6353      	str	r3, [r2, #52]	; 0x34
 80118f4:	2300      	movs	r3, #0
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	4b0b      	ldr	r3, [pc, #44]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fc:	4a0a      	ldr	r2, [pc, #40]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 80118fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011902:	6453      	str	r3, [r2, #68]	; 0x44
 8011904:	4b08      	ldr	r3, [pc, #32]	; (8011928 <HAL_PCD_MspInit+0xa0>)
 8011906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801190c:	60fb      	str	r3, [r7, #12]
 801190e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011910:	2200      	movs	r2, #0
 8011912:	2100      	movs	r1, #0
 8011914:	2043      	movs	r0, #67	; 0x43
 8011916:	f7f0 ff82 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801191a:	2043      	movs	r0, #67	; 0x43
 801191c:	f7f0 ff9b 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011920:	bf00      	nop
 8011922:	3728      	adds	r7, #40	; 0x28
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	40023800 	.word	0x40023800
 801192c:	40020000 	.word	0x40020000

08011930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011944:	4619      	mov	r1, r3
 8011946:	4610      	mov	r0, r2
 8011948:	f7fb fedc 	bl	800d704 <USBD_LL_SetupStage>
}
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	460b      	mov	r3, r1
 801195e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011966:	78fa      	ldrb	r2, [r7, #3]
 8011968:	6879      	ldr	r1, [r7, #4]
 801196a:	4613      	mov	r3, r2
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	440b      	add	r3, r1
 8011974:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	78fb      	ldrb	r3, [r7, #3]
 801197c:	4619      	mov	r1, r3
 801197e:	f7fb ff16 	bl	800d7ae <USBD_LL_DataOutStage>
}
 8011982:	bf00      	nop
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
 8011992:	460b      	mov	r3, r1
 8011994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801199c:	78fa      	ldrb	r2, [r7, #3]
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	4613      	mov	r3, r2
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	440b      	add	r3, r1
 80119aa:	334c      	adds	r3, #76	; 0x4c
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	78fb      	ldrb	r3, [r7, #3]
 80119b0:	4619      	mov	r1, r3
 80119b2:	f7fb ffaf 	bl	800d914 <USBD_LL_DataInStage>
}
 80119b6:	bf00      	nop
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fc f8e3 	bl	800db98 <USBD_LL_SOF>
}
 80119d2:	bf00      	nop
 80119d4:	3708      	adds	r7, #8
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}

080119da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119e2:	2301      	movs	r3, #1
 80119e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d102      	bne.n	80119f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80119ee:	2300      	movs	r3, #0
 80119f0:	73fb      	strb	r3, [r7, #15]
 80119f2:	e008      	b.n	8011a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d102      	bne.n	8011a02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80119fc:	2301      	movs	r3, #1
 80119fe:	73fb      	strb	r3, [r7, #15]
 8011a00:	e001      	b.n	8011a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011a02:	f7f0 f905 	bl	8001c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a0c:	7bfa      	ldrb	r2, [r7, #15]
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fc f883 	bl	800db1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fc f82b 	bl	800da78 <USBD_LL_Reset>
}
 8011a22:	bf00      	nop
 8011a24:	3710      	adds	r7, #16
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
	...

08011a2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fc f87e 	bl	800db3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	6812      	ldr	r2, [r2, #0]
 8011a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a52:	f043 0301 	orr.w	r3, r3, #1
 8011a56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a1b      	ldr	r3, [r3, #32]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d005      	beq.n	8011a6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a60:	4b04      	ldr	r3, [pc, #16]	; (8011a74 <HAL_PCD_SuspendCallback+0x48>)
 8011a62:	691b      	ldr	r3, [r3, #16]
 8011a64:	4a03      	ldr	r2, [pc, #12]	; (8011a74 <HAL_PCD_SuspendCallback+0x48>)
 8011a66:	f043 0306 	orr.w	r3, r3, #6
 8011a6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	e000ed00 	.word	0xe000ed00

08011a78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fc f86e 	bl	800db68 <USBD_LL_Resume>
}
 8011a8c:	bf00      	nop
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011aa6:	78fa      	ldrb	r2, [r7, #3]
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fc f8c6 	bl	800dc3c <USBD_LL_IsoOUTIncomplete>
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011aca:	78fa      	ldrb	r2, [r7, #3]
 8011acc:	4611      	mov	r1, r2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fc f882 	bl	800dbd8 <USBD_LL_IsoINIncomplete>
}
 8011ad4:	bf00      	nop
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fc f8d8 	bl	800dca0 <USBD_LL_DevConnected>
}
 8011af0:	bf00      	nop
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fc f8d5 	bl	800dcb6 <USBD_LL_DevDisconnected>
}
 8011b0c:	bf00      	nop
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d13c      	bne.n	8011b9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011b24:	4a20      	ldr	r2, [pc, #128]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4a1e      	ldr	r2, [pc, #120]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011b34:	4b1c      	ldr	r3, [pc, #112]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011b3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011b3c:	4b1a      	ldr	r3, [pc, #104]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b3e:	2204      	movs	r2, #4
 8011b40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b44:	2202      	movs	r2, #2
 8011b46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011b48:	4b17      	ldr	r3, [pc, #92]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b4e:	4b16      	ldr	r3, [pc, #88]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b50:	2202      	movs	r2, #2
 8011b52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b54:	4b14      	ldr	r3, [pc, #80]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b56:	2200      	movs	r2, #0
 8011b58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b5a:	4b13      	ldr	r3, [pc, #76]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b60:	4b11      	ldr	r3, [pc, #68]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b66:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b6e:	2200      	movs	r2, #0
 8011b70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b72:	480d      	ldr	r0, [pc, #52]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b74:	f7f1 fc89 	bl	800348a <HAL_PCD_Init>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d001      	beq.n	8011b82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b7e:	f7f0 f847 	bl	8001c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b82:	2180      	movs	r1, #128	; 0x80
 8011b84:	4808      	ldr	r0, [pc, #32]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b86:	f7f2 ff0e 	bl	80049a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b8a:	2240      	movs	r2, #64	; 0x40
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	4806      	ldr	r0, [pc, #24]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b90:	f7f2 fec2 	bl	8004918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b94:	2280      	movs	r2, #128	; 0x80
 8011b96:	2101      	movs	r1, #1
 8011b98:	4803      	ldr	r0, [pc, #12]	; (8011ba8 <USBD_LL_Init+0x94>)
 8011b9a:	f7f2 febd 	bl	8004918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	20001350 	.word	0x20001350

08011bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7f1 fd7e 	bl	80036c4 <HAL_PCD_Start>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f000 f962 	bl	8011e98 <USBD_Get_USB_Status>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	4608      	mov	r0, r1
 8011bec:	4611      	mov	r1, r2
 8011bee:	461a      	mov	r2, r3
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	70fb      	strb	r3, [r7, #3]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	70bb      	strb	r3, [r7, #2]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c00:	2300      	movs	r3, #0
 8011c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c0a:	78bb      	ldrb	r3, [r7, #2]
 8011c0c:	883a      	ldrh	r2, [r7, #0]
 8011c0e:	78f9      	ldrb	r1, [r7, #3]
 8011c10:	f7f2 fa4f 	bl	80040b2 <HAL_PCD_EP_Open>
 8011c14:	4603      	mov	r3, r0
 8011c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c18:	7bfb      	ldrb	r3, [r7, #15]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 f93c 	bl	8011e98 <USBD_Get_USB_Status>
 8011c20:	4603      	mov	r3, r0
 8011c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b084      	sub	sp, #16
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	460b      	mov	r3, r1
 8011c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c48:	78fa      	ldrb	r2, [r7, #3]
 8011c4a:	4611      	mov	r1, r2
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f2 fa98 	bl	8004182 <HAL_PCD_EP_Close>
 8011c52:	4603      	mov	r3, r0
 8011c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 f91d 	bl	8011e98 <USBD_Get_USB_Status>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c86:	78fa      	ldrb	r2, [r7, #3]
 8011c88:	4611      	mov	r1, r2
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7f2 fc5b 	bl	8004546 <HAL_PCD_EP_Flush>
 8011c90:	4603      	mov	r3, r0
 8011c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c94:	7bfb      	ldrb	r3, [r7, #15]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f000 f8fe 	bl	8011e98 <USBD_Get_USB_Status>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b084      	sub	sp, #16
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011cc4:	78fa      	ldrb	r2, [r7, #3]
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7f2 fb51 	bl	8004370 <HAL_PCD_EP_SetStall>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd2:	7bfb      	ldrb	r3, [r7, #15]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f000 f8df 	bl	8011e98 <USBD_Get_USB_Status>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d02:	78fa      	ldrb	r2, [r7, #3]
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7f2 fb96 	bl	8004438 <HAL_PCD_EP_ClrStall>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f000 f8c0 	bl	8011e98 <USBD_Get_USB_Status>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d26:	b480      	push	{r7}
 8011d28:	b085      	sub	sp, #20
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
 8011d2e:	460b      	mov	r3, r1
 8011d30:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d38:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	da0b      	bge.n	8011d5a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d42:	78fb      	ldrb	r3, [r7, #3]
 8011d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d48:	68f9      	ldr	r1, [r7, #12]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	4413      	add	r3, r2
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	333e      	adds	r3, #62	; 0x3e
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	e00b      	b.n	8011d72 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d5a:	78fb      	ldrb	r3, [r7, #3]
 8011d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d60:	68f9      	ldr	r1, [r7, #12]
 8011d62:	4613      	mov	r3, r2
 8011d64:	00db      	lsls	r3, r3, #3
 8011d66:	4413      	add	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	440b      	add	r3, r1
 8011d6c:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011d70:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3714      	adds	r7, #20
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b084      	sub	sp, #16
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	460b      	mov	r3, r1
 8011d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d98:	78fa      	ldrb	r2, [r7, #3]
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7f2 f963 	bl	8004068 <HAL_PCD_SetAddress>
 8011da2:	4603      	mov	r3, r0
 8011da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011da6:	7bfb      	ldrb	r3, [r7, #15]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 f875 	bl	8011e98 <USBD_Get_USB_Status>
 8011dae:	4603      	mov	r3, r0
 8011db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	607a      	str	r2, [r7, #4]
 8011dc6:	603b      	str	r3, [r7, #0]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dda:	7af9      	ldrb	r1, [r7, #11]
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	f7f2 fa7c 	bl	80042dc <HAL_PCD_EP_Transmit>
 8011de4:	4603      	mov	r3, r0
 8011de6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011de8:	7dfb      	ldrb	r3, [r7, #23]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f000 f854 	bl	8011e98 <USBD_Get_USB_Status>
 8011df0:	4603      	mov	r3, r0
 8011df2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011df4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b086      	sub	sp, #24
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	60f8      	str	r0, [r7, #12]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e12:	2300      	movs	r3, #0
 8011e14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011e1c:	7af9      	ldrb	r1, [r7, #11]
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	f7f2 f9f8 	bl	8004216 <HAL_PCD_EP_Receive>
 8011e26:	4603      	mov	r3, r0
 8011e28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 f833 	bl	8011e98 <USBD_Get_USB_Status>
 8011e32:	4603      	mov	r3, r0
 8011e34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e36:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3718      	adds	r7, #24
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e52:	78fa      	ldrb	r2, [r7, #3]
 8011e54:	4611      	mov	r1, r2
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f2 fa28 	bl	80042ac <HAL_PCD_EP_GetRxCount>
 8011e5c:	4603      	mov	r3, r0
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
	...

08011e68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011e70:	4b03      	ldr	r3, [pc, #12]	; (8011e80 <USBD_static_malloc+0x18>)
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	2000185c 	.word	0x2000185c

08011e84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]

}
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ea6:	79fb      	ldrb	r3, [r7, #7]
 8011ea8:	2b03      	cmp	r3, #3
 8011eaa:	d817      	bhi.n	8011edc <USBD_Get_USB_Status+0x44>
 8011eac:	a201      	add	r2, pc, #4	; (adr r2, 8011eb4 <USBD_Get_USB_Status+0x1c>)
 8011eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb2:	bf00      	nop
 8011eb4:	08011ec5 	.word	0x08011ec5
 8011eb8:	08011ecb 	.word	0x08011ecb
 8011ebc:	08011ed1 	.word	0x08011ed1
 8011ec0:	08011ed7 	.word	0x08011ed7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ec8:	e00b      	b.n	8011ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011eca:	2303      	movs	r3, #3
 8011ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8011ece:	e008      	b.n	8011ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ed4:	e005      	b.n	8011ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ed6:	2303      	movs	r3, #3
 8011ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8011eda:	e002      	b.n	8011ee2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011edc:	2303      	movs	r3, #3
 8011ede:	73fb      	strb	r3, [r7, #15]
    break;
 8011ee0:	bf00      	nop
  }
  return usb_status;
 8011ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3714      	adds	r7, #20
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <atoi>:
 8011ef0:	220a      	movs	r2, #10
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	f000 ba6a 	b.w	80123cc <strtol>

08011ef8 <calloc>:
 8011ef8:	4b02      	ldr	r3, [pc, #8]	; (8011f04 <calloc+0xc>)
 8011efa:	460a      	mov	r2, r1
 8011efc:	4601      	mov	r1, r0
 8011efe:	6818      	ldr	r0, [r3, #0]
 8011f00:	f000 b844 	b.w	8011f8c <_calloc_r>
 8011f04:	2000013c 	.word	0x2000013c

08011f08 <__errno>:
 8011f08:	4b01      	ldr	r3, [pc, #4]	; (8011f10 <__errno+0x8>)
 8011f0a:	6818      	ldr	r0, [r3, #0]
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	2000013c 	.word	0x2000013c

08011f14 <__libc_init_array>:
 8011f14:	b570      	push	{r4, r5, r6, lr}
 8011f16:	4d0d      	ldr	r5, [pc, #52]	; (8011f4c <__libc_init_array+0x38>)
 8011f18:	4c0d      	ldr	r4, [pc, #52]	; (8011f50 <__libc_init_array+0x3c>)
 8011f1a:	1b64      	subs	r4, r4, r5
 8011f1c:	10a4      	asrs	r4, r4, #2
 8011f1e:	2600      	movs	r6, #0
 8011f20:	42a6      	cmp	r6, r4
 8011f22:	d109      	bne.n	8011f38 <__libc_init_array+0x24>
 8011f24:	4d0b      	ldr	r5, [pc, #44]	; (8011f54 <__libc_init_array+0x40>)
 8011f26:	4c0c      	ldr	r4, [pc, #48]	; (8011f58 <__libc_init_array+0x44>)
 8011f28:	f001 fb18 	bl	801355c <_init>
 8011f2c:	1b64      	subs	r4, r4, r5
 8011f2e:	10a4      	asrs	r4, r4, #2
 8011f30:	2600      	movs	r6, #0
 8011f32:	42a6      	cmp	r6, r4
 8011f34:	d105      	bne.n	8011f42 <__libc_init_array+0x2e>
 8011f36:	bd70      	pop	{r4, r5, r6, pc}
 8011f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f3c:	4798      	blx	r3
 8011f3e:	3601      	adds	r6, #1
 8011f40:	e7ee      	b.n	8011f20 <__libc_init_array+0xc>
 8011f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f46:	4798      	blx	r3
 8011f48:	3601      	adds	r6, #1
 8011f4a:	e7f2      	b.n	8011f32 <__libc_init_array+0x1e>
 8011f4c:	08013f84 	.word	0x08013f84
 8011f50:	08013f84 	.word	0x08013f84
 8011f54:	08013f84 	.word	0x08013f84
 8011f58:	08013f88 	.word	0x08013f88

08011f5c <malloc>:
 8011f5c:	4b02      	ldr	r3, [pc, #8]	; (8011f68 <malloc+0xc>)
 8011f5e:	4601      	mov	r1, r0
 8011f60:	6818      	ldr	r0, [r3, #0]
 8011f62:	f000 b895 	b.w	8012090 <_malloc_r>
 8011f66:	bf00      	nop
 8011f68:	2000013c 	.word	0x2000013c

08011f6c <free>:
 8011f6c:	4b02      	ldr	r3, [pc, #8]	; (8011f78 <free+0xc>)
 8011f6e:	4601      	mov	r1, r0
 8011f70:	6818      	ldr	r0, [r3, #0]
 8011f72:	f000 b821 	b.w	8011fb8 <_free_r>
 8011f76:	bf00      	nop
 8011f78:	2000013c 	.word	0x2000013c

08011f7c <memset>:
 8011f7c:	4402      	add	r2, r0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d100      	bne.n	8011f86 <memset+0xa>
 8011f84:	4770      	bx	lr
 8011f86:	f803 1b01 	strb.w	r1, [r3], #1
 8011f8a:	e7f9      	b.n	8011f80 <memset+0x4>

08011f8c <_calloc_r>:
 8011f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f8e:	fba1 2402 	umull	r2, r4, r1, r2
 8011f92:	b94c      	cbnz	r4, 8011fa8 <_calloc_r+0x1c>
 8011f94:	4611      	mov	r1, r2
 8011f96:	9201      	str	r2, [sp, #4]
 8011f98:	f000 f87a 	bl	8012090 <_malloc_r>
 8011f9c:	9a01      	ldr	r2, [sp, #4]
 8011f9e:	4605      	mov	r5, r0
 8011fa0:	b930      	cbnz	r0, 8011fb0 <_calloc_r+0x24>
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	b003      	add	sp, #12
 8011fa6:	bd30      	pop	{r4, r5, pc}
 8011fa8:	220c      	movs	r2, #12
 8011faa:	6002      	str	r2, [r0, #0]
 8011fac:	2500      	movs	r5, #0
 8011fae:	e7f8      	b.n	8011fa2 <_calloc_r+0x16>
 8011fb0:	4621      	mov	r1, r4
 8011fb2:	f7ff ffe3 	bl	8011f7c <memset>
 8011fb6:	e7f4      	b.n	8011fa2 <_calloc_r+0x16>

08011fb8 <_free_r>:
 8011fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fba:	2900      	cmp	r1, #0
 8011fbc:	d044      	beq.n	8012048 <_free_r+0x90>
 8011fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fc2:	9001      	str	r0, [sp, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8011fca:	bfb8      	it	lt
 8011fcc:	18e4      	addlt	r4, r4, r3
 8011fce:	f000 fa37 	bl	8012440 <__malloc_lock>
 8011fd2:	4a1e      	ldr	r2, [pc, #120]	; (801204c <_free_r+0x94>)
 8011fd4:	9801      	ldr	r0, [sp, #4]
 8011fd6:	6813      	ldr	r3, [r2, #0]
 8011fd8:	b933      	cbnz	r3, 8011fe8 <_free_r+0x30>
 8011fda:	6063      	str	r3, [r4, #4]
 8011fdc:	6014      	str	r4, [r2, #0]
 8011fde:	b003      	add	sp, #12
 8011fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fe4:	f000 ba32 	b.w	801244c <__malloc_unlock>
 8011fe8:	42a3      	cmp	r3, r4
 8011fea:	d908      	bls.n	8011ffe <_free_r+0x46>
 8011fec:	6825      	ldr	r5, [r4, #0]
 8011fee:	1961      	adds	r1, r4, r5
 8011ff0:	428b      	cmp	r3, r1
 8011ff2:	bf01      	itttt	eq
 8011ff4:	6819      	ldreq	r1, [r3, #0]
 8011ff6:	685b      	ldreq	r3, [r3, #4]
 8011ff8:	1949      	addeq	r1, r1, r5
 8011ffa:	6021      	streq	r1, [r4, #0]
 8011ffc:	e7ed      	b.n	8011fda <_free_r+0x22>
 8011ffe:	461a      	mov	r2, r3
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	b10b      	cbz	r3, 8012008 <_free_r+0x50>
 8012004:	42a3      	cmp	r3, r4
 8012006:	d9fa      	bls.n	8011ffe <_free_r+0x46>
 8012008:	6811      	ldr	r1, [r2, #0]
 801200a:	1855      	adds	r5, r2, r1
 801200c:	42a5      	cmp	r5, r4
 801200e:	d10b      	bne.n	8012028 <_free_r+0x70>
 8012010:	6824      	ldr	r4, [r4, #0]
 8012012:	4421      	add	r1, r4
 8012014:	1854      	adds	r4, r2, r1
 8012016:	42a3      	cmp	r3, r4
 8012018:	6011      	str	r1, [r2, #0]
 801201a:	d1e0      	bne.n	8011fde <_free_r+0x26>
 801201c:	681c      	ldr	r4, [r3, #0]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	6053      	str	r3, [r2, #4]
 8012022:	4421      	add	r1, r4
 8012024:	6011      	str	r1, [r2, #0]
 8012026:	e7da      	b.n	8011fde <_free_r+0x26>
 8012028:	d902      	bls.n	8012030 <_free_r+0x78>
 801202a:	230c      	movs	r3, #12
 801202c:	6003      	str	r3, [r0, #0]
 801202e:	e7d6      	b.n	8011fde <_free_r+0x26>
 8012030:	6825      	ldr	r5, [r4, #0]
 8012032:	1961      	adds	r1, r4, r5
 8012034:	428b      	cmp	r3, r1
 8012036:	bf04      	itt	eq
 8012038:	6819      	ldreq	r1, [r3, #0]
 801203a:	685b      	ldreq	r3, [r3, #4]
 801203c:	6063      	str	r3, [r4, #4]
 801203e:	bf04      	itt	eq
 8012040:	1949      	addeq	r1, r1, r5
 8012042:	6021      	streq	r1, [r4, #0]
 8012044:	6054      	str	r4, [r2, #4]
 8012046:	e7ca      	b.n	8011fde <_free_r+0x26>
 8012048:	b003      	add	sp, #12
 801204a:	bd30      	pop	{r4, r5, pc}
 801204c:	20001ad4 	.word	0x20001ad4

08012050 <sbrk_aligned>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	4e0e      	ldr	r6, [pc, #56]	; (801208c <sbrk_aligned+0x3c>)
 8012054:	460c      	mov	r4, r1
 8012056:	6831      	ldr	r1, [r6, #0]
 8012058:	4605      	mov	r5, r0
 801205a:	b911      	cbnz	r1, 8012062 <sbrk_aligned+0x12>
 801205c:	f000 f88c 	bl	8012178 <_sbrk_r>
 8012060:	6030      	str	r0, [r6, #0]
 8012062:	4621      	mov	r1, r4
 8012064:	4628      	mov	r0, r5
 8012066:	f000 f887 	bl	8012178 <_sbrk_r>
 801206a:	1c43      	adds	r3, r0, #1
 801206c:	d00a      	beq.n	8012084 <sbrk_aligned+0x34>
 801206e:	1cc4      	adds	r4, r0, #3
 8012070:	f024 0403 	bic.w	r4, r4, #3
 8012074:	42a0      	cmp	r0, r4
 8012076:	d007      	beq.n	8012088 <sbrk_aligned+0x38>
 8012078:	1a21      	subs	r1, r4, r0
 801207a:	4628      	mov	r0, r5
 801207c:	f000 f87c 	bl	8012178 <_sbrk_r>
 8012080:	3001      	adds	r0, #1
 8012082:	d101      	bne.n	8012088 <sbrk_aligned+0x38>
 8012084:	f04f 34ff 	mov.w	r4, #4294967295
 8012088:	4620      	mov	r0, r4
 801208a:	bd70      	pop	{r4, r5, r6, pc}
 801208c:	20001ad8 	.word	0x20001ad8

08012090 <_malloc_r>:
 8012090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012094:	1ccd      	adds	r5, r1, #3
 8012096:	f025 0503 	bic.w	r5, r5, #3
 801209a:	3508      	adds	r5, #8
 801209c:	2d0c      	cmp	r5, #12
 801209e:	bf38      	it	cc
 80120a0:	250c      	movcc	r5, #12
 80120a2:	2d00      	cmp	r5, #0
 80120a4:	4607      	mov	r7, r0
 80120a6:	db01      	blt.n	80120ac <_malloc_r+0x1c>
 80120a8:	42a9      	cmp	r1, r5
 80120aa:	d905      	bls.n	80120b8 <_malloc_r+0x28>
 80120ac:	230c      	movs	r3, #12
 80120ae:	603b      	str	r3, [r7, #0]
 80120b0:	2600      	movs	r6, #0
 80120b2:	4630      	mov	r0, r6
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	4e2e      	ldr	r6, [pc, #184]	; (8012174 <_malloc_r+0xe4>)
 80120ba:	f000 f9c1 	bl	8012440 <__malloc_lock>
 80120be:	6833      	ldr	r3, [r6, #0]
 80120c0:	461c      	mov	r4, r3
 80120c2:	bb34      	cbnz	r4, 8012112 <_malloc_r+0x82>
 80120c4:	4629      	mov	r1, r5
 80120c6:	4638      	mov	r0, r7
 80120c8:	f7ff ffc2 	bl	8012050 <sbrk_aligned>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	4604      	mov	r4, r0
 80120d0:	d14d      	bne.n	801216e <_malloc_r+0xde>
 80120d2:	6834      	ldr	r4, [r6, #0]
 80120d4:	4626      	mov	r6, r4
 80120d6:	2e00      	cmp	r6, #0
 80120d8:	d140      	bne.n	801215c <_malloc_r+0xcc>
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	4631      	mov	r1, r6
 80120de:	4638      	mov	r0, r7
 80120e0:	eb04 0803 	add.w	r8, r4, r3
 80120e4:	f000 f848 	bl	8012178 <_sbrk_r>
 80120e8:	4580      	cmp	r8, r0
 80120ea:	d13a      	bne.n	8012162 <_malloc_r+0xd2>
 80120ec:	6821      	ldr	r1, [r4, #0]
 80120ee:	3503      	adds	r5, #3
 80120f0:	1a6d      	subs	r5, r5, r1
 80120f2:	f025 0503 	bic.w	r5, r5, #3
 80120f6:	3508      	adds	r5, #8
 80120f8:	2d0c      	cmp	r5, #12
 80120fa:	bf38      	it	cc
 80120fc:	250c      	movcc	r5, #12
 80120fe:	4629      	mov	r1, r5
 8012100:	4638      	mov	r0, r7
 8012102:	f7ff ffa5 	bl	8012050 <sbrk_aligned>
 8012106:	3001      	adds	r0, #1
 8012108:	d02b      	beq.n	8012162 <_malloc_r+0xd2>
 801210a:	6823      	ldr	r3, [r4, #0]
 801210c:	442b      	add	r3, r5
 801210e:	6023      	str	r3, [r4, #0]
 8012110:	e00e      	b.n	8012130 <_malloc_r+0xa0>
 8012112:	6822      	ldr	r2, [r4, #0]
 8012114:	1b52      	subs	r2, r2, r5
 8012116:	d41e      	bmi.n	8012156 <_malloc_r+0xc6>
 8012118:	2a0b      	cmp	r2, #11
 801211a:	d916      	bls.n	801214a <_malloc_r+0xba>
 801211c:	1961      	adds	r1, r4, r5
 801211e:	42a3      	cmp	r3, r4
 8012120:	6025      	str	r5, [r4, #0]
 8012122:	bf18      	it	ne
 8012124:	6059      	strne	r1, [r3, #4]
 8012126:	6863      	ldr	r3, [r4, #4]
 8012128:	bf08      	it	eq
 801212a:	6031      	streq	r1, [r6, #0]
 801212c:	5162      	str	r2, [r4, r5]
 801212e:	604b      	str	r3, [r1, #4]
 8012130:	4638      	mov	r0, r7
 8012132:	f104 060b 	add.w	r6, r4, #11
 8012136:	f000 f989 	bl	801244c <__malloc_unlock>
 801213a:	f026 0607 	bic.w	r6, r6, #7
 801213e:	1d23      	adds	r3, r4, #4
 8012140:	1af2      	subs	r2, r6, r3
 8012142:	d0b6      	beq.n	80120b2 <_malloc_r+0x22>
 8012144:	1b9b      	subs	r3, r3, r6
 8012146:	50a3      	str	r3, [r4, r2]
 8012148:	e7b3      	b.n	80120b2 <_malloc_r+0x22>
 801214a:	6862      	ldr	r2, [r4, #4]
 801214c:	42a3      	cmp	r3, r4
 801214e:	bf0c      	ite	eq
 8012150:	6032      	streq	r2, [r6, #0]
 8012152:	605a      	strne	r2, [r3, #4]
 8012154:	e7ec      	b.n	8012130 <_malloc_r+0xa0>
 8012156:	4623      	mov	r3, r4
 8012158:	6864      	ldr	r4, [r4, #4]
 801215a:	e7b2      	b.n	80120c2 <_malloc_r+0x32>
 801215c:	4634      	mov	r4, r6
 801215e:	6876      	ldr	r6, [r6, #4]
 8012160:	e7b9      	b.n	80120d6 <_malloc_r+0x46>
 8012162:	230c      	movs	r3, #12
 8012164:	603b      	str	r3, [r7, #0]
 8012166:	4638      	mov	r0, r7
 8012168:	f000 f970 	bl	801244c <__malloc_unlock>
 801216c:	e7a1      	b.n	80120b2 <_malloc_r+0x22>
 801216e:	6025      	str	r5, [r4, #0]
 8012170:	e7de      	b.n	8012130 <_malloc_r+0xa0>
 8012172:	bf00      	nop
 8012174:	20001ad4 	.word	0x20001ad4

08012178 <_sbrk_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	4d06      	ldr	r5, [pc, #24]	; (8012194 <_sbrk_r+0x1c>)
 801217c:	2300      	movs	r3, #0
 801217e:	4604      	mov	r4, r0
 8012180:	4608      	mov	r0, r1
 8012182:	602b      	str	r3, [r5, #0]
 8012184:	f7f0 f92e 	bl	80023e4 <_sbrk>
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d102      	bne.n	8012192 <_sbrk_r+0x1a>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	b103      	cbz	r3, 8012192 <_sbrk_r+0x1a>
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	20001adc 	.word	0x20001adc

08012198 <siprintf>:
 8012198:	b40e      	push	{r1, r2, r3}
 801219a:	b500      	push	{lr}
 801219c:	b09c      	sub	sp, #112	; 0x70
 801219e:	ab1d      	add	r3, sp, #116	; 0x74
 80121a0:	9002      	str	r0, [sp, #8]
 80121a2:	9006      	str	r0, [sp, #24]
 80121a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80121a8:	4809      	ldr	r0, [pc, #36]	; (80121d0 <siprintf+0x38>)
 80121aa:	9107      	str	r1, [sp, #28]
 80121ac:	9104      	str	r1, [sp, #16]
 80121ae:	4909      	ldr	r1, [pc, #36]	; (80121d4 <siprintf+0x3c>)
 80121b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80121b4:	9105      	str	r1, [sp, #20]
 80121b6:	6800      	ldr	r0, [r0, #0]
 80121b8:	9301      	str	r3, [sp, #4]
 80121ba:	a902      	add	r1, sp, #8
 80121bc:	f000 f9a8 	bl	8012510 <_svfiprintf_r>
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	2200      	movs	r2, #0
 80121c4:	701a      	strb	r2, [r3, #0]
 80121c6:	b01c      	add	sp, #112	; 0x70
 80121c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121cc:	b003      	add	sp, #12
 80121ce:	4770      	bx	lr
 80121d0:	2000013c 	.word	0x2000013c
 80121d4:	ffff0208 	.word	0xffff0208

080121d8 <strcat>:
 80121d8:	b510      	push	{r4, lr}
 80121da:	4602      	mov	r2, r0
 80121dc:	7814      	ldrb	r4, [r2, #0]
 80121de:	4613      	mov	r3, r2
 80121e0:	3201      	adds	r2, #1
 80121e2:	2c00      	cmp	r4, #0
 80121e4:	d1fa      	bne.n	80121dc <strcat+0x4>
 80121e6:	3b01      	subs	r3, #1
 80121e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121f0:	2a00      	cmp	r2, #0
 80121f2:	d1f9      	bne.n	80121e8 <strcat+0x10>
 80121f4:	bd10      	pop	{r4, pc}

080121f6 <strcpy>:
 80121f6:	4603      	mov	r3, r0
 80121f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121fc:	f803 2b01 	strb.w	r2, [r3], #1
 8012200:	2a00      	cmp	r2, #0
 8012202:	d1f9      	bne.n	80121f8 <strcpy+0x2>
 8012204:	4770      	bx	lr
	...

08012208 <strtok>:
 8012208:	4b16      	ldr	r3, [pc, #88]	; (8012264 <strtok+0x5c>)
 801220a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801220c:	681e      	ldr	r6, [r3, #0]
 801220e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012210:	4605      	mov	r5, r0
 8012212:	b9fc      	cbnz	r4, 8012254 <strtok+0x4c>
 8012214:	2050      	movs	r0, #80	; 0x50
 8012216:	9101      	str	r1, [sp, #4]
 8012218:	f7ff fea0 	bl	8011f5c <malloc>
 801221c:	9901      	ldr	r1, [sp, #4]
 801221e:	65b0      	str	r0, [r6, #88]	; 0x58
 8012220:	4602      	mov	r2, r0
 8012222:	b920      	cbnz	r0, 801222e <strtok+0x26>
 8012224:	4b10      	ldr	r3, [pc, #64]	; (8012268 <strtok+0x60>)
 8012226:	4811      	ldr	r0, [pc, #68]	; (801226c <strtok+0x64>)
 8012228:	2157      	movs	r1, #87	; 0x57
 801222a:	f000 f8d9 	bl	80123e0 <__assert_func>
 801222e:	e9c0 4400 	strd	r4, r4, [r0]
 8012232:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012236:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801223a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801223e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012242:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012246:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801224a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801224e:	6184      	str	r4, [r0, #24]
 8012250:	7704      	strb	r4, [r0, #28]
 8012252:	6244      	str	r4, [r0, #36]	; 0x24
 8012254:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8012256:	2301      	movs	r3, #1
 8012258:	4628      	mov	r0, r5
 801225a:	b002      	add	sp, #8
 801225c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012260:	f000 b806 	b.w	8012270 <__strtok_r>
 8012264:	2000013c 	.word	0x2000013c
 8012268:	08013d38 	.word	0x08013d38
 801226c:	08013d4f 	.word	0x08013d4f

08012270 <__strtok_r>:
 8012270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012272:	b908      	cbnz	r0, 8012278 <__strtok_r+0x8>
 8012274:	6810      	ldr	r0, [r2, #0]
 8012276:	b188      	cbz	r0, 801229c <__strtok_r+0x2c>
 8012278:	4604      	mov	r4, r0
 801227a:	4620      	mov	r0, r4
 801227c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012280:	460f      	mov	r7, r1
 8012282:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012286:	b91e      	cbnz	r6, 8012290 <__strtok_r+0x20>
 8012288:	b965      	cbnz	r5, 80122a4 <__strtok_r+0x34>
 801228a:	6015      	str	r5, [r2, #0]
 801228c:	4628      	mov	r0, r5
 801228e:	e005      	b.n	801229c <__strtok_r+0x2c>
 8012290:	42b5      	cmp	r5, r6
 8012292:	d1f6      	bne.n	8012282 <__strtok_r+0x12>
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1f0      	bne.n	801227a <__strtok_r+0xa>
 8012298:	6014      	str	r4, [r2, #0]
 801229a:	7003      	strb	r3, [r0, #0]
 801229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801229e:	461c      	mov	r4, r3
 80122a0:	e00c      	b.n	80122bc <__strtok_r+0x4c>
 80122a2:	b915      	cbnz	r5, 80122aa <__strtok_r+0x3a>
 80122a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122a8:	460e      	mov	r6, r1
 80122aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80122ae:	42ab      	cmp	r3, r5
 80122b0:	d1f7      	bne.n	80122a2 <__strtok_r+0x32>
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d0f3      	beq.n	801229e <__strtok_r+0x2e>
 80122b6:	2300      	movs	r3, #0
 80122b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80122bc:	6014      	str	r4, [r2, #0]
 80122be:	e7ed      	b.n	801229c <__strtok_r+0x2c>

080122c0 <strtok_r>:
 80122c0:	2301      	movs	r3, #1
 80122c2:	f7ff bfd5 	b.w	8012270 <__strtok_r>
	...

080122c8 <_strtol_l.constprop.0>:
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122ce:	d001      	beq.n	80122d4 <_strtol_l.constprop.0+0xc>
 80122d0:	2b24      	cmp	r3, #36	; 0x24
 80122d2:	d906      	bls.n	80122e2 <_strtol_l.constprop.0+0x1a>
 80122d4:	f7ff fe18 	bl	8011f08 <__errno>
 80122d8:	2316      	movs	r3, #22
 80122da:	6003      	str	r3, [r0, #0]
 80122dc:	2000      	movs	r0, #0
 80122de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80123c8 <_strtol_l.constprop.0+0x100>
 80122e6:	460d      	mov	r5, r1
 80122e8:	462e      	mov	r6, r5
 80122ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80122f2:	f017 0708 	ands.w	r7, r7, #8
 80122f6:	d1f7      	bne.n	80122e8 <_strtol_l.constprop.0+0x20>
 80122f8:	2c2d      	cmp	r4, #45	; 0x2d
 80122fa:	d132      	bne.n	8012362 <_strtol_l.constprop.0+0x9a>
 80122fc:	782c      	ldrb	r4, [r5, #0]
 80122fe:	2701      	movs	r7, #1
 8012300:	1cb5      	adds	r5, r6, #2
 8012302:	2b00      	cmp	r3, #0
 8012304:	d05b      	beq.n	80123be <_strtol_l.constprop.0+0xf6>
 8012306:	2b10      	cmp	r3, #16
 8012308:	d109      	bne.n	801231e <_strtol_l.constprop.0+0x56>
 801230a:	2c30      	cmp	r4, #48	; 0x30
 801230c:	d107      	bne.n	801231e <_strtol_l.constprop.0+0x56>
 801230e:	782c      	ldrb	r4, [r5, #0]
 8012310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012314:	2c58      	cmp	r4, #88	; 0x58
 8012316:	d14d      	bne.n	80123b4 <_strtol_l.constprop.0+0xec>
 8012318:	786c      	ldrb	r4, [r5, #1]
 801231a:	2310      	movs	r3, #16
 801231c:	3502      	adds	r5, #2
 801231e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012322:	f108 38ff 	add.w	r8, r8, #4294967295
 8012326:	f04f 0c00 	mov.w	ip, #0
 801232a:	fbb8 f9f3 	udiv	r9, r8, r3
 801232e:	4666      	mov	r6, ip
 8012330:	fb03 8a19 	mls	sl, r3, r9, r8
 8012334:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012338:	f1be 0f09 	cmp.w	lr, #9
 801233c:	d816      	bhi.n	801236c <_strtol_l.constprop.0+0xa4>
 801233e:	4674      	mov	r4, lr
 8012340:	42a3      	cmp	r3, r4
 8012342:	dd24      	ble.n	801238e <_strtol_l.constprop.0+0xc6>
 8012344:	f1bc 0f00 	cmp.w	ip, #0
 8012348:	db1e      	blt.n	8012388 <_strtol_l.constprop.0+0xc0>
 801234a:	45b1      	cmp	r9, r6
 801234c:	d31c      	bcc.n	8012388 <_strtol_l.constprop.0+0xc0>
 801234e:	d101      	bne.n	8012354 <_strtol_l.constprop.0+0x8c>
 8012350:	45a2      	cmp	sl, r4
 8012352:	db19      	blt.n	8012388 <_strtol_l.constprop.0+0xc0>
 8012354:	fb06 4603 	mla	r6, r6, r3, r4
 8012358:	f04f 0c01 	mov.w	ip, #1
 801235c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012360:	e7e8      	b.n	8012334 <_strtol_l.constprop.0+0x6c>
 8012362:	2c2b      	cmp	r4, #43	; 0x2b
 8012364:	bf04      	itt	eq
 8012366:	782c      	ldrbeq	r4, [r5, #0]
 8012368:	1cb5      	addeq	r5, r6, #2
 801236a:	e7ca      	b.n	8012302 <_strtol_l.constprop.0+0x3a>
 801236c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012370:	f1be 0f19 	cmp.w	lr, #25
 8012374:	d801      	bhi.n	801237a <_strtol_l.constprop.0+0xb2>
 8012376:	3c37      	subs	r4, #55	; 0x37
 8012378:	e7e2      	b.n	8012340 <_strtol_l.constprop.0+0x78>
 801237a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801237e:	f1be 0f19 	cmp.w	lr, #25
 8012382:	d804      	bhi.n	801238e <_strtol_l.constprop.0+0xc6>
 8012384:	3c57      	subs	r4, #87	; 0x57
 8012386:	e7db      	b.n	8012340 <_strtol_l.constprop.0+0x78>
 8012388:	f04f 3cff 	mov.w	ip, #4294967295
 801238c:	e7e6      	b.n	801235c <_strtol_l.constprop.0+0x94>
 801238e:	f1bc 0f00 	cmp.w	ip, #0
 8012392:	da05      	bge.n	80123a0 <_strtol_l.constprop.0+0xd8>
 8012394:	2322      	movs	r3, #34	; 0x22
 8012396:	6003      	str	r3, [r0, #0]
 8012398:	4646      	mov	r6, r8
 801239a:	b942      	cbnz	r2, 80123ae <_strtol_l.constprop.0+0xe6>
 801239c:	4630      	mov	r0, r6
 801239e:	e79e      	b.n	80122de <_strtol_l.constprop.0+0x16>
 80123a0:	b107      	cbz	r7, 80123a4 <_strtol_l.constprop.0+0xdc>
 80123a2:	4276      	negs	r6, r6
 80123a4:	2a00      	cmp	r2, #0
 80123a6:	d0f9      	beq.n	801239c <_strtol_l.constprop.0+0xd4>
 80123a8:	f1bc 0f00 	cmp.w	ip, #0
 80123ac:	d000      	beq.n	80123b0 <_strtol_l.constprop.0+0xe8>
 80123ae:	1e69      	subs	r1, r5, #1
 80123b0:	6011      	str	r1, [r2, #0]
 80123b2:	e7f3      	b.n	801239c <_strtol_l.constprop.0+0xd4>
 80123b4:	2430      	movs	r4, #48	; 0x30
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d1b1      	bne.n	801231e <_strtol_l.constprop.0+0x56>
 80123ba:	2308      	movs	r3, #8
 80123bc:	e7af      	b.n	801231e <_strtol_l.constprop.0+0x56>
 80123be:	2c30      	cmp	r4, #48	; 0x30
 80123c0:	d0a5      	beq.n	801230e <_strtol_l.constprop.0+0x46>
 80123c2:	230a      	movs	r3, #10
 80123c4:	e7ab      	b.n	801231e <_strtol_l.constprop.0+0x56>
 80123c6:	bf00      	nop
 80123c8:	08013de9 	.word	0x08013de9

080123cc <strtol>:
 80123cc:	4613      	mov	r3, r2
 80123ce:	460a      	mov	r2, r1
 80123d0:	4601      	mov	r1, r0
 80123d2:	4802      	ldr	r0, [pc, #8]	; (80123dc <strtol+0x10>)
 80123d4:	6800      	ldr	r0, [r0, #0]
 80123d6:	f7ff bf77 	b.w	80122c8 <_strtol_l.constprop.0>
 80123da:	bf00      	nop
 80123dc:	2000013c 	.word	0x2000013c

080123e0 <__assert_func>:
 80123e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123e2:	4614      	mov	r4, r2
 80123e4:	461a      	mov	r2, r3
 80123e6:	4b09      	ldr	r3, [pc, #36]	; (801240c <__assert_func+0x2c>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4605      	mov	r5, r0
 80123ec:	68d8      	ldr	r0, [r3, #12]
 80123ee:	b14c      	cbz	r4, 8012404 <__assert_func+0x24>
 80123f0:	4b07      	ldr	r3, [pc, #28]	; (8012410 <__assert_func+0x30>)
 80123f2:	9100      	str	r1, [sp, #0]
 80123f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123f8:	4906      	ldr	r1, [pc, #24]	; (8012414 <__assert_func+0x34>)
 80123fa:	462b      	mov	r3, r5
 80123fc:	f000 f80e 	bl	801241c <fiprintf>
 8012400:	f000 fd34 	bl	8012e6c <abort>
 8012404:	4b04      	ldr	r3, [pc, #16]	; (8012418 <__assert_func+0x38>)
 8012406:	461c      	mov	r4, r3
 8012408:	e7f3      	b.n	80123f2 <__assert_func+0x12>
 801240a:	bf00      	nop
 801240c:	2000013c 	.word	0x2000013c
 8012410:	08013dac 	.word	0x08013dac
 8012414:	08013db9 	.word	0x08013db9
 8012418:	08013de7 	.word	0x08013de7

0801241c <fiprintf>:
 801241c:	b40e      	push	{r1, r2, r3}
 801241e:	b503      	push	{r0, r1, lr}
 8012420:	4601      	mov	r1, r0
 8012422:	ab03      	add	r3, sp, #12
 8012424:	4805      	ldr	r0, [pc, #20]	; (801243c <fiprintf+0x20>)
 8012426:	f853 2b04 	ldr.w	r2, [r3], #4
 801242a:	6800      	ldr	r0, [r0, #0]
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	f000 f999 	bl	8012764 <_vfiprintf_r>
 8012432:	b002      	add	sp, #8
 8012434:	f85d eb04 	ldr.w	lr, [sp], #4
 8012438:	b003      	add	sp, #12
 801243a:	4770      	bx	lr
 801243c:	2000013c 	.word	0x2000013c

08012440 <__malloc_lock>:
 8012440:	4801      	ldr	r0, [pc, #4]	; (8012448 <__malloc_lock+0x8>)
 8012442:	f000 bed3 	b.w	80131ec <__retarget_lock_acquire_recursive>
 8012446:	bf00      	nop
 8012448:	20001ae0 	.word	0x20001ae0

0801244c <__malloc_unlock>:
 801244c:	4801      	ldr	r0, [pc, #4]	; (8012454 <__malloc_unlock+0x8>)
 801244e:	f000 bece 	b.w	80131ee <__retarget_lock_release_recursive>
 8012452:	bf00      	nop
 8012454:	20001ae0 	.word	0x20001ae0

08012458 <__ssputs_r>:
 8012458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801245c:	688e      	ldr	r6, [r1, #8]
 801245e:	429e      	cmp	r6, r3
 8012460:	4682      	mov	sl, r0
 8012462:	460c      	mov	r4, r1
 8012464:	4690      	mov	r8, r2
 8012466:	461f      	mov	r7, r3
 8012468:	d838      	bhi.n	80124dc <__ssputs_r+0x84>
 801246a:	898a      	ldrh	r2, [r1, #12]
 801246c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012470:	d032      	beq.n	80124d8 <__ssputs_r+0x80>
 8012472:	6825      	ldr	r5, [r4, #0]
 8012474:	6909      	ldr	r1, [r1, #16]
 8012476:	eba5 0901 	sub.w	r9, r5, r1
 801247a:	6965      	ldr	r5, [r4, #20]
 801247c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012484:	3301      	adds	r3, #1
 8012486:	444b      	add	r3, r9
 8012488:	106d      	asrs	r5, r5, #1
 801248a:	429d      	cmp	r5, r3
 801248c:	bf38      	it	cc
 801248e:	461d      	movcc	r5, r3
 8012490:	0553      	lsls	r3, r2, #21
 8012492:	d531      	bpl.n	80124f8 <__ssputs_r+0xa0>
 8012494:	4629      	mov	r1, r5
 8012496:	f7ff fdfb 	bl	8012090 <_malloc_r>
 801249a:	4606      	mov	r6, r0
 801249c:	b950      	cbnz	r0, 80124b4 <__ssputs_r+0x5c>
 801249e:	230c      	movs	r3, #12
 80124a0:	f8ca 3000 	str.w	r3, [sl]
 80124a4:	89a3      	ldrh	r3, [r4, #12]
 80124a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124aa:	81a3      	strh	r3, [r4, #12]
 80124ac:	f04f 30ff 	mov.w	r0, #4294967295
 80124b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b4:	6921      	ldr	r1, [r4, #16]
 80124b6:	464a      	mov	r2, r9
 80124b8:	f000 ff00 	bl	80132bc <memcpy>
 80124bc:	89a3      	ldrh	r3, [r4, #12]
 80124be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80124c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124c6:	81a3      	strh	r3, [r4, #12]
 80124c8:	6126      	str	r6, [r4, #16]
 80124ca:	6165      	str	r5, [r4, #20]
 80124cc:	444e      	add	r6, r9
 80124ce:	eba5 0509 	sub.w	r5, r5, r9
 80124d2:	6026      	str	r6, [r4, #0]
 80124d4:	60a5      	str	r5, [r4, #8]
 80124d6:	463e      	mov	r6, r7
 80124d8:	42be      	cmp	r6, r7
 80124da:	d900      	bls.n	80124de <__ssputs_r+0x86>
 80124dc:	463e      	mov	r6, r7
 80124de:	6820      	ldr	r0, [r4, #0]
 80124e0:	4632      	mov	r2, r6
 80124e2:	4641      	mov	r1, r8
 80124e4:	f000 fef8 	bl	80132d8 <memmove>
 80124e8:	68a3      	ldr	r3, [r4, #8]
 80124ea:	1b9b      	subs	r3, r3, r6
 80124ec:	60a3      	str	r3, [r4, #8]
 80124ee:	6823      	ldr	r3, [r4, #0]
 80124f0:	4433      	add	r3, r6
 80124f2:	6023      	str	r3, [r4, #0]
 80124f4:	2000      	movs	r0, #0
 80124f6:	e7db      	b.n	80124b0 <__ssputs_r+0x58>
 80124f8:	462a      	mov	r2, r5
 80124fa:	f000 ff07 	bl	801330c <_realloc_r>
 80124fe:	4606      	mov	r6, r0
 8012500:	2800      	cmp	r0, #0
 8012502:	d1e1      	bne.n	80124c8 <__ssputs_r+0x70>
 8012504:	6921      	ldr	r1, [r4, #16]
 8012506:	4650      	mov	r0, sl
 8012508:	f7ff fd56 	bl	8011fb8 <_free_r>
 801250c:	e7c7      	b.n	801249e <__ssputs_r+0x46>
	...

08012510 <_svfiprintf_r>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	4698      	mov	r8, r3
 8012516:	898b      	ldrh	r3, [r1, #12]
 8012518:	061b      	lsls	r3, r3, #24
 801251a:	b09d      	sub	sp, #116	; 0x74
 801251c:	4607      	mov	r7, r0
 801251e:	460d      	mov	r5, r1
 8012520:	4614      	mov	r4, r2
 8012522:	d50e      	bpl.n	8012542 <_svfiprintf_r+0x32>
 8012524:	690b      	ldr	r3, [r1, #16]
 8012526:	b963      	cbnz	r3, 8012542 <_svfiprintf_r+0x32>
 8012528:	2140      	movs	r1, #64	; 0x40
 801252a:	f7ff fdb1 	bl	8012090 <_malloc_r>
 801252e:	6028      	str	r0, [r5, #0]
 8012530:	6128      	str	r0, [r5, #16]
 8012532:	b920      	cbnz	r0, 801253e <_svfiprintf_r+0x2e>
 8012534:	230c      	movs	r3, #12
 8012536:	603b      	str	r3, [r7, #0]
 8012538:	f04f 30ff 	mov.w	r0, #4294967295
 801253c:	e0d1      	b.n	80126e2 <_svfiprintf_r+0x1d2>
 801253e:	2340      	movs	r3, #64	; 0x40
 8012540:	616b      	str	r3, [r5, #20]
 8012542:	2300      	movs	r3, #0
 8012544:	9309      	str	r3, [sp, #36]	; 0x24
 8012546:	2320      	movs	r3, #32
 8012548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801254c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012550:	2330      	movs	r3, #48	; 0x30
 8012552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80126fc <_svfiprintf_r+0x1ec>
 8012556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801255a:	f04f 0901 	mov.w	r9, #1
 801255e:	4623      	mov	r3, r4
 8012560:	469a      	mov	sl, r3
 8012562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012566:	b10a      	cbz	r2, 801256c <_svfiprintf_r+0x5c>
 8012568:	2a25      	cmp	r2, #37	; 0x25
 801256a:	d1f9      	bne.n	8012560 <_svfiprintf_r+0x50>
 801256c:	ebba 0b04 	subs.w	fp, sl, r4
 8012570:	d00b      	beq.n	801258a <_svfiprintf_r+0x7a>
 8012572:	465b      	mov	r3, fp
 8012574:	4622      	mov	r2, r4
 8012576:	4629      	mov	r1, r5
 8012578:	4638      	mov	r0, r7
 801257a:	f7ff ff6d 	bl	8012458 <__ssputs_r>
 801257e:	3001      	adds	r0, #1
 8012580:	f000 80aa 	beq.w	80126d8 <_svfiprintf_r+0x1c8>
 8012584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012586:	445a      	add	r2, fp
 8012588:	9209      	str	r2, [sp, #36]	; 0x24
 801258a:	f89a 3000 	ldrb.w	r3, [sl]
 801258e:	2b00      	cmp	r3, #0
 8012590:	f000 80a2 	beq.w	80126d8 <_svfiprintf_r+0x1c8>
 8012594:	2300      	movs	r3, #0
 8012596:	f04f 32ff 	mov.w	r2, #4294967295
 801259a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801259e:	f10a 0a01 	add.w	sl, sl, #1
 80125a2:	9304      	str	r3, [sp, #16]
 80125a4:	9307      	str	r3, [sp, #28]
 80125a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125aa:	931a      	str	r3, [sp, #104]	; 0x68
 80125ac:	4654      	mov	r4, sl
 80125ae:	2205      	movs	r2, #5
 80125b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b4:	4851      	ldr	r0, [pc, #324]	; (80126fc <_svfiprintf_r+0x1ec>)
 80125b6:	f7ed fe33 	bl	8000220 <memchr>
 80125ba:	9a04      	ldr	r2, [sp, #16]
 80125bc:	b9d8      	cbnz	r0, 80125f6 <_svfiprintf_r+0xe6>
 80125be:	06d0      	lsls	r0, r2, #27
 80125c0:	bf44      	itt	mi
 80125c2:	2320      	movmi	r3, #32
 80125c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125c8:	0711      	lsls	r1, r2, #28
 80125ca:	bf44      	itt	mi
 80125cc:	232b      	movmi	r3, #43	; 0x2b
 80125ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125d2:	f89a 3000 	ldrb.w	r3, [sl]
 80125d6:	2b2a      	cmp	r3, #42	; 0x2a
 80125d8:	d015      	beq.n	8012606 <_svfiprintf_r+0xf6>
 80125da:	9a07      	ldr	r2, [sp, #28]
 80125dc:	4654      	mov	r4, sl
 80125de:	2000      	movs	r0, #0
 80125e0:	f04f 0c0a 	mov.w	ip, #10
 80125e4:	4621      	mov	r1, r4
 80125e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125ea:	3b30      	subs	r3, #48	; 0x30
 80125ec:	2b09      	cmp	r3, #9
 80125ee:	d94e      	bls.n	801268e <_svfiprintf_r+0x17e>
 80125f0:	b1b0      	cbz	r0, 8012620 <_svfiprintf_r+0x110>
 80125f2:	9207      	str	r2, [sp, #28]
 80125f4:	e014      	b.n	8012620 <_svfiprintf_r+0x110>
 80125f6:	eba0 0308 	sub.w	r3, r0, r8
 80125fa:	fa09 f303 	lsl.w	r3, r9, r3
 80125fe:	4313      	orrs	r3, r2
 8012600:	9304      	str	r3, [sp, #16]
 8012602:	46a2      	mov	sl, r4
 8012604:	e7d2      	b.n	80125ac <_svfiprintf_r+0x9c>
 8012606:	9b03      	ldr	r3, [sp, #12]
 8012608:	1d19      	adds	r1, r3, #4
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	9103      	str	r1, [sp, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bfbb      	ittet	lt
 8012612:	425b      	neglt	r3, r3
 8012614:	f042 0202 	orrlt.w	r2, r2, #2
 8012618:	9307      	strge	r3, [sp, #28]
 801261a:	9307      	strlt	r3, [sp, #28]
 801261c:	bfb8      	it	lt
 801261e:	9204      	strlt	r2, [sp, #16]
 8012620:	7823      	ldrb	r3, [r4, #0]
 8012622:	2b2e      	cmp	r3, #46	; 0x2e
 8012624:	d10c      	bne.n	8012640 <_svfiprintf_r+0x130>
 8012626:	7863      	ldrb	r3, [r4, #1]
 8012628:	2b2a      	cmp	r3, #42	; 0x2a
 801262a:	d135      	bne.n	8012698 <_svfiprintf_r+0x188>
 801262c:	9b03      	ldr	r3, [sp, #12]
 801262e:	1d1a      	adds	r2, r3, #4
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	9203      	str	r2, [sp, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	bfb8      	it	lt
 8012638:	f04f 33ff 	movlt.w	r3, #4294967295
 801263c:	3402      	adds	r4, #2
 801263e:	9305      	str	r3, [sp, #20]
 8012640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801270c <_svfiprintf_r+0x1fc>
 8012644:	7821      	ldrb	r1, [r4, #0]
 8012646:	2203      	movs	r2, #3
 8012648:	4650      	mov	r0, sl
 801264a:	f7ed fde9 	bl	8000220 <memchr>
 801264e:	b140      	cbz	r0, 8012662 <_svfiprintf_r+0x152>
 8012650:	2340      	movs	r3, #64	; 0x40
 8012652:	eba0 000a 	sub.w	r0, r0, sl
 8012656:	fa03 f000 	lsl.w	r0, r3, r0
 801265a:	9b04      	ldr	r3, [sp, #16]
 801265c:	4303      	orrs	r3, r0
 801265e:	3401      	adds	r4, #1
 8012660:	9304      	str	r3, [sp, #16]
 8012662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012666:	4826      	ldr	r0, [pc, #152]	; (8012700 <_svfiprintf_r+0x1f0>)
 8012668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801266c:	2206      	movs	r2, #6
 801266e:	f7ed fdd7 	bl	8000220 <memchr>
 8012672:	2800      	cmp	r0, #0
 8012674:	d038      	beq.n	80126e8 <_svfiprintf_r+0x1d8>
 8012676:	4b23      	ldr	r3, [pc, #140]	; (8012704 <_svfiprintf_r+0x1f4>)
 8012678:	bb1b      	cbnz	r3, 80126c2 <_svfiprintf_r+0x1b2>
 801267a:	9b03      	ldr	r3, [sp, #12]
 801267c:	3307      	adds	r3, #7
 801267e:	f023 0307 	bic.w	r3, r3, #7
 8012682:	3308      	adds	r3, #8
 8012684:	9303      	str	r3, [sp, #12]
 8012686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012688:	4433      	add	r3, r6
 801268a:	9309      	str	r3, [sp, #36]	; 0x24
 801268c:	e767      	b.n	801255e <_svfiprintf_r+0x4e>
 801268e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012692:	460c      	mov	r4, r1
 8012694:	2001      	movs	r0, #1
 8012696:	e7a5      	b.n	80125e4 <_svfiprintf_r+0xd4>
 8012698:	2300      	movs	r3, #0
 801269a:	3401      	adds	r4, #1
 801269c:	9305      	str	r3, [sp, #20]
 801269e:	4619      	mov	r1, r3
 80126a0:	f04f 0c0a 	mov.w	ip, #10
 80126a4:	4620      	mov	r0, r4
 80126a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126aa:	3a30      	subs	r2, #48	; 0x30
 80126ac:	2a09      	cmp	r2, #9
 80126ae:	d903      	bls.n	80126b8 <_svfiprintf_r+0x1a8>
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d0c5      	beq.n	8012640 <_svfiprintf_r+0x130>
 80126b4:	9105      	str	r1, [sp, #20]
 80126b6:	e7c3      	b.n	8012640 <_svfiprintf_r+0x130>
 80126b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80126bc:	4604      	mov	r4, r0
 80126be:	2301      	movs	r3, #1
 80126c0:	e7f0      	b.n	80126a4 <_svfiprintf_r+0x194>
 80126c2:	ab03      	add	r3, sp, #12
 80126c4:	9300      	str	r3, [sp, #0]
 80126c6:	462a      	mov	r2, r5
 80126c8:	4b0f      	ldr	r3, [pc, #60]	; (8012708 <_svfiprintf_r+0x1f8>)
 80126ca:	a904      	add	r1, sp, #16
 80126cc:	4638      	mov	r0, r7
 80126ce:	f3af 8000 	nop.w
 80126d2:	1c42      	adds	r2, r0, #1
 80126d4:	4606      	mov	r6, r0
 80126d6:	d1d6      	bne.n	8012686 <_svfiprintf_r+0x176>
 80126d8:	89ab      	ldrh	r3, [r5, #12]
 80126da:	065b      	lsls	r3, r3, #25
 80126dc:	f53f af2c 	bmi.w	8012538 <_svfiprintf_r+0x28>
 80126e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126e2:	b01d      	add	sp, #116	; 0x74
 80126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e8:	ab03      	add	r3, sp, #12
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	462a      	mov	r2, r5
 80126ee:	4b06      	ldr	r3, [pc, #24]	; (8012708 <_svfiprintf_r+0x1f8>)
 80126f0:	a904      	add	r1, sp, #16
 80126f2:	4638      	mov	r0, r7
 80126f4:	f000 f9d4 	bl	8012aa0 <_printf_i>
 80126f8:	e7eb      	b.n	80126d2 <_svfiprintf_r+0x1c2>
 80126fa:	bf00      	nop
 80126fc:	08013ee9 	.word	0x08013ee9
 8012700:	08013ef3 	.word	0x08013ef3
 8012704:	00000000 	.word	0x00000000
 8012708:	08012459 	.word	0x08012459
 801270c:	08013eef 	.word	0x08013eef

08012710 <__sfputc_r>:
 8012710:	6893      	ldr	r3, [r2, #8]
 8012712:	3b01      	subs	r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	b410      	push	{r4}
 8012718:	6093      	str	r3, [r2, #8]
 801271a:	da08      	bge.n	801272e <__sfputc_r+0x1e>
 801271c:	6994      	ldr	r4, [r2, #24]
 801271e:	42a3      	cmp	r3, r4
 8012720:	db01      	blt.n	8012726 <__sfputc_r+0x16>
 8012722:	290a      	cmp	r1, #10
 8012724:	d103      	bne.n	801272e <__sfputc_r+0x1e>
 8012726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272a:	f000 badf 	b.w	8012cec <__swbuf_r>
 801272e:	6813      	ldr	r3, [r2, #0]
 8012730:	1c58      	adds	r0, r3, #1
 8012732:	6010      	str	r0, [r2, #0]
 8012734:	7019      	strb	r1, [r3, #0]
 8012736:	4608      	mov	r0, r1
 8012738:	f85d 4b04 	ldr.w	r4, [sp], #4
 801273c:	4770      	bx	lr

0801273e <__sfputs_r>:
 801273e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012740:	4606      	mov	r6, r0
 8012742:	460f      	mov	r7, r1
 8012744:	4614      	mov	r4, r2
 8012746:	18d5      	adds	r5, r2, r3
 8012748:	42ac      	cmp	r4, r5
 801274a:	d101      	bne.n	8012750 <__sfputs_r+0x12>
 801274c:	2000      	movs	r0, #0
 801274e:	e007      	b.n	8012760 <__sfputs_r+0x22>
 8012750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012754:	463a      	mov	r2, r7
 8012756:	4630      	mov	r0, r6
 8012758:	f7ff ffda 	bl	8012710 <__sfputc_r>
 801275c:	1c43      	adds	r3, r0, #1
 801275e:	d1f3      	bne.n	8012748 <__sfputs_r+0xa>
 8012760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012764 <_vfiprintf_r>:
 8012764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012768:	460d      	mov	r5, r1
 801276a:	b09d      	sub	sp, #116	; 0x74
 801276c:	4614      	mov	r4, r2
 801276e:	4698      	mov	r8, r3
 8012770:	4606      	mov	r6, r0
 8012772:	b118      	cbz	r0, 801277c <_vfiprintf_r+0x18>
 8012774:	6983      	ldr	r3, [r0, #24]
 8012776:	b90b      	cbnz	r3, 801277c <_vfiprintf_r+0x18>
 8012778:	f000 fc9a 	bl	80130b0 <__sinit>
 801277c:	4b89      	ldr	r3, [pc, #548]	; (80129a4 <_vfiprintf_r+0x240>)
 801277e:	429d      	cmp	r5, r3
 8012780:	d11b      	bne.n	80127ba <_vfiprintf_r+0x56>
 8012782:	6875      	ldr	r5, [r6, #4]
 8012784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012786:	07d9      	lsls	r1, r3, #31
 8012788:	d405      	bmi.n	8012796 <_vfiprintf_r+0x32>
 801278a:	89ab      	ldrh	r3, [r5, #12]
 801278c:	059a      	lsls	r2, r3, #22
 801278e:	d402      	bmi.n	8012796 <_vfiprintf_r+0x32>
 8012790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012792:	f000 fd2b 	bl	80131ec <__retarget_lock_acquire_recursive>
 8012796:	89ab      	ldrh	r3, [r5, #12]
 8012798:	071b      	lsls	r3, r3, #28
 801279a:	d501      	bpl.n	80127a0 <_vfiprintf_r+0x3c>
 801279c:	692b      	ldr	r3, [r5, #16]
 801279e:	b9eb      	cbnz	r3, 80127dc <_vfiprintf_r+0x78>
 80127a0:	4629      	mov	r1, r5
 80127a2:	4630      	mov	r0, r6
 80127a4:	f000 faf4 	bl	8012d90 <__swsetup_r>
 80127a8:	b1c0      	cbz	r0, 80127dc <_vfiprintf_r+0x78>
 80127aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127ac:	07dc      	lsls	r4, r3, #31
 80127ae:	d50e      	bpl.n	80127ce <_vfiprintf_r+0x6a>
 80127b0:	f04f 30ff 	mov.w	r0, #4294967295
 80127b4:	b01d      	add	sp, #116	; 0x74
 80127b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ba:	4b7b      	ldr	r3, [pc, #492]	; (80129a8 <_vfiprintf_r+0x244>)
 80127bc:	429d      	cmp	r5, r3
 80127be:	d101      	bne.n	80127c4 <_vfiprintf_r+0x60>
 80127c0:	68b5      	ldr	r5, [r6, #8]
 80127c2:	e7df      	b.n	8012784 <_vfiprintf_r+0x20>
 80127c4:	4b79      	ldr	r3, [pc, #484]	; (80129ac <_vfiprintf_r+0x248>)
 80127c6:	429d      	cmp	r5, r3
 80127c8:	bf08      	it	eq
 80127ca:	68f5      	ldreq	r5, [r6, #12]
 80127cc:	e7da      	b.n	8012784 <_vfiprintf_r+0x20>
 80127ce:	89ab      	ldrh	r3, [r5, #12]
 80127d0:	0598      	lsls	r0, r3, #22
 80127d2:	d4ed      	bmi.n	80127b0 <_vfiprintf_r+0x4c>
 80127d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127d6:	f000 fd0a 	bl	80131ee <__retarget_lock_release_recursive>
 80127da:	e7e9      	b.n	80127b0 <_vfiprintf_r+0x4c>
 80127dc:	2300      	movs	r3, #0
 80127de:	9309      	str	r3, [sp, #36]	; 0x24
 80127e0:	2320      	movs	r3, #32
 80127e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80127ea:	2330      	movs	r3, #48	; 0x30
 80127ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80129b0 <_vfiprintf_r+0x24c>
 80127f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127f4:	f04f 0901 	mov.w	r9, #1
 80127f8:	4623      	mov	r3, r4
 80127fa:	469a      	mov	sl, r3
 80127fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012800:	b10a      	cbz	r2, 8012806 <_vfiprintf_r+0xa2>
 8012802:	2a25      	cmp	r2, #37	; 0x25
 8012804:	d1f9      	bne.n	80127fa <_vfiprintf_r+0x96>
 8012806:	ebba 0b04 	subs.w	fp, sl, r4
 801280a:	d00b      	beq.n	8012824 <_vfiprintf_r+0xc0>
 801280c:	465b      	mov	r3, fp
 801280e:	4622      	mov	r2, r4
 8012810:	4629      	mov	r1, r5
 8012812:	4630      	mov	r0, r6
 8012814:	f7ff ff93 	bl	801273e <__sfputs_r>
 8012818:	3001      	adds	r0, #1
 801281a:	f000 80aa 	beq.w	8012972 <_vfiprintf_r+0x20e>
 801281e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012820:	445a      	add	r2, fp
 8012822:	9209      	str	r2, [sp, #36]	; 0x24
 8012824:	f89a 3000 	ldrb.w	r3, [sl]
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 80a2 	beq.w	8012972 <_vfiprintf_r+0x20e>
 801282e:	2300      	movs	r3, #0
 8012830:	f04f 32ff 	mov.w	r2, #4294967295
 8012834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012838:	f10a 0a01 	add.w	sl, sl, #1
 801283c:	9304      	str	r3, [sp, #16]
 801283e:	9307      	str	r3, [sp, #28]
 8012840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012844:	931a      	str	r3, [sp, #104]	; 0x68
 8012846:	4654      	mov	r4, sl
 8012848:	2205      	movs	r2, #5
 801284a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801284e:	4858      	ldr	r0, [pc, #352]	; (80129b0 <_vfiprintf_r+0x24c>)
 8012850:	f7ed fce6 	bl	8000220 <memchr>
 8012854:	9a04      	ldr	r2, [sp, #16]
 8012856:	b9d8      	cbnz	r0, 8012890 <_vfiprintf_r+0x12c>
 8012858:	06d1      	lsls	r1, r2, #27
 801285a:	bf44      	itt	mi
 801285c:	2320      	movmi	r3, #32
 801285e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012862:	0713      	lsls	r3, r2, #28
 8012864:	bf44      	itt	mi
 8012866:	232b      	movmi	r3, #43	; 0x2b
 8012868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801286c:	f89a 3000 	ldrb.w	r3, [sl]
 8012870:	2b2a      	cmp	r3, #42	; 0x2a
 8012872:	d015      	beq.n	80128a0 <_vfiprintf_r+0x13c>
 8012874:	9a07      	ldr	r2, [sp, #28]
 8012876:	4654      	mov	r4, sl
 8012878:	2000      	movs	r0, #0
 801287a:	f04f 0c0a 	mov.w	ip, #10
 801287e:	4621      	mov	r1, r4
 8012880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012884:	3b30      	subs	r3, #48	; 0x30
 8012886:	2b09      	cmp	r3, #9
 8012888:	d94e      	bls.n	8012928 <_vfiprintf_r+0x1c4>
 801288a:	b1b0      	cbz	r0, 80128ba <_vfiprintf_r+0x156>
 801288c:	9207      	str	r2, [sp, #28]
 801288e:	e014      	b.n	80128ba <_vfiprintf_r+0x156>
 8012890:	eba0 0308 	sub.w	r3, r0, r8
 8012894:	fa09 f303 	lsl.w	r3, r9, r3
 8012898:	4313      	orrs	r3, r2
 801289a:	9304      	str	r3, [sp, #16]
 801289c:	46a2      	mov	sl, r4
 801289e:	e7d2      	b.n	8012846 <_vfiprintf_r+0xe2>
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	1d19      	adds	r1, r3, #4
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	9103      	str	r1, [sp, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	bfbb      	ittet	lt
 80128ac:	425b      	neglt	r3, r3
 80128ae:	f042 0202 	orrlt.w	r2, r2, #2
 80128b2:	9307      	strge	r3, [sp, #28]
 80128b4:	9307      	strlt	r3, [sp, #28]
 80128b6:	bfb8      	it	lt
 80128b8:	9204      	strlt	r2, [sp, #16]
 80128ba:	7823      	ldrb	r3, [r4, #0]
 80128bc:	2b2e      	cmp	r3, #46	; 0x2e
 80128be:	d10c      	bne.n	80128da <_vfiprintf_r+0x176>
 80128c0:	7863      	ldrb	r3, [r4, #1]
 80128c2:	2b2a      	cmp	r3, #42	; 0x2a
 80128c4:	d135      	bne.n	8012932 <_vfiprintf_r+0x1ce>
 80128c6:	9b03      	ldr	r3, [sp, #12]
 80128c8:	1d1a      	adds	r2, r3, #4
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	9203      	str	r2, [sp, #12]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	bfb8      	it	lt
 80128d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80128d6:	3402      	adds	r4, #2
 80128d8:	9305      	str	r3, [sp, #20]
 80128da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80129c0 <_vfiprintf_r+0x25c>
 80128de:	7821      	ldrb	r1, [r4, #0]
 80128e0:	2203      	movs	r2, #3
 80128e2:	4650      	mov	r0, sl
 80128e4:	f7ed fc9c 	bl	8000220 <memchr>
 80128e8:	b140      	cbz	r0, 80128fc <_vfiprintf_r+0x198>
 80128ea:	2340      	movs	r3, #64	; 0x40
 80128ec:	eba0 000a 	sub.w	r0, r0, sl
 80128f0:	fa03 f000 	lsl.w	r0, r3, r0
 80128f4:	9b04      	ldr	r3, [sp, #16]
 80128f6:	4303      	orrs	r3, r0
 80128f8:	3401      	adds	r4, #1
 80128fa:	9304      	str	r3, [sp, #16]
 80128fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012900:	482c      	ldr	r0, [pc, #176]	; (80129b4 <_vfiprintf_r+0x250>)
 8012902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012906:	2206      	movs	r2, #6
 8012908:	f7ed fc8a 	bl	8000220 <memchr>
 801290c:	2800      	cmp	r0, #0
 801290e:	d03f      	beq.n	8012990 <_vfiprintf_r+0x22c>
 8012910:	4b29      	ldr	r3, [pc, #164]	; (80129b8 <_vfiprintf_r+0x254>)
 8012912:	bb1b      	cbnz	r3, 801295c <_vfiprintf_r+0x1f8>
 8012914:	9b03      	ldr	r3, [sp, #12]
 8012916:	3307      	adds	r3, #7
 8012918:	f023 0307 	bic.w	r3, r3, #7
 801291c:	3308      	adds	r3, #8
 801291e:	9303      	str	r3, [sp, #12]
 8012920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012922:	443b      	add	r3, r7
 8012924:	9309      	str	r3, [sp, #36]	; 0x24
 8012926:	e767      	b.n	80127f8 <_vfiprintf_r+0x94>
 8012928:	fb0c 3202 	mla	r2, ip, r2, r3
 801292c:	460c      	mov	r4, r1
 801292e:	2001      	movs	r0, #1
 8012930:	e7a5      	b.n	801287e <_vfiprintf_r+0x11a>
 8012932:	2300      	movs	r3, #0
 8012934:	3401      	adds	r4, #1
 8012936:	9305      	str	r3, [sp, #20]
 8012938:	4619      	mov	r1, r3
 801293a:	f04f 0c0a 	mov.w	ip, #10
 801293e:	4620      	mov	r0, r4
 8012940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012944:	3a30      	subs	r2, #48	; 0x30
 8012946:	2a09      	cmp	r2, #9
 8012948:	d903      	bls.n	8012952 <_vfiprintf_r+0x1ee>
 801294a:	2b00      	cmp	r3, #0
 801294c:	d0c5      	beq.n	80128da <_vfiprintf_r+0x176>
 801294e:	9105      	str	r1, [sp, #20]
 8012950:	e7c3      	b.n	80128da <_vfiprintf_r+0x176>
 8012952:	fb0c 2101 	mla	r1, ip, r1, r2
 8012956:	4604      	mov	r4, r0
 8012958:	2301      	movs	r3, #1
 801295a:	e7f0      	b.n	801293e <_vfiprintf_r+0x1da>
 801295c:	ab03      	add	r3, sp, #12
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	462a      	mov	r2, r5
 8012962:	4b16      	ldr	r3, [pc, #88]	; (80129bc <_vfiprintf_r+0x258>)
 8012964:	a904      	add	r1, sp, #16
 8012966:	4630      	mov	r0, r6
 8012968:	f3af 8000 	nop.w
 801296c:	4607      	mov	r7, r0
 801296e:	1c78      	adds	r0, r7, #1
 8012970:	d1d6      	bne.n	8012920 <_vfiprintf_r+0x1bc>
 8012972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012974:	07d9      	lsls	r1, r3, #31
 8012976:	d405      	bmi.n	8012984 <_vfiprintf_r+0x220>
 8012978:	89ab      	ldrh	r3, [r5, #12]
 801297a:	059a      	lsls	r2, r3, #22
 801297c:	d402      	bmi.n	8012984 <_vfiprintf_r+0x220>
 801297e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012980:	f000 fc35 	bl	80131ee <__retarget_lock_release_recursive>
 8012984:	89ab      	ldrh	r3, [r5, #12]
 8012986:	065b      	lsls	r3, r3, #25
 8012988:	f53f af12 	bmi.w	80127b0 <_vfiprintf_r+0x4c>
 801298c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801298e:	e711      	b.n	80127b4 <_vfiprintf_r+0x50>
 8012990:	ab03      	add	r3, sp, #12
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	462a      	mov	r2, r5
 8012996:	4b09      	ldr	r3, [pc, #36]	; (80129bc <_vfiprintf_r+0x258>)
 8012998:	a904      	add	r1, sp, #16
 801299a:	4630      	mov	r0, r6
 801299c:	f000 f880 	bl	8012aa0 <_printf_i>
 80129a0:	e7e4      	b.n	801296c <_vfiprintf_r+0x208>
 80129a2:	bf00      	nop
 80129a4:	08013f3c 	.word	0x08013f3c
 80129a8:	08013f5c 	.word	0x08013f5c
 80129ac:	08013f1c 	.word	0x08013f1c
 80129b0:	08013ee9 	.word	0x08013ee9
 80129b4:	08013ef3 	.word	0x08013ef3
 80129b8:	00000000 	.word	0x00000000
 80129bc:	0801273f 	.word	0x0801273f
 80129c0:	08013eef 	.word	0x08013eef

080129c4 <_printf_common>:
 80129c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c8:	4616      	mov	r6, r2
 80129ca:	4699      	mov	r9, r3
 80129cc:	688a      	ldr	r2, [r1, #8]
 80129ce:	690b      	ldr	r3, [r1, #16]
 80129d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129d4:	4293      	cmp	r3, r2
 80129d6:	bfb8      	it	lt
 80129d8:	4613      	movlt	r3, r2
 80129da:	6033      	str	r3, [r6, #0]
 80129dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129e0:	4607      	mov	r7, r0
 80129e2:	460c      	mov	r4, r1
 80129e4:	b10a      	cbz	r2, 80129ea <_printf_common+0x26>
 80129e6:	3301      	adds	r3, #1
 80129e8:	6033      	str	r3, [r6, #0]
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	0699      	lsls	r1, r3, #26
 80129ee:	bf42      	ittt	mi
 80129f0:	6833      	ldrmi	r3, [r6, #0]
 80129f2:	3302      	addmi	r3, #2
 80129f4:	6033      	strmi	r3, [r6, #0]
 80129f6:	6825      	ldr	r5, [r4, #0]
 80129f8:	f015 0506 	ands.w	r5, r5, #6
 80129fc:	d106      	bne.n	8012a0c <_printf_common+0x48>
 80129fe:	f104 0a19 	add.w	sl, r4, #25
 8012a02:	68e3      	ldr	r3, [r4, #12]
 8012a04:	6832      	ldr	r2, [r6, #0]
 8012a06:	1a9b      	subs	r3, r3, r2
 8012a08:	42ab      	cmp	r3, r5
 8012a0a:	dc26      	bgt.n	8012a5a <_printf_common+0x96>
 8012a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a10:	1e13      	subs	r3, r2, #0
 8012a12:	6822      	ldr	r2, [r4, #0]
 8012a14:	bf18      	it	ne
 8012a16:	2301      	movne	r3, #1
 8012a18:	0692      	lsls	r2, r2, #26
 8012a1a:	d42b      	bmi.n	8012a74 <_printf_common+0xb0>
 8012a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a20:	4649      	mov	r1, r9
 8012a22:	4638      	mov	r0, r7
 8012a24:	47c0      	blx	r8
 8012a26:	3001      	adds	r0, #1
 8012a28:	d01e      	beq.n	8012a68 <_printf_common+0xa4>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	68e5      	ldr	r5, [r4, #12]
 8012a2e:	6832      	ldr	r2, [r6, #0]
 8012a30:	f003 0306 	and.w	r3, r3, #6
 8012a34:	2b04      	cmp	r3, #4
 8012a36:	bf08      	it	eq
 8012a38:	1aad      	subeq	r5, r5, r2
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	6922      	ldr	r2, [r4, #16]
 8012a3e:	bf0c      	ite	eq
 8012a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a44:	2500      	movne	r5, #0
 8012a46:	4293      	cmp	r3, r2
 8012a48:	bfc4      	itt	gt
 8012a4a:	1a9b      	subgt	r3, r3, r2
 8012a4c:	18ed      	addgt	r5, r5, r3
 8012a4e:	2600      	movs	r6, #0
 8012a50:	341a      	adds	r4, #26
 8012a52:	42b5      	cmp	r5, r6
 8012a54:	d11a      	bne.n	8012a8c <_printf_common+0xc8>
 8012a56:	2000      	movs	r0, #0
 8012a58:	e008      	b.n	8012a6c <_printf_common+0xa8>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	4652      	mov	r2, sl
 8012a5e:	4649      	mov	r1, r9
 8012a60:	4638      	mov	r0, r7
 8012a62:	47c0      	blx	r8
 8012a64:	3001      	adds	r0, #1
 8012a66:	d103      	bne.n	8012a70 <_printf_common+0xac>
 8012a68:	f04f 30ff 	mov.w	r0, #4294967295
 8012a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a70:	3501      	adds	r5, #1
 8012a72:	e7c6      	b.n	8012a02 <_printf_common+0x3e>
 8012a74:	18e1      	adds	r1, r4, r3
 8012a76:	1c5a      	adds	r2, r3, #1
 8012a78:	2030      	movs	r0, #48	; 0x30
 8012a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a7e:	4422      	add	r2, r4
 8012a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a88:	3302      	adds	r3, #2
 8012a8a:	e7c7      	b.n	8012a1c <_printf_common+0x58>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	4622      	mov	r2, r4
 8012a90:	4649      	mov	r1, r9
 8012a92:	4638      	mov	r0, r7
 8012a94:	47c0      	blx	r8
 8012a96:	3001      	adds	r0, #1
 8012a98:	d0e6      	beq.n	8012a68 <_printf_common+0xa4>
 8012a9a:	3601      	adds	r6, #1
 8012a9c:	e7d9      	b.n	8012a52 <_printf_common+0x8e>
	...

08012aa0 <_printf_i>:
 8012aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012aa4:	7e0f      	ldrb	r7, [r1, #24]
 8012aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012aa8:	2f78      	cmp	r7, #120	; 0x78
 8012aaa:	4691      	mov	r9, r2
 8012aac:	4680      	mov	r8, r0
 8012aae:	460c      	mov	r4, r1
 8012ab0:	469a      	mov	sl, r3
 8012ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012ab6:	d807      	bhi.n	8012ac8 <_printf_i+0x28>
 8012ab8:	2f62      	cmp	r7, #98	; 0x62
 8012aba:	d80a      	bhi.n	8012ad2 <_printf_i+0x32>
 8012abc:	2f00      	cmp	r7, #0
 8012abe:	f000 80d8 	beq.w	8012c72 <_printf_i+0x1d2>
 8012ac2:	2f58      	cmp	r7, #88	; 0x58
 8012ac4:	f000 80a3 	beq.w	8012c0e <_printf_i+0x16e>
 8012ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ad0:	e03a      	b.n	8012b48 <_printf_i+0xa8>
 8012ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012ad6:	2b15      	cmp	r3, #21
 8012ad8:	d8f6      	bhi.n	8012ac8 <_printf_i+0x28>
 8012ada:	a101      	add	r1, pc, #4	; (adr r1, 8012ae0 <_printf_i+0x40>)
 8012adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ae0:	08012b39 	.word	0x08012b39
 8012ae4:	08012b4d 	.word	0x08012b4d
 8012ae8:	08012ac9 	.word	0x08012ac9
 8012aec:	08012ac9 	.word	0x08012ac9
 8012af0:	08012ac9 	.word	0x08012ac9
 8012af4:	08012ac9 	.word	0x08012ac9
 8012af8:	08012b4d 	.word	0x08012b4d
 8012afc:	08012ac9 	.word	0x08012ac9
 8012b00:	08012ac9 	.word	0x08012ac9
 8012b04:	08012ac9 	.word	0x08012ac9
 8012b08:	08012ac9 	.word	0x08012ac9
 8012b0c:	08012c59 	.word	0x08012c59
 8012b10:	08012b7d 	.word	0x08012b7d
 8012b14:	08012c3b 	.word	0x08012c3b
 8012b18:	08012ac9 	.word	0x08012ac9
 8012b1c:	08012ac9 	.word	0x08012ac9
 8012b20:	08012c7b 	.word	0x08012c7b
 8012b24:	08012ac9 	.word	0x08012ac9
 8012b28:	08012b7d 	.word	0x08012b7d
 8012b2c:	08012ac9 	.word	0x08012ac9
 8012b30:	08012ac9 	.word	0x08012ac9
 8012b34:	08012c43 	.word	0x08012c43
 8012b38:	682b      	ldr	r3, [r5, #0]
 8012b3a:	1d1a      	adds	r2, r3, #4
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	602a      	str	r2, [r5, #0]
 8012b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b48:	2301      	movs	r3, #1
 8012b4a:	e0a3      	b.n	8012c94 <_printf_i+0x1f4>
 8012b4c:	6820      	ldr	r0, [r4, #0]
 8012b4e:	6829      	ldr	r1, [r5, #0]
 8012b50:	0606      	lsls	r6, r0, #24
 8012b52:	f101 0304 	add.w	r3, r1, #4
 8012b56:	d50a      	bpl.n	8012b6e <_printf_i+0xce>
 8012b58:	680e      	ldr	r6, [r1, #0]
 8012b5a:	602b      	str	r3, [r5, #0]
 8012b5c:	2e00      	cmp	r6, #0
 8012b5e:	da03      	bge.n	8012b68 <_printf_i+0xc8>
 8012b60:	232d      	movs	r3, #45	; 0x2d
 8012b62:	4276      	negs	r6, r6
 8012b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b68:	485e      	ldr	r0, [pc, #376]	; (8012ce4 <_printf_i+0x244>)
 8012b6a:	230a      	movs	r3, #10
 8012b6c:	e019      	b.n	8012ba2 <_printf_i+0x102>
 8012b6e:	680e      	ldr	r6, [r1, #0]
 8012b70:	602b      	str	r3, [r5, #0]
 8012b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b76:	bf18      	it	ne
 8012b78:	b236      	sxthne	r6, r6
 8012b7a:	e7ef      	b.n	8012b5c <_printf_i+0xbc>
 8012b7c:	682b      	ldr	r3, [r5, #0]
 8012b7e:	6820      	ldr	r0, [r4, #0]
 8012b80:	1d19      	adds	r1, r3, #4
 8012b82:	6029      	str	r1, [r5, #0]
 8012b84:	0601      	lsls	r1, r0, #24
 8012b86:	d501      	bpl.n	8012b8c <_printf_i+0xec>
 8012b88:	681e      	ldr	r6, [r3, #0]
 8012b8a:	e002      	b.n	8012b92 <_printf_i+0xf2>
 8012b8c:	0646      	lsls	r6, r0, #25
 8012b8e:	d5fb      	bpl.n	8012b88 <_printf_i+0xe8>
 8012b90:	881e      	ldrh	r6, [r3, #0]
 8012b92:	4854      	ldr	r0, [pc, #336]	; (8012ce4 <_printf_i+0x244>)
 8012b94:	2f6f      	cmp	r7, #111	; 0x6f
 8012b96:	bf0c      	ite	eq
 8012b98:	2308      	moveq	r3, #8
 8012b9a:	230a      	movne	r3, #10
 8012b9c:	2100      	movs	r1, #0
 8012b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ba2:	6865      	ldr	r5, [r4, #4]
 8012ba4:	60a5      	str	r5, [r4, #8]
 8012ba6:	2d00      	cmp	r5, #0
 8012ba8:	bfa2      	ittt	ge
 8012baa:	6821      	ldrge	r1, [r4, #0]
 8012bac:	f021 0104 	bicge.w	r1, r1, #4
 8012bb0:	6021      	strge	r1, [r4, #0]
 8012bb2:	b90e      	cbnz	r6, 8012bb8 <_printf_i+0x118>
 8012bb4:	2d00      	cmp	r5, #0
 8012bb6:	d04d      	beq.n	8012c54 <_printf_i+0x1b4>
 8012bb8:	4615      	mov	r5, r2
 8012bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8012bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8012bc2:	5dc7      	ldrb	r7, [r0, r7]
 8012bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012bc8:	4637      	mov	r7, r6
 8012bca:	42bb      	cmp	r3, r7
 8012bcc:	460e      	mov	r6, r1
 8012bce:	d9f4      	bls.n	8012bba <_printf_i+0x11a>
 8012bd0:	2b08      	cmp	r3, #8
 8012bd2:	d10b      	bne.n	8012bec <_printf_i+0x14c>
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	07de      	lsls	r6, r3, #31
 8012bd8:	d508      	bpl.n	8012bec <_printf_i+0x14c>
 8012bda:	6923      	ldr	r3, [r4, #16]
 8012bdc:	6861      	ldr	r1, [r4, #4]
 8012bde:	4299      	cmp	r1, r3
 8012be0:	bfde      	ittt	le
 8012be2:	2330      	movle	r3, #48	; 0x30
 8012be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012bec:	1b52      	subs	r2, r2, r5
 8012bee:	6122      	str	r2, [r4, #16]
 8012bf0:	f8cd a000 	str.w	sl, [sp]
 8012bf4:	464b      	mov	r3, r9
 8012bf6:	aa03      	add	r2, sp, #12
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	4640      	mov	r0, r8
 8012bfc:	f7ff fee2 	bl	80129c4 <_printf_common>
 8012c00:	3001      	adds	r0, #1
 8012c02:	d14c      	bne.n	8012c9e <_printf_i+0x1fe>
 8012c04:	f04f 30ff 	mov.w	r0, #4294967295
 8012c08:	b004      	add	sp, #16
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	4835      	ldr	r0, [pc, #212]	; (8012ce4 <_printf_i+0x244>)
 8012c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012c14:	6829      	ldr	r1, [r5, #0]
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8012c1c:	6029      	str	r1, [r5, #0]
 8012c1e:	061d      	lsls	r5, r3, #24
 8012c20:	d514      	bpl.n	8012c4c <_printf_i+0x1ac>
 8012c22:	07df      	lsls	r7, r3, #31
 8012c24:	bf44      	itt	mi
 8012c26:	f043 0320 	orrmi.w	r3, r3, #32
 8012c2a:	6023      	strmi	r3, [r4, #0]
 8012c2c:	b91e      	cbnz	r6, 8012c36 <_printf_i+0x196>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	f023 0320 	bic.w	r3, r3, #32
 8012c34:	6023      	str	r3, [r4, #0]
 8012c36:	2310      	movs	r3, #16
 8012c38:	e7b0      	b.n	8012b9c <_printf_i+0xfc>
 8012c3a:	6823      	ldr	r3, [r4, #0]
 8012c3c:	f043 0320 	orr.w	r3, r3, #32
 8012c40:	6023      	str	r3, [r4, #0]
 8012c42:	2378      	movs	r3, #120	; 0x78
 8012c44:	4828      	ldr	r0, [pc, #160]	; (8012ce8 <_printf_i+0x248>)
 8012c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012c4a:	e7e3      	b.n	8012c14 <_printf_i+0x174>
 8012c4c:	0659      	lsls	r1, r3, #25
 8012c4e:	bf48      	it	mi
 8012c50:	b2b6      	uxthmi	r6, r6
 8012c52:	e7e6      	b.n	8012c22 <_printf_i+0x182>
 8012c54:	4615      	mov	r5, r2
 8012c56:	e7bb      	b.n	8012bd0 <_printf_i+0x130>
 8012c58:	682b      	ldr	r3, [r5, #0]
 8012c5a:	6826      	ldr	r6, [r4, #0]
 8012c5c:	6961      	ldr	r1, [r4, #20]
 8012c5e:	1d18      	adds	r0, r3, #4
 8012c60:	6028      	str	r0, [r5, #0]
 8012c62:	0635      	lsls	r5, r6, #24
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	d501      	bpl.n	8012c6c <_printf_i+0x1cc>
 8012c68:	6019      	str	r1, [r3, #0]
 8012c6a:	e002      	b.n	8012c72 <_printf_i+0x1d2>
 8012c6c:	0670      	lsls	r0, r6, #25
 8012c6e:	d5fb      	bpl.n	8012c68 <_printf_i+0x1c8>
 8012c70:	8019      	strh	r1, [r3, #0]
 8012c72:	2300      	movs	r3, #0
 8012c74:	6123      	str	r3, [r4, #16]
 8012c76:	4615      	mov	r5, r2
 8012c78:	e7ba      	b.n	8012bf0 <_printf_i+0x150>
 8012c7a:	682b      	ldr	r3, [r5, #0]
 8012c7c:	1d1a      	adds	r2, r3, #4
 8012c7e:	602a      	str	r2, [r5, #0]
 8012c80:	681d      	ldr	r5, [r3, #0]
 8012c82:	6862      	ldr	r2, [r4, #4]
 8012c84:	2100      	movs	r1, #0
 8012c86:	4628      	mov	r0, r5
 8012c88:	f7ed faca 	bl	8000220 <memchr>
 8012c8c:	b108      	cbz	r0, 8012c92 <_printf_i+0x1f2>
 8012c8e:	1b40      	subs	r0, r0, r5
 8012c90:	6060      	str	r0, [r4, #4]
 8012c92:	6863      	ldr	r3, [r4, #4]
 8012c94:	6123      	str	r3, [r4, #16]
 8012c96:	2300      	movs	r3, #0
 8012c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c9c:	e7a8      	b.n	8012bf0 <_printf_i+0x150>
 8012c9e:	6923      	ldr	r3, [r4, #16]
 8012ca0:	462a      	mov	r2, r5
 8012ca2:	4649      	mov	r1, r9
 8012ca4:	4640      	mov	r0, r8
 8012ca6:	47d0      	blx	sl
 8012ca8:	3001      	adds	r0, #1
 8012caa:	d0ab      	beq.n	8012c04 <_printf_i+0x164>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	079b      	lsls	r3, r3, #30
 8012cb0:	d413      	bmi.n	8012cda <_printf_i+0x23a>
 8012cb2:	68e0      	ldr	r0, [r4, #12]
 8012cb4:	9b03      	ldr	r3, [sp, #12]
 8012cb6:	4298      	cmp	r0, r3
 8012cb8:	bfb8      	it	lt
 8012cba:	4618      	movlt	r0, r3
 8012cbc:	e7a4      	b.n	8012c08 <_printf_i+0x168>
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	4632      	mov	r2, r6
 8012cc2:	4649      	mov	r1, r9
 8012cc4:	4640      	mov	r0, r8
 8012cc6:	47d0      	blx	sl
 8012cc8:	3001      	adds	r0, #1
 8012cca:	d09b      	beq.n	8012c04 <_printf_i+0x164>
 8012ccc:	3501      	adds	r5, #1
 8012cce:	68e3      	ldr	r3, [r4, #12]
 8012cd0:	9903      	ldr	r1, [sp, #12]
 8012cd2:	1a5b      	subs	r3, r3, r1
 8012cd4:	42ab      	cmp	r3, r5
 8012cd6:	dcf2      	bgt.n	8012cbe <_printf_i+0x21e>
 8012cd8:	e7eb      	b.n	8012cb2 <_printf_i+0x212>
 8012cda:	2500      	movs	r5, #0
 8012cdc:	f104 0619 	add.w	r6, r4, #25
 8012ce0:	e7f5      	b.n	8012cce <_printf_i+0x22e>
 8012ce2:	bf00      	nop
 8012ce4:	08013efa 	.word	0x08013efa
 8012ce8:	08013f0b 	.word	0x08013f0b

08012cec <__swbuf_r>:
 8012cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cee:	460e      	mov	r6, r1
 8012cf0:	4614      	mov	r4, r2
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	b118      	cbz	r0, 8012cfe <__swbuf_r+0x12>
 8012cf6:	6983      	ldr	r3, [r0, #24]
 8012cf8:	b90b      	cbnz	r3, 8012cfe <__swbuf_r+0x12>
 8012cfa:	f000 f9d9 	bl	80130b0 <__sinit>
 8012cfe:	4b21      	ldr	r3, [pc, #132]	; (8012d84 <__swbuf_r+0x98>)
 8012d00:	429c      	cmp	r4, r3
 8012d02:	d12b      	bne.n	8012d5c <__swbuf_r+0x70>
 8012d04:	686c      	ldr	r4, [r5, #4]
 8012d06:	69a3      	ldr	r3, [r4, #24]
 8012d08:	60a3      	str	r3, [r4, #8]
 8012d0a:	89a3      	ldrh	r3, [r4, #12]
 8012d0c:	071a      	lsls	r2, r3, #28
 8012d0e:	d52f      	bpl.n	8012d70 <__swbuf_r+0x84>
 8012d10:	6923      	ldr	r3, [r4, #16]
 8012d12:	b36b      	cbz	r3, 8012d70 <__swbuf_r+0x84>
 8012d14:	6923      	ldr	r3, [r4, #16]
 8012d16:	6820      	ldr	r0, [r4, #0]
 8012d18:	1ac0      	subs	r0, r0, r3
 8012d1a:	6963      	ldr	r3, [r4, #20]
 8012d1c:	b2f6      	uxtb	r6, r6
 8012d1e:	4283      	cmp	r3, r0
 8012d20:	4637      	mov	r7, r6
 8012d22:	dc04      	bgt.n	8012d2e <__swbuf_r+0x42>
 8012d24:	4621      	mov	r1, r4
 8012d26:	4628      	mov	r0, r5
 8012d28:	f000 f92e 	bl	8012f88 <_fflush_r>
 8012d2c:	bb30      	cbnz	r0, 8012d7c <__swbuf_r+0x90>
 8012d2e:	68a3      	ldr	r3, [r4, #8]
 8012d30:	3b01      	subs	r3, #1
 8012d32:	60a3      	str	r3, [r4, #8]
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	1c5a      	adds	r2, r3, #1
 8012d38:	6022      	str	r2, [r4, #0]
 8012d3a:	701e      	strb	r6, [r3, #0]
 8012d3c:	6963      	ldr	r3, [r4, #20]
 8012d3e:	3001      	adds	r0, #1
 8012d40:	4283      	cmp	r3, r0
 8012d42:	d004      	beq.n	8012d4e <__swbuf_r+0x62>
 8012d44:	89a3      	ldrh	r3, [r4, #12]
 8012d46:	07db      	lsls	r3, r3, #31
 8012d48:	d506      	bpl.n	8012d58 <__swbuf_r+0x6c>
 8012d4a:	2e0a      	cmp	r6, #10
 8012d4c:	d104      	bne.n	8012d58 <__swbuf_r+0x6c>
 8012d4e:	4621      	mov	r1, r4
 8012d50:	4628      	mov	r0, r5
 8012d52:	f000 f919 	bl	8012f88 <_fflush_r>
 8012d56:	b988      	cbnz	r0, 8012d7c <__swbuf_r+0x90>
 8012d58:	4638      	mov	r0, r7
 8012d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d5c:	4b0a      	ldr	r3, [pc, #40]	; (8012d88 <__swbuf_r+0x9c>)
 8012d5e:	429c      	cmp	r4, r3
 8012d60:	d101      	bne.n	8012d66 <__swbuf_r+0x7a>
 8012d62:	68ac      	ldr	r4, [r5, #8]
 8012d64:	e7cf      	b.n	8012d06 <__swbuf_r+0x1a>
 8012d66:	4b09      	ldr	r3, [pc, #36]	; (8012d8c <__swbuf_r+0xa0>)
 8012d68:	429c      	cmp	r4, r3
 8012d6a:	bf08      	it	eq
 8012d6c:	68ec      	ldreq	r4, [r5, #12]
 8012d6e:	e7ca      	b.n	8012d06 <__swbuf_r+0x1a>
 8012d70:	4621      	mov	r1, r4
 8012d72:	4628      	mov	r0, r5
 8012d74:	f000 f80c 	bl	8012d90 <__swsetup_r>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d0cb      	beq.n	8012d14 <__swbuf_r+0x28>
 8012d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8012d80:	e7ea      	b.n	8012d58 <__swbuf_r+0x6c>
 8012d82:	bf00      	nop
 8012d84:	08013f3c 	.word	0x08013f3c
 8012d88:	08013f5c 	.word	0x08013f5c
 8012d8c:	08013f1c 	.word	0x08013f1c

08012d90 <__swsetup_r>:
 8012d90:	4b32      	ldr	r3, [pc, #200]	; (8012e5c <__swsetup_r+0xcc>)
 8012d92:	b570      	push	{r4, r5, r6, lr}
 8012d94:	681d      	ldr	r5, [r3, #0]
 8012d96:	4606      	mov	r6, r0
 8012d98:	460c      	mov	r4, r1
 8012d9a:	b125      	cbz	r5, 8012da6 <__swsetup_r+0x16>
 8012d9c:	69ab      	ldr	r3, [r5, #24]
 8012d9e:	b913      	cbnz	r3, 8012da6 <__swsetup_r+0x16>
 8012da0:	4628      	mov	r0, r5
 8012da2:	f000 f985 	bl	80130b0 <__sinit>
 8012da6:	4b2e      	ldr	r3, [pc, #184]	; (8012e60 <__swsetup_r+0xd0>)
 8012da8:	429c      	cmp	r4, r3
 8012daa:	d10f      	bne.n	8012dcc <__swsetup_r+0x3c>
 8012dac:	686c      	ldr	r4, [r5, #4]
 8012dae:	89a3      	ldrh	r3, [r4, #12]
 8012db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012db4:	0719      	lsls	r1, r3, #28
 8012db6:	d42c      	bmi.n	8012e12 <__swsetup_r+0x82>
 8012db8:	06dd      	lsls	r5, r3, #27
 8012dba:	d411      	bmi.n	8012de0 <__swsetup_r+0x50>
 8012dbc:	2309      	movs	r3, #9
 8012dbe:	6033      	str	r3, [r6, #0]
 8012dc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dca:	e03e      	b.n	8012e4a <__swsetup_r+0xba>
 8012dcc:	4b25      	ldr	r3, [pc, #148]	; (8012e64 <__swsetup_r+0xd4>)
 8012dce:	429c      	cmp	r4, r3
 8012dd0:	d101      	bne.n	8012dd6 <__swsetup_r+0x46>
 8012dd2:	68ac      	ldr	r4, [r5, #8]
 8012dd4:	e7eb      	b.n	8012dae <__swsetup_r+0x1e>
 8012dd6:	4b24      	ldr	r3, [pc, #144]	; (8012e68 <__swsetup_r+0xd8>)
 8012dd8:	429c      	cmp	r4, r3
 8012dda:	bf08      	it	eq
 8012ddc:	68ec      	ldreq	r4, [r5, #12]
 8012dde:	e7e6      	b.n	8012dae <__swsetup_r+0x1e>
 8012de0:	0758      	lsls	r0, r3, #29
 8012de2:	d512      	bpl.n	8012e0a <__swsetup_r+0x7a>
 8012de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012de6:	b141      	cbz	r1, 8012dfa <__swsetup_r+0x6a>
 8012de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dec:	4299      	cmp	r1, r3
 8012dee:	d002      	beq.n	8012df6 <__swsetup_r+0x66>
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7ff f8e1 	bl	8011fb8 <_free_r>
 8012df6:	2300      	movs	r3, #0
 8012df8:	6363      	str	r3, [r4, #52]	; 0x34
 8012dfa:	89a3      	ldrh	r3, [r4, #12]
 8012dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e00:	81a3      	strh	r3, [r4, #12]
 8012e02:	2300      	movs	r3, #0
 8012e04:	6063      	str	r3, [r4, #4]
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	6023      	str	r3, [r4, #0]
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	f043 0308 	orr.w	r3, r3, #8
 8012e10:	81a3      	strh	r3, [r4, #12]
 8012e12:	6923      	ldr	r3, [r4, #16]
 8012e14:	b94b      	cbnz	r3, 8012e2a <__swsetup_r+0x9a>
 8012e16:	89a3      	ldrh	r3, [r4, #12]
 8012e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e20:	d003      	beq.n	8012e2a <__swsetup_r+0x9a>
 8012e22:	4621      	mov	r1, r4
 8012e24:	4630      	mov	r0, r6
 8012e26:	f000 fa09 	bl	801323c <__smakebuf_r>
 8012e2a:	89a0      	ldrh	r0, [r4, #12]
 8012e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e30:	f010 0301 	ands.w	r3, r0, #1
 8012e34:	d00a      	beq.n	8012e4c <__swsetup_r+0xbc>
 8012e36:	2300      	movs	r3, #0
 8012e38:	60a3      	str	r3, [r4, #8]
 8012e3a:	6963      	ldr	r3, [r4, #20]
 8012e3c:	425b      	negs	r3, r3
 8012e3e:	61a3      	str	r3, [r4, #24]
 8012e40:	6923      	ldr	r3, [r4, #16]
 8012e42:	b943      	cbnz	r3, 8012e56 <__swsetup_r+0xc6>
 8012e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e48:	d1ba      	bne.n	8012dc0 <__swsetup_r+0x30>
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	0781      	lsls	r1, r0, #30
 8012e4e:	bf58      	it	pl
 8012e50:	6963      	ldrpl	r3, [r4, #20]
 8012e52:	60a3      	str	r3, [r4, #8]
 8012e54:	e7f4      	b.n	8012e40 <__swsetup_r+0xb0>
 8012e56:	2000      	movs	r0, #0
 8012e58:	e7f7      	b.n	8012e4a <__swsetup_r+0xba>
 8012e5a:	bf00      	nop
 8012e5c:	2000013c 	.word	0x2000013c
 8012e60:	08013f3c 	.word	0x08013f3c
 8012e64:	08013f5c 	.word	0x08013f5c
 8012e68:	08013f1c 	.word	0x08013f1c

08012e6c <abort>:
 8012e6c:	b508      	push	{r3, lr}
 8012e6e:	2006      	movs	r0, #6
 8012e70:	f000 faa4 	bl	80133bc <raise>
 8012e74:	2001      	movs	r0, #1
 8012e76:	f7ef fa3d 	bl	80022f4 <_exit>
	...

08012e7c <__sflush_r>:
 8012e7c:	898a      	ldrh	r2, [r1, #12]
 8012e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e82:	4605      	mov	r5, r0
 8012e84:	0710      	lsls	r0, r2, #28
 8012e86:	460c      	mov	r4, r1
 8012e88:	d458      	bmi.n	8012f3c <__sflush_r+0xc0>
 8012e8a:	684b      	ldr	r3, [r1, #4]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	dc05      	bgt.n	8012e9c <__sflush_r+0x20>
 8012e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dc02      	bgt.n	8012e9c <__sflush_r+0x20>
 8012e96:	2000      	movs	r0, #0
 8012e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e9e:	2e00      	cmp	r6, #0
 8012ea0:	d0f9      	beq.n	8012e96 <__sflush_r+0x1a>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ea8:	682f      	ldr	r7, [r5, #0]
 8012eaa:	602b      	str	r3, [r5, #0]
 8012eac:	d032      	beq.n	8012f14 <__sflush_r+0x98>
 8012eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012eb0:	89a3      	ldrh	r3, [r4, #12]
 8012eb2:	075a      	lsls	r2, r3, #29
 8012eb4:	d505      	bpl.n	8012ec2 <__sflush_r+0x46>
 8012eb6:	6863      	ldr	r3, [r4, #4]
 8012eb8:	1ac0      	subs	r0, r0, r3
 8012eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ebc:	b10b      	cbz	r3, 8012ec2 <__sflush_r+0x46>
 8012ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ec0:	1ac0      	subs	r0, r0, r3
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ec8:	6a21      	ldr	r1, [r4, #32]
 8012eca:	4628      	mov	r0, r5
 8012ecc:	47b0      	blx	r6
 8012ece:	1c43      	adds	r3, r0, #1
 8012ed0:	89a3      	ldrh	r3, [r4, #12]
 8012ed2:	d106      	bne.n	8012ee2 <__sflush_r+0x66>
 8012ed4:	6829      	ldr	r1, [r5, #0]
 8012ed6:	291d      	cmp	r1, #29
 8012ed8:	d82c      	bhi.n	8012f34 <__sflush_r+0xb8>
 8012eda:	4a2a      	ldr	r2, [pc, #168]	; (8012f84 <__sflush_r+0x108>)
 8012edc:	40ca      	lsrs	r2, r1
 8012ede:	07d6      	lsls	r6, r2, #31
 8012ee0:	d528      	bpl.n	8012f34 <__sflush_r+0xb8>
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	6062      	str	r2, [r4, #4]
 8012ee6:	04d9      	lsls	r1, r3, #19
 8012ee8:	6922      	ldr	r2, [r4, #16]
 8012eea:	6022      	str	r2, [r4, #0]
 8012eec:	d504      	bpl.n	8012ef8 <__sflush_r+0x7c>
 8012eee:	1c42      	adds	r2, r0, #1
 8012ef0:	d101      	bne.n	8012ef6 <__sflush_r+0x7a>
 8012ef2:	682b      	ldr	r3, [r5, #0]
 8012ef4:	b903      	cbnz	r3, 8012ef8 <__sflush_r+0x7c>
 8012ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8012ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012efa:	602f      	str	r7, [r5, #0]
 8012efc:	2900      	cmp	r1, #0
 8012efe:	d0ca      	beq.n	8012e96 <__sflush_r+0x1a>
 8012f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f04:	4299      	cmp	r1, r3
 8012f06:	d002      	beq.n	8012f0e <__sflush_r+0x92>
 8012f08:	4628      	mov	r0, r5
 8012f0a:	f7ff f855 	bl	8011fb8 <_free_r>
 8012f0e:	2000      	movs	r0, #0
 8012f10:	6360      	str	r0, [r4, #52]	; 0x34
 8012f12:	e7c1      	b.n	8012e98 <__sflush_r+0x1c>
 8012f14:	6a21      	ldr	r1, [r4, #32]
 8012f16:	2301      	movs	r3, #1
 8012f18:	4628      	mov	r0, r5
 8012f1a:	47b0      	blx	r6
 8012f1c:	1c41      	adds	r1, r0, #1
 8012f1e:	d1c7      	bne.n	8012eb0 <__sflush_r+0x34>
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d0c4      	beq.n	8012eb0 <__sflush_r+0x34>
 8012f26:	2b1d      	cmp	r3, #29
 8012f28:	d001      	beq.n	8012f2e <__sflush_r+0xb2>
 8012f2a:	2b16      	cmp	r3, #22
 8012f2c:	d101      	bne.n	8012f32 <__sflush_r+0xb6>
 8012f2e:	602f      	str	r7, [r5, #0]
 8012f30:	e7b1      	b.n	8012e96 <__sflush_r+0x1a>
 8012f32:	89a3      	ldrh	r3, [r4, #12]
 8012f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f38:	81a3      	strh	r3, [r4, #12]
 8012f3a:	e7ad      	b.n	8012e98 <__sflush_r+0x1c>
 8012f3c:	690f      	ldr	r7, [r1, #16]
 8012f3e:	2f00      	cmp	r7, #0
 8012f40:	d0a9      	beq.n	8012e96 <__sflush_r+0x1a>
 8012f42:	0793      	lsls	r3, r2, #30
 8012f44:	680e      	ldr	r6, [r1, #0]
 8012f46:	bf08      	it	eq
 8012f48:	694b      	ldreq	r3, [r1, #20]
 8012f4a:	600f      	str	r7, [r1, #0]
 8012f4c:	bf18      	it	ne
 8012f4e:	2300      	movne	r3, #0
 8012f50:	eba6 0807 	sub.w	r8, r6, r7
 8012f54:	608b      	str	r3, [r1, #8]
 8012f56:	f1b8 0f00 	cmp.w	r8, #0
 8012f5a:	dd9c      	ble.n	8012e96 <__sflush_r+0x1a>
 8012f5c:	6a21      	ldr	r1, [r4, #32]
 8012f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f60:	4643      	mov	r3, r8
 8012f62:	463a      	mov	r2, r7
 8012f64:	4628      	mov	r0, r5
 8012f66:	47b0      	blx	r6
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	dc06      	bgt.n	8012f7a <__sflush_r+0xfe>
 8012f6c:	89a3      	ldrh	r3, [r4, #12]
 8012f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	f04f 30ff 	mov.w	r0, #4294967295
 8012f78:	e78e      	b.n	8012e98 <__sflush_r+0x1c>
 8012f7a:	4407      	add	r7, r0
 8012f7c:	eba8 0800 	sub.w	r8, r8, r0
 8012f80:	e7e9      	b.n	8012f56 <__sflush_r+0xda>
 8012f82:	bf00      	nop
 8012f84:	20400001 	.word	0x20400001

08012f88 <_fflush_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	690b      	ldr	r3, [r1, #16]
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	460c      	mov	r4, r1
 8012f90:	b913      	cbnz	r3, 8012f98 <_fflush_r+0x10>
 8012f92:	2500      	movs	r5, #0
 8012f94:	4628      	mov	r0, r5
 8012f96:	bd38      	pop	{r3, r4, r5, pc}
 8012f98:	b118      	cbz	r0, 8012fa2 <_fflush_r+0x1a>
 8012f9a:	6983      	ldr	r3, [r0, #24]
 8012f9c:	b90b      	cbnz	r3, 8012fa2 <_fflush_r+0x1a>
 8012f9e:	f000 f887 	bl	80130b0 <__sinit>
 8012fa2:	4b14      	ldr	r3, [pc, #80]	; (8012ff4 <_fflush_r+0x6c>)
 8012fa4:	429c      	cmp	r4, r3
 8012fa6:	d11b      	bne.n	8012fe0 <_fflush_r+0x58>
 8012fa8:	686c      	ldr	r4, [r5, #4]
 8012faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0ef      	beq.n	8012f92 <_fflush_r+0xa>
 8012fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fb4:	07d0      	lsls	r0, r2, #31
 8012fb6:	d404      	bmi.n	8012fc2 <_fflush_r+0x3a>
 8012fb8:	0599      	lsls	r1, r3, #22
 8012fba:	d402      	bmi.n	8012fc2 <_fflush_r+0x3a>
 8012fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fbe:	f000 f915 	bl	80131ec <__retarget_lock_acquire_recursive>
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	4621      	mov	r1, r4
 8012fc6:	f7ff ff59 	bl	8012e7c <__sflush_r>
 8012fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fcc:	07da      	lsls	r2, r3, #31
 8012fce:	4605      	mov	r5, r0
 8012fd0:	d4e0      	bmi.n	8012f94 <_fflush_r+0xc>
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	059b      	lsls	r3, r3, #22
 8012fd6:	d4dd      	bmi.n	8012f94 <_fflush_r+0xc>
 8012fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fda:	f000 f908 	bl	80131ee <__retarget_lock_release_recursive>
 8012fde:	e7d9      	b.n	8012f94 <_fflush_r+0xc>
 8012fe0:	4b05      	ldr	r3, [pc, #20]	; (8012ff8 <_fflush_r+0x70>)
 8012fe2:	429c      	cmp	r4, r3
 8012fe4:	d101      	bne.n	8012fea <_fflush_r+0x62>
 8012fe6:	68ac      	ldr	r4, [r5, #8]
 8012fe8:	e7df      	b.n	8012faa <_fflush_r+0x22>
 8012fea:	4b04      	ldr	r3, [pc, #16]	; (8012ffc <_fflush_r+0x74>)
 8012fec:	429c      	cmp	r4, r3
 8012fee:	bf08      	it	eq
 8012ff0:	68ec      	ldreq	r4, [r5, #12]
 8012ff2:	e7da      	b.n	8012faa <_fflush_r+0x22>
 8012ff4:	08013f3c 	.word	0x08013f3c
 8012ff8:	08013f5c 	.word	0x08013f5c
 8012ffc:	08013f1c 	.word	0x08013f1c

08013000 <std>:
 8013000:	2300      	movs	r3, #0
 8013002:	b510      	push	{r4, lr}
 8013004:	4604      	mov	r4, r0
 8013006:	e9c0 3300 	strd	r3, r3, [r0]
 801300a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801300e:	6083      	str	r3, [r0, #8]
 8013010:	8181      	strh	r1, [r0, #12]
 8013012:	6643      	str	r3, [r0, #100]	; 0x64
 8013014:	81c2      	strh	r2, [r0, #14]
 8013016:	6183      	str	r3, [r0, #24]
 8013018:	4619      	mov	r1, r3
 801301a:	2208      	movs	r2, #8
 801301c:	305c      	adds	r0, #92	; 0x5c
 801301e:	f7fe ffad 	bl	8011f7c <memset>
 8013022:	4b05      	ldr	r3, [pc, #20]	; (8013038 <std+0x38>)
 8013024:	6263      	str	r3, [r4, #36]	; 0x24
 8013026:	4b05      	ldr	r3, [pc, #20]	; (801303c <std+0x3c>)
 8013028:	62a3      	str	r3, [r4, #40]	; 0x28
 801302a:	4b05      	ldr	r3, [pc, #20]	; (8013040 <std+0x40>)
 801302c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801302e:	4b05      	ldr	r3, [pc, #20]	; (8013044 <std+0x44>)
 8013030:	6224      	str	r4, [r4, #32]
 8013032:	6323      	str	r3, [r4, #48]	; 0x30
 8013034:	bd10      	pop	{r4, pc}
 8013036:	bf00      	nop
 8013038:	080133f5 	.word	0x080133f5
 801303c:	08013417 	.word	0x08013417
 8013040:	0801344f 	.word	0x0801344f
 8013044:	08013473 	.word	0x08013473

08013048 <_cleanup_r>:
 8013048:	4901      	ldr	r1, [pc, #4]	; (8013050 <_cleanup_r+0x8>)
 801304a:	f000 b8af 	b.w	80131ac <_fwalk_reent>
 801304e:	bf00      	nop
 8013050:	08012f89 	.word	0x08012f89

08013054 <__sfmoreglue>:
 8013054:	b570      	push	{r4, r5, r6, lr}
 8013056:	2268      	movs	r2, #104	; 0x68
 8013058:	1e4d      	subs	r5, r1, #1
 801305a:	4355      	muls	r5, r2
 801305c:	460e      	mov	r6, r1
 801305e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013062:	f7ff f815 	bl	8012090 <_malloc_r>
 8013066:	4604      	mov	r4, r0
 8013068:	b140      	cbz	r0, 801307c <__sfmoreglue+0x28>
 801306a:	2100      	movs	r1, #0
 801306c:	e9c0 1600 	strd	r1, r6, [r0]
 8013070:	300c      	adds	r0, #12
 8013072:	60a0      	str	r0, [r4, #8]
 8013074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013078:	f7fe ff80 	bl	8011f7c <memset>
 801307c:	4620      	mov	r0, r4
 801307e:	bd70      	pop	{r4, r5, r6, pc}

08013080 <__sfp_lock_acquire>:
 8013080:	4801      	ldr	r0, [pc, #4]	; (8013088 <__sfp_lock_acquire+0x8>)
 8013082:	f000 b8b3 	b.w	80131ec <__retarget_lock_acquire_recursive>
 8013086:	bf00      	nop
 8013088:	20001ae1 	.word	0x20001ae1

0801308c <__sfp_lock_release>:
 801308c:	4801      	ldr	r0, [pc, #4]	; (8013094 <__sfp_lock_release+0x8>)
 801308e:	f000 b8ae 	b.w	80131ee <__retarget_lock_release_recursive>
 8013092:	bf00      	nop
 8013094:	20001ae1 	.word	0x20001ae1

08013098 <__sinit_lock_acquire>:
 8013098:	4801      	ldr	r0, [pc, #4]	; (80130a0 <__sinit_lock_acquire+0x8>)
 801309a:	f000 b8a7 	b.w	80131ec <__retarget_lock_acquire_recursive>
 801309e:	bf00      	nop
 80130a0:	20001ae2 	.word	0x20001ae2

080130a4 <__sinit_lock_release>:
 80130a4:	4801      	ldr	r0, [pc, #4]	; (80130ac <__sinit_lock_release+0x8>)
 80130a6:	f000 b8a2 	b.w	80131ee <__retarget_lock_release_recursive>
 80130aa:	bf00      	nop
 80130ac:	20001ae2 	.word	0x20001ae2

080130b0 <__sinit>:
 80130b0:	b510      	push	{r4, lr}
 80130b2:	4604      	mov	r4, r0
 80130b4:	f7ff fff0 	bl	8013098 <__sinit_lock_acquire>
 80130b8:	69a3      	ldr	r3, [r4, #24]
 80130ba:	b11b      	cbz	r3, 80130c4 <__sinit+0x14>
 80130bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130c0:	f7ff bff0 	b.w	80130a4 <__sinit_lock_release>
 80130c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80130c8:	6523      	str	r3, [r4, #80]	; 0x50
 80130ca:	4b13      	ldr	r3, [pc, #76]	; (8013118 <__sinit+0x68>)
 80130cc:	4a13      	ldr	r2, [pc, #76]	; (801311c <__sinit+0x6c>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80130d2:	42a3      	cmp	r3, r4
 80130d4:	bf04      	itt	eq
 80130d6:	2301      	moveq	r3, #1
 80130d8:	61a3      	streq	r3, [r4, #24]
 80130da:	4620      	mov	r0, r4
 80130dc:	f000 f820 	bl	8013120 <__sfp>
 80130e0:	6060      	str	r0, [r4, #4]
 80130e2:	4620      	mov	r0, r4
 80130e4:	f000 f81c 	bl	8013120 <__sfp>
 80130e8:	60a0      	str	r0, [r4, #8]
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 f818 	bl	8013120 <__sfp>
 80130f0:	2200      	movs	r2, #0
 80130f2:	60e0      	str	r0, [r4, #12]
 80130f4:	2104      	movs	r1, #4
 80130f6:	6860      	ldr	r0, [r4, #4]
 80130f8:	f7ff ff82 	bl	8013000 <std>
 80130fc:	68a0      	ldr	r0, [r4, #8]
 80130fe:	2201      	movs	r2, #1
 8013100:	2109      	movs	r1, #9
 8013102:	f7ff ff7d 	bl	8013000 <std>
 8013106:	68e0      	ldr	r0, [r4, #12]
 8013108:	2202      	movs	r2, #2
 801310a:	2112      	movs	r1, #18
 801310c:	f7ff ff78 	bl	8013000 <std>
 8013110:	2301      	movs	r3, #1
 8013112:	61a3      	str	r3, [r4, #24]
 8013114:	e7d2      	b.n	80130bc <__sinit+0xc>
 8013116:	bf00      	nop
 8013118:	08013d34 	.word	0x08013d34
 801311c:	08013049 	.word	0x08013049

08013120 <__sfp>:
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	4607      	mov	r7, r0
 8013124:	f7ff ffac 	bl	8013080 <__sfp_lock_acquire>
 8013128:	4b1e      	ldr	r3, [pc, #120]	; (80131a4 <__sfp+0x84>)
 801312a:	681e      	ldr	r6, [r3, #0]
 801312c:	69b3      	ldr	r3, [r6, #24]
 801312e:	b913      	cbnz	r3, 8013136 <__sfp+0x16>
 8013130:	4630      	mov	r0, r6
 8013132:	f7ff ffbd 	bl	80130b0 <__sinit>
 8013136:	3648      	adds	r6, #72	; 0x48
 8013138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801313c:	3b01      	subs	r3, #1
 801313e:	d503      	bpl.n	8013148 <__sfp+0x28>
 8013140:	6833      	ldr	r3, [r6, #0]
 8013142:	b30b      	cbz	r3, 8013188 <__sfp+0x68>
 8013144:	6836      	ldr	r6, [r6, #0]
 8013146:	e7f7      	b.n	8013138 <__sfp+0x18>
 8013148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801314c:	b9d5      	cbnz	r5, 8013184 <__sfp+0x64>
 801314e:	4b16      	ldr	r3, [pc, #88]	; (80131a8 <__sfp+0x88>)
 8013150:	60e3      	str	r3, [r4, #12]
 8013152:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013156:	6665      	str	r5, [r4, #100]	; 0x64
 8013158:	f000 f847 	bl	80131ea <__retarget_lock_init_recursive>
 801315c:	f7ff ff96 	bl	801308c <__sfp_lock_release>
 8013160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013168:	6025      	str	r5, [r4, #0]
 801316a:	61a5      	str	r5, [r4, #24]
 801316c:	2208      	movs	r2, #8
 801316e:	4629      	mov	r1, r5
 8013170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013174:	f7fe ff02 	bl	8011f7c <memset>
 8013178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801317c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013180:	4620      	mov	r0, r4
 8013182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013184:	3468      	adds	r4, #104	; 0x68
 8013186:	e7d9      	b.n	801313c <__sfp+0x1c>
 8013188:	2104      	movs	r1, #4
 801318a:	4638      	mov	r0, r7
 801318c:	f7ff ff62 	bl	8013054 <__sfmoreglue>
 8013190:	4604      	mov	r4, r0
 8013192:	6030      	str	r0, [r6, #0]
 8013194:	2800      	cmp	r0, #0
 8013196:	d1d5      	bne.n	8013144 <__sfp+0x24>
 8013198:	f7ff ff78 	bl	801308c <__sfp_lock_release>
 801319c:	230c      	movs	r3, #12
 801319e:	603b      	str	r3, [r7, #0]
 80131a0:	e7ee      	b.n	8013180 <__sfp+0x60>
 80131a2:	bf00      	nop
 80131a4:	08013d34 	.word	0x08013d34
 80131a8:	ffff0001 	.word	0xffff0001

080131ac <_fwalk_reent>:
 80131ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b0:	4606      	mov	r6, r0
 80131b2:	4688      	mov	r8, r1
 80131b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131b8:	2700      	movs	r7, #0
 80131ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131be:	f1b9 0901 	subs.w	r9, r9, #1
 80131c2:	d505      	bpl.n	80131d0 <_fwalk_reent+0x24>
 80131c4:	6824      	ldr	r4, [r4, #0]
 80131c6:	2c00      	cmp	r4, #0
 80131c8:	d1f7      	bne.n	80131ba <_fwalk_reent+0xe>
 80131ca:	4638      	mov	r0, r7
 80131cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131d0:	89ab      	ldrh	r3, [r5, #12]
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d907      	bls.n	80131e6 <_fwalk_reent+0x3a>
 80131d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131da:	3301      	adds	r3, #1
 80131dc:	d003      	beq.n	80131e6 <_fwalk_reent+0x3a>
 80131de:	4629      	mov	r1, r5
 80131e0:	4630      	mov	r0, r6
 80131e2:	47c0      	blx	r8
 80131e4:	4307      	orrs	r7, r0
 80131e6:	3568      	adds	r5, #104	; 0x68
 80131e8:	e7e9      	b.n	80131be <_fwalk_reent+0x12>

080131ea <__retarget_lock_init_recursive>:
 80131ea:	4770      	bx	lr

080131ec <__retarget_lock_acquire_recursive>:
 80131ec:	4770      	bx	lr

080131ee <__retarget_lock_release_recursive>:
 80131ee:	4770      	bx	lr

080131f0 <__swhatbuf_r>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	460e      	mov	r6, r1
 80131f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f8:	2900      	cmp	r1, #0
 80131fa:	b096      	sub	sp, #88	; 0x58
 80131fc:	4614      	mov	r4, r2
 80131fe:	461d      	mov	r5, r3
 8013200:	da08      	bge.n	8013214 <__swhatbuf_r+0x24>
 8013202:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013206:	2200      	movs	r2, #0
 8013208:	602a      	str	r2, [r5, #0]
 801320a:	061a      	lsls	r2, r3, #24
 801320c:	d410      	bmi.n	8013230 <__swhatbuf_r+0x40>
 801320e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013212:	e00e      	b.n	8013232 <__swhatbuf_r+0x42>
 8013214:	466a      	mov	r2, sp
 8013216:	f000 f953 	bl	80134c0 <_fstat_r>
 801321a:	2800      	cmp	r0, #0
 801321c:	dbf1      	blt.n	8013202 <__swhatbuf_r+0x12>
 801321e:	9a01      	ldr	r2, [sp, #4]
 8013220:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013224:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013228:	425a      	negs	r2, r3
 801322a:	415a      	adcs	r2, r3
 801322c:	602a      	str	r2, [r5, #0]
 801322e:	e7ee      	b.n	801320e <__swhatbuf_r+0x1e>
 8013230:	2340      	movs	r3, #64	; 0x40
 8013232:	2000      	movs	r0, #0
 8013234:	6023      	str	r3, [r4, #0]
 8013236:	b016      	add	sp, #88	; 0x58
 8013238:	bd70      	pop	{r4, r5, r6, pc}
	...

0801323c <__smakebuf_r>:
 801323c:	898b      	ldrh	r3, [r1, #12]
 801323e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013240:	079d      	lsls	r5, r3, #30
 8013242:	4606      	mov	r6, r0
 8013244:	460c      	mov	r4, r1
 8013246:	d507      	bpl.n	8013258 <__smakebuf_r+0x1c>
 8013248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801324c:	6023      	str	r3, [r4, #0]
 801324e:	6123      	str	r3, [r4, #16]
 8013250:	2301      	movs	r3, #1
 8013252:	6163      	str	r3, [r4, #20]
 8013254:	b002      	add	sp, #8
 8013256:	bd70      	pop	{r4, r5, r6, pc}
 8013258:	ab01      	add	r3, sp, #4
 801325a:	466a      	mov	r2, sp
 801325c:	f7ff ffc8 	bl	80131f0 <__swhatbuf_r>
 8013260:	9900      	ldr	r1, [sp, #0]
 8013262:	4605      	mov	r5, r0
 8013264:	4630      	mov	r0, r6
 8013266:	f7fe ff13 	bl	8012090 <_malloc_r>
 801326a:	b948      	cbnz	r0, 8013280 <__smakebuf_r+0x44>
 801326c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013270:	059a      	lsls	r2, r3, #22
 8013272:	d4ef      	bmi.n	8013254 <__smakebuf_r+0x18>
 8013274:	f023 0303 	bic.w	r3, r3, #3
 8013278:	f043 0302 	orr.w	r3, r3, #2
 801327c:	81a3      	strh	r3, [r4, #12]
 801327e:	e7e3      	b.n	8013248 <__smakebuf_r+0xc>
 8013280:	4b0d      	ldr	r3, [pc, #52]	; (80132b8 <__smakebuf_r+0x7c>)
 8013282:	62b3      	str	r3, [r6, #40]	; 0x28
 8013284:	89a3      	ldrh	r3, [r4, #12]
 8013286:	6020      	str	r0, [r4, #0]
 8013288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801328c:	81a3      	strh	r3, [r4, #12]
 801328e:	9b00      	ldr	r3, [sp, #0]
 8013290:	6163      	str	r3, [r4, #20]
 8013292:	9b01      	ldr	r3, [sp, #4]
 8013294:	6120      	str	r0, [r4, #16]
 8013296:	b15b      	cbz	r3, 80132b0 <__smakebuf_r+0x74>
 8013298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801329c:	4630      	mov	r0, r6
 801329e:	f000 f921 	bl	80134e4 <_isatty_r>
 80132a2:	b128      	cbz	r0, 80132b0 <__smakebuf_r+0x74>
 80132a4:	89a3      	ldrh	r3, [r4, #12]
 80132a6:	f023 0303 	bic.w	r3, r3, #3
 80132aa:	f043 0301 	orr.w	r3, r3, #1
 80132ae:	81a3      	strh	r3, [r4, #12]
 80132b0:	89a0      	ldrh	r0, [r4, #12]
 80132b2:	4305      	orrs	r5, r0
 80132b4:	81a5      	strh	r5, [r4, #12]
 80132b6:	e7cd      	b.n	8013254 <__smakebuf_r+0x18>
 80132b8:	08013049 	.word	0x08013049

080132bc <memcpy>:
 80132bc:	440a      	add	r2, r1
 80132be:	4291      	cmp	r1, r2
 80132c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80132c4:	d100      	bne.n	80132c8 <memcpy+0xc>
 80132c6:	4770      	bx	lr
 80132c8:	b510      	push	{r4, lr}
 80132ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132d2:	4291      	cmp	r1, r2
 80132d4:	d1f9      	bne.n	80132ca <memcpy+0xe>
 80132d6:	bd10      	pop	{r4, pc}

080132d8 <memmove>:
 80132d8:	4288      	cmp	r0, r1
 80132da:	b510      	push	{r4, lr}
 80132dc:	eb01 0402 	add.w	r4, r1, r2
 80132e0:	d902      	bls.n	80132e8 <memmove+0x10>
 80132e2:	4284      	cmp	r4, r0
 80132e4:	4623      	mov	r3, r4
 80132e6:	d807      	bhi.n	80132f8 <memmove+0x20>
 80132e8:	1e43      	subs	r3, r0, #1
 80132ea:	42a1      	cmp	r1, r4
 80132ec:	d008      	beq.n	8013300 <memmove+0x28>
 80132ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132f6:	e7f8      	b.n	80132ea <memmove+0x12>
 80132f8:	4402      	add	r2, r0
 80132fa:	4601      	mov	r1, r0
 80132fc:	428a      	cmp	r2, r1
 80132fe:	d100      	bne.n	8013302 <memmove+0x2a>
 8013300:	bd10      	pop	{r4, pc}
 8013302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801330a:	e7f7      	b.n	80132fc <memmove+0x24>

0801330c <_realloc_r>:
 801330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013310:	4680      	mov	r8, r0
 8013312:	4614      	mov	r4, r2
 8013314:	460e      	mov	r6, r1
 8013316:	b921      	cbnz	r1, 8013322 <_realloc_r+0x16>
 8013318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801331c:	4611      	mov	r1, r2
 801331e:	f7fe beb7 	b.w	8012090 <_malloc_r>
 8013322:	b92a      	cbnz	r2, 8013330 <_realloc_r+0x24>
 8013324:	f7fe fe48 	bl	8011fb8 <_free_r>
 8013328:	4625      	mov	r5, r4
 801332a:	4628      	mov	r0, r5
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013330:	f000 f8fa 	bl	8013528 <_malloc_usable_size_r>
 8013334:	4284      	cmp	r4, r0
 8013336:	4607      	mov	r7, r0
 8013338:	d802      	bhi.n	8013340 <_realloc_r+0x34>
 801333a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801333e:	d812      	bhi.n	8013366 <_realloc_r+0x5a>
 8013340:	4621      	mov	r1, r4
 8013342:	4640      	mov	r0, r8
 8013344:	f7fe fea4 	bl	8012090 <_malloc_r>
 8013348:	4605      	mov	r5, r0
 801334a:	2800      	cmp	r0, #0
 801334c:	d0ed      	beq.n	801332a <_realloc_r+0x1e>
 801334e:	42bc      	cmp	r4, r7
 8013350:	4622      	mov	r2, r4
 8013352:	4631      	mov	r1, r6
 8013354:	bf28      	it	cs
 8013356:	463a      	movcs	r2, r7
 8013358:	f7ff ffb0 	bl	80132bc <memcpy>
 801335c:	4631      	mov	r1, r6
 801335e:	4640      	mov	r0, r8
 8013360:	f7fe fe2a 	bl	8011fb8 <_free_r>
 8013364:	e7e1      	b.n	801332a <_realloc_r+0x1e>
 8013366:	4635      	mov	r5, r6
 8013368:	e7df      	b.n	801332a <_realloc_r+0x1e>

0801336a <_raise_r>:
 801336a:	291f      	cmp	r1, #31
 801336c:	b538      	push	{r3, r4, r5, lr}
 801336e:	4604      	mov	r4, r0
 8013370:	460d      	mov	r5, r1
 8013372:	d904      	bls.n	801337e <_raise_r+0x14>
 8013374:	2316      	movs	r3, #22
 8013376:	6003      	str	r3, [r0, #0]
 8013378:	f04f 30ff 	mov.w	r0, #4294967295
 801337c:	bd38      	pop	{r3, r4, r5, pc}
 801337e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013380:	b112      	cbz	r2, 8013388 <_raise_r+0x1e>
 8013382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013386:	b94b      	cbnz	r3, 801339c <_raise_r+0x32>
 8013388:	4620      	mov	r0, r4
 801338a:	f000 f831 	bl	80133f0 <_getpid_r>
 801338e:	462a      	mov	r2, r5
 8013390:	4601      	mov	r1, r0
 8013392:	4620      	mov	r0, r4
 8013394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013398:	f000 b818 	b.w	80133cc <_kill_r>
 801339c:	2b01      	cmp	r3, #1
 801339e:	d00a      	beq.n	80133b6 <_raise_r+0x4c>
 80133a0:	1c59      	adds	r1, r3, #1
 80133a2:	d103      	bne.n	80133ac <_raise_r+0x42>
 80133a4:	2316      	movs	r3, #22
 80133a6:	6003      	str	r3, [r0, #0]
 80133a8:	2001      	movs	r0, #1
 80133aa:	e7e7      	b.n	801337c <_raise_r+0x12>
 80133ac:	2400      	movs	r4, #0
 80133ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133b2:	4628      	mov	r0, r5
 80133b4:	4798      	blx	r3
 80133b6:	2000      	movs	r0, #0
 80133b8:	e7e0      	b.n	801337c <_raise_r+0x12>
	...

080133bc <raise>:
 80133bc:	4b02      	ldr	r3, [pc, #8]	; (80133c8 <raise+0xc>)
 80133be:	4601      	mov	r1, r0
 80133c0:	6818      	ldr	r0, [r3, #0]
 80133c2:	f7ff bfd2 	b.w	801336a <_raise_r>
 80133c6:	bf00      	nop
 80133c8:	2000013c 	.word	0x2000013c

080133cc <_kill_r>:
 80133cc:	b538      	push	{r3, r4, r5, lr}
 80133ce:	4d07      	ldr	r5, [pc, #28]	; (80133ec <_kill_r+0x20>)
 80133d0:	2300      	movs	r3, #0
 80133d2:	4604      	mov	r4, r0
 80133d4:	4608      	mov	r0, r1
 80133d6:	4611      	mov	r1, r2
 80133d8:	602b      	str	r3, [r5, #0]
 80133da:	f7ee ff7b 	bl	80022d4 <_kill>
 80133de:	1c43      	adds	r3, r0, #1
 80133e0:	d102      	bne.n	80133e8 <_kill_r+0x1c>
 80133e2:	682b      	ldr	r3, [r5, #0]
 80133e4:	b103      	cbz	r3, 80133e8 <_kill_r+0x1c>
 80133e6:	6023      	str	r3, [r4, #0]
 80133e8:	bd38      	pop	{r3, r4, r5, pc}
 80133ea:	bf00      	nop
 80133ec:	20001adc 	.word	0x20001adc

080133f0 <_getpid_r>:
 80133f0:	f7ee bf68 	b.w	80022c4 <_getpid>

080133f4 <__sread>:
 80133f4:	b510      	push	{r4, lr}
 80133f6:	460c      	mov	r4, r1
 80133f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133fc:	f000 f89c 	bl	8013538 <_read_r>
 8013400:	2800      	cmp	r0, #0
 8013402:	bfab      	itete	ge
 8013404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013406:	89a3      	ldrhlt	r3, [r4, #12]
 8013408:	181b      	addge	r3, r3, r0
 801340a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801340e:	bfac      	ite	ge
 8013410:	6563      	strge	r3, [r4, #84]	; 0x54
 8013412:	81a3      	strhlt	r3, [r4, #12]
 8013414:	bd10      	pop	{r4, pc}

08013416 <__swrite>:
 8013416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801341a:	461f      	mov	r7, r3
 801341c:	898b      	ldrh	r3, [r1, #12]
 801341e:	05db      	lsls	r3, r3, #23
 8013420:	4605      	mov	r5, r0
 8013422:	460c      	mov	r4, r1
 8013424:	4616      	mov	r6, r2
 8013426:	d505      	bpl.n	8013434 <__swrite+0x1e>
 8013428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801342c:	2302      	movs	r3, #2
 801342e:	2200      	movs	r2, #0
 8013430:	f000 f868 	bl	8013504 <_lseek_r>
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801343a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801343e:	81a3      	strh	r3, [r4, #12]
 8013440:	4632      	mov	r2, r6
 8013442:	463b      	mov	r3, r7
 8013444:	4628      	mov	r0, r5
 8013446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801344a:	f000 b817 	b.w	801347c <_write_r>

0801344e <__sseek>:
 801344e:	b510      	push	{r4, lr}
 8013450:	460c      	mov	r4, r1
 8013452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013456:	f000 f855 	bl	8013504 <_lseek_r>
 801345a:	1c43      	adds	r3, r0, #1
 801345c:	89a3      	ldrh	r3, [r4, #12]
 801345e:	bf15      	itete	ne
 8013460:	6560      	strne	r0, [r4, #84]	; 0x54
 8013462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801346a:	81a3      	strheq	r3, [r4, #12]
 801346c:	bf18      	it	ne
 801346e:	81a3      	strhne	r3, [r4, #12]
 8013470:	bd10      	pop	{r4, pc}

08013472 <__sclose>:
 8013472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013476:	f000 b813 	b.w	80134a0 <_close_r>
	...

0801347c <_write_r>:
 801347c:	b538      	push	{r3, r4, r5, lr}
 801347e:	4d07      	ldr	r5, [pc, #28]	; (801349c <_write_r+0x20>)
 8013480:	4604      	mov	r4, r0
 8013482:	4608      	mov	r0, r1
 8013484:	4611      	mov	r1, r2
 8013486:	2200      	movs	r2, #0
 8013488:	602a      	str	r2, [r5, #0]
 801348a:	461a      	mov	r2, r3
 801348c:	f7ee ff59 	bl	8002342 <_write>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_write_r+0x1e>
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	b103      	cbz	r3, 801349a <_write_r+0x1e>
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	20001adc 	.word	0x20001adc

080134a0 <_close_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4d06      	ldr	r5, [pc, #24]	; (80134bc <_close_r+0x1c>)
 80134a4:	2300      	movs	r3, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	4608      	mov	r0, r1
 80134aa:	602b      	str	r3, [r5, #0]
 80134ac:	f7ee ff65 	bl	800237a <_close>
 80134b0:	1c43      	adds	r3, r0, #1
 80134b2:	d102      	bne.n	80134ba <_close_r+0x1a>
 80134b4:	682b      	ldr	r3, [r5, #0]
 80134b6:	b103      	cbz	r3, 80134ba <_close_r+0x1a>
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	bd38      	pop	{r3, r4, r5, pc}
 80134bc:	20001adc 	.word	0x20001adc

080134c0 <_fstat_r>:
 80134c0:	b538      	push	{r3, r4, r5, lr}
 80134c2:	4d07      	ldr	r5, [pc, #28]	; (80134e0 <_fstat_r+0x20>)
 80134c4:	2300      	movs	r3, #0
 80134c6:	4604      	mov	r4, r0
 80134c8:	4608      	mov	r0, r1
 80134ca:	4611      	mov	r1, r2
 80134cc:	602b      	str	r3, [r5, #0]
 80134ce:	f7ee ff60 	bl	8002392 <_fstat>
 80134d2:	1c43      	adds	r3, r0, #1
 80134d4:	d102      	bne.n	80134dc <_fstat_r+0x1c>
 80134d6:	682b      	ldr	r3, [r5, #0]
 80134d8:	b103      	cbz	r3, 80134dc <_fstat_r+0x1c>
 80134da:	6023      	str	r3, [r4, #0]
 80134dc:	bd38      	pop	{r3, r4, r5, pc}
 80134de:	bf00      	nop
 80134e0:	20001adc 	.word	0x20001adc

080134e4 <_isatty_r>:
 80134e4:	b538      	push	{r3, r4, r5, lr}
 80134e6:	4d06      	ldr	r5, [pc, #24]	; (8013500 <_isatty_r+0x1c>)
 80134e8:	2300      	movs	r3, #0
 80134ea:	4604      	mov	r4, r0
 80134ec:	4608      	mov	r0, r1
 80134ee:	602b      	str	r3, [r5, #0]
 80134f0:	f7ee ff5f 	bl	80023b2 <_isatty>
 80134f4:	1c43      	adds	r3, r0, #1
 80134f6:	d102      	bne.n	80134fe <_isatty_r+0x1a>
 80134f8:	682b      	ldr	r3, [r5, #0]
 80134fa:	b103      	cbz	r3, 80134fe <_isatty_r+0x1a>
 80134fc:	6023      	str	r3, [r4, #0]
 80134fe:	bd38      	pop	{r3, r4, r5, pc}
 8013500:	20001adc 	.word	0x20001adc

08013504 <_lseek_r>:
 8013504:	b538      	push	{r3, r4, r5, lr}
 8013506:	4d07      	ldr	r5, [pc, #28]	; (8013524 <_lseek_r+0x20>)
 8013508:	4604      	mov	r4, r0
 801350a:	4608      	mov	r0, r1
 801350c:	4611      	mov	r1, r2
 801350e:	2200      	movs	r2, #0
 8013510:	602a      	str	r2, [r5, #0]
 8013512:	461a      	mov	r2, r3
 8013514:	f7ee ff58 	bl	80023c8 <_lseek>
 8013518:	1c43      	adds	r3, r0, #1
 801351a:	d102      	bne.n	8013522 <_lseek_r+0x1e>
 801351c:	682b      	ldr	r3, [r5, #0]
 801351e:	b103      	cbz	r3, 8013522 <_lseek_r+0x1e>
 8013520:	6023      	str	r3, [r4, #0]
 8013522:	bd38      	pop	{r3, r4, r5, pc}
 8013524:	20001adc 	.word	0x20001adc

08013528 <_malloc_usable_size_r>:
 8013528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801352c:	1f18      	subs	r0, r3, #4
 801352e:	2b00      	cmp	r3, #0
 8013530:	bfbc      	itt	lt
 8013532:	580b      	ldrlt	r3, [r1, r0]
 8013534:	18c0      	addlt	r0, r0, r3
 8013536:	4770      	bx	lr

08013538 <_read_r>:
 8013538:	b538      	push	{r3, r4, r5, lr}
 801353a:	4d07      	ldr	r5, [pc, #28]	; (8013558 <_read_r+0x20>)
 801353c:	4604      	mov	r4, r0
 801353e:	4608      	mov	r0, r1
 8013540:	4611      	mov	r1, r2
 8013542:	2200      	movs	r2, #0
 8013544:	602a      	str	r2, [r5, #0]
 8013546:	461a      	mov	r2, r3
 8013548:	f7ee fede 	bl	8002308 <_read>
 801354c:	1c43      	adds	r3, r0, #1
 801354e:	d102      	bne.n	8013556 <_read_r+0x1e>
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	b103      	cbz	r3, 8013556 <_read_r+0x1e>
 8013554:	6023      	str	r3, [r4, #0]
 8013556:	bd38      	pop	{r3, r4, r5, pc}
 8013558:	20001adc 	.word	0x20001adc

0801355c <_init>:
 801355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801355e:	bf00      	nop
 8013560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013562:	bc08      	pop	{r3}
 8013564:	469e      	mov	lr, r3
 8013566:	4770      	bx	lr

08013568 <_fini>:
 8013568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801356a:	bf00      	nop
 801356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801356e:	bc08      	pop	{r3}
 8013570:	469e      	mov	lr, r3
 8013572:	4770      	bx	lr
