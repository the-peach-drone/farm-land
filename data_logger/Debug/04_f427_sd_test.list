
04_f427_sd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007790  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec0  08007ec0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000620  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000690  20000690  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001027e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0003031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  000335b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e40  00000000  00000000  00034220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ab4  00000000  00000000  00059060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d66c2  00000000  00000000  0006ab14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001411d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a5c  00000000  00000000  00141228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007928 	.word	0x08007928

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007928 	.word	0x08007928

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe19 	bl	8000204 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <Send_Uart+0x28>)
 80005de:	f002 fe2f 	bl	8003240 <HAL_UART_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000590 	.word	0x20000590

080005f0 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <Mount_SD+0x38>)
 80005fe:	f005 feab 	bl	8006358 <f_mount>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <Mount_SD+0x3c>)
 8000608:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <Mount_SD+0x3c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <Mount_SD+0x2a>
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <Mount_SD+0x40>)
 8000614:	f7ff ffd6 	bl	80005c4 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000618:	e002      	b.n	8000620 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <Mount_SD+0x44>)
 800061c:	f7ff ffd2 	bl	80005c4 <Send_Uart>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	20000504 	.word	0x20000504
 8000630:	08007940 	.word	0x08007940
 8000634:	08007964 	.word	0x08007964

08000638 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2000      	movs	r0, #0
 8000646:	f005 fe87 	bl	8006358 <f_mount>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <Unmount_SD+0x38>)
 8000650:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <Unmount_SD+0x38>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <Unmount_SD+0x2a>
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <Unmount_SD+0x3c>)
 800065c:	f7ff ffb2 	bl	80005c4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000660:	e002      	b.n	8000668 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <Unmount_SD+0x40>)
 8000664:	f7ff ffae 	bl	80005c4 <Send_Uart>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000504 	.word	0x20000504
 8000674:	08007988 	.word	0x08007988
 8000678:	080079b0 	.word	0x080079b0

0800067c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000682:	2014      	movs	r0, #20
 8000684:	f006 fcca 	bl	800701c <malloc>
 8000688:	4603      	mov	r3, r0
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 800068c:	4a28      	ldr	r2, [pc, #160]	; (8000730 <Format_SD+0xb4>)
 800068e:	4929      	ldr	r1, [pc, #164]	; (8000734 <Format_SD+0xb8>)
 8000690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000692:	f006 fdcb 	bl	800722c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800069a:	4618      	mov	r0, r3
 800069c:	f006 fa7d 	bl	8006b9a <f_opendir>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <Format_SD+0xbc>)
 80006a6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <Format_SD+0xbc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d136      	bne.n	800071e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4922      	ldr	r1, [pc, #136]	; (800073c <Format_SD+0xc0>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fb09 	bl	8006ccc <f_readdir>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <Format_SD+0xbc>)
 80006c0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <Format_SD+0xbc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d125      	bne.n	8000716 <Format_SD+0x9a>
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <Format_SD+0xc0>)
 80006cc:	7a5b      	ldrb	r3, [r3, #9]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d021      	beq.n	8000716 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <Format_SD+0xc0>)
 80006d4:	7a1b      	ldrb	r3, [r3, #8]
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d011      	beq.n	8000702 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006de:	4918      	ldr	r1, [pc, #96]	; (8000740 <Format_SD+0xc4>)
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <Format_SD+0xc8>)
 80006e2:	f7ff fd85 	bl	80001f0 <strcmp>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d012      	beq.n	8000712 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <Format_SD+0xc4>)
 80006ee:	f006 fb63 	bl	8006db8 <f_unlink>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <Format_SD+0xbc>)
 80006f8:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <Format_SD+0xbc>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	e7d6      	b.n	80006b0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000702:	480f      	ldr	r0, [pc, #60]	; (8000740 <Format_SD+0xc4>)
 8000704:	f006 fb58 	bl	8006db8 <f_unlink>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <Format_SD+0xbc>)
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e7ce      	b.n	80006b0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000712:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000714:	e7cc      	b.n	80006b0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f006 fab1 	bl	8006c80 <f_closedir>
    }
    free(path);
 800071e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000720:	f006 fc84 	bl	800702c <free>
    return fresult;
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <Format_SD+0xbc>)
 8000726:	781b      	ldrb	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08007a04 	.word	0x08007a04
 8000734:	080079d4 	.word	0x080079d4
 8000738:	20000504 	.word	0x20000504
 800073c:	200004ec 	.word	0x200004ec
 8000740:	200004f5 	.word	0x200004f5
 8000744:	080079d8 	.word	0x080079d8

08000748 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000750:	4943      	ldr	r1, [pc, #268]	; (8000860 <Create_File+0x118>)
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f006 faf7 	bl	8006d46 <f_stat>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <Create_File+0x11c>)
 800075e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <Create_File+0x11c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d112      	bne.n	800078e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f006 fc57 	bl	800701c <malloc>
 800076e:	4603      	mov	r3, r0
 8000770:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	493c      	ldr	r1, [pc, #240]	; (8000868 <Create_File+0x120>)
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f006 fd58 	bl	800722c <siprintf>
		Send_Uart(buf);
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f7ff ff21 	bl	80005c4 <Send_Uart>
		free(buf);
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f006 fc52 	bl	800702c <free>
	    return fresult;
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <Create_File+0x11c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	e063      	b.n	8000856 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800078e:	220b      	movs	r2, #11
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	4836      	ldr	r0, [pc, #216]	; (800086c <Create_File+0x124>)
 8000794:	f005 fe26 	bl	80063e4 <f_open>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <Create_File+0x11c>)
 800079e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <Create_File+0x11c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d015      	beq.n	80007d4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f006 fc37 	bl	800701c <malloc>
 80007ae:	4603      	mov	r3, r0
 80007b0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <Create_File+0x11c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	492d      	ldr	r1, [pc, #180]	; (8000870 <Create_File+0x128>)
 80007bc:	6938      	ldr	r0, [r7, #16]
 80007be:	f006 fd35 	bl	800722c <siprintf>
			Send_Uart(buf);
 80007c2:	6938      	ldr	r0, [r7, #16]
 80007c4:	f7ff fefe 	bl	80005c4 <Send_Uart>
			free(buf);
 80007c8:	6938      	ldr	r0, [r7, #16]
 80007ca:	f006 fc2f 	bl	800702c <free>
		    return fresult;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <Create_File+0x11c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	e040      	b.n	8000856 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f006 fc21 	bl	800701c <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4924      	ldr	r1, [pc, #144]	; (8000874 <Create_File+0x12c>)
 80007e2:	69f8      	ldr	r0, [r7, #28]
 80007e4:	f006 fd22 	bl	800722c <siprintf>
			Send_Uart(buf);
 80007e8:	69f8      	ldr	r0, [r7, #28]
 80007ea:	f7ff feeb 	bl	80005c4 <Send_Uart>
			free(buf);
 80007ee:	69f8      	ldr	r0, [r7, #28]
 80007f0:	f006 fc1c 	bl	800702c <free>
		}

		fresult = f_close(&fil);
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <Create_File+0x124>)
 80007f6:	f006 f9a6 	bl	8006b46 <f_close>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <Create_File+0x11c>)
 8000800:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <Create_File+0x11c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d013      	beq.n	8000832 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f006 fc06 	bl	800701c <malloc>
 8000810:	4603      	mov	r3, r0
 8000812:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <Create_File+0x11c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4916      	ldr	r1, [pc, #88]	; (8000878 <Create_File+0x130>)
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f006 fd04 	bl	800722c <siprintf>
			Send_Uart(buf);
 8000824:	6978      	ldr	r0, [r7, #20]
 8000826:	f7ff fecd 	bl	80005c4 <Send_Uart>
			free(buf);
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f006 fbfe 	bl	800702c <free>
 8000830:	e00f      	b.n	8000852 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f006 fbf2 	bl	800701c <malloc>
 8000838:	4603      	mov	r3, r0
 800083a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	490f      	ldr	r1, [pc, #60]	; (800087c <Create_File+0x134>)
 8000840:	69b8      	ldr	r0, [r7, #24]
 8000842:	f006 fcf3 	bl	800722c <siprintf>
			Send_Uart(buf);
 8000846:	69b8      	ldr	r0, [r7, #24]
 8000848:	f7ff febc 	bl	80005c4 <Send_Uart>
			free(buf);
 800084c:	69b8      	ldr	r0, [r7, #24]
 800084e:	f006 fbed 	bl	800702c <free>
		}
	}
    return fresult;
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <Create_File+0x11c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200004ec 	.word	0x200004ec
 8000864:	20000504 	.word	0x20000504
 8000868:	08007b80 	.word	0x08007b80
 800086c:	200002bc 	.word	0x200002bc
 8000870:	08007bb8 	.word	0x08007bb8
 8000874:	08007be0 	.word	0x08007be0
 8000878:	08007c20 	.word	0x08007c20
 800087c:	08007b60 	.word	0x08007b60

08000880 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800088a:	4956      	ldr	r1, [pc, #344]	; (80009e4 <Update_File+0x164>)
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f006 fa5a 	bl	8006d46 <f_stat>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <Update_File+0x168>)
 8000898:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800089a:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <Update_File+0x168>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d012      	beq.n	80008c8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f006 fbba 	bl	800701c <malloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	494f      	ldr	r1, [pc, #316]	; (80009ec <Update_File+0x16c>)
 80008b0:	68b8      	ldr	r0, [r7, #8]
 80008b2:	f006 fcbb 	bl	800722c <siprintf>
		Send_Uart (buf);
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f7ff fe84 	bl	80005c4 <Send_Uart>
		free(buf);
 80008bc:	68b8      	ldr	r0, [r7, #8]
 80008be:	f006 fbb5 	bl	800702c <free>
	    return fresult;
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <Update_File+0x168>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	e088      	b.n	80009da <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80008c8:	2232      	movs	r2, #50	; 0x32
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	4848      	ldr	r0, [pc, #288]	; (80009f0 <Update_File+0x170>)
 80008ce:	f005 fd89 	bl	80063e4 <f_open>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <Update_File+0x168>)
 80008d8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008da:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <Update_File+0x168>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d015      	beq.n	800090e <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f006 fb9a 	bl	800701c <malloc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80008ec:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <Update_File+0x168>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	493f      	ldr	r1, [pc, #252]	; (80009f4 <Update_File+0x174>)
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f006 fc98 	bl	800722c <siprintf>
	    	Send_Uart(buf);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fe61 	bl	80005c4 <Send_Uart>
	        free(buf);
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f006 fb92 	bl	800702c <free>
	        return fresult;
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <Update_File+0x168>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	e065      	b.n	80009da <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f7ff fc78 	bl	8000204 <strlen>
 8000914:	4602      	mov	r2, r0
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <Update_File+0x178>)
 8000918:	6839      	ldr	r1, [r7, #0]
 800091a:	4835      	ldr	r0, [pc, #212]	; (80009f0 <Update_File+0x170>)
 800091c:	f005 ff20 	bl	8006760 <f_write>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <Update_File+0x168>)
 8000926:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <Update_File+0x168>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d013      	beq.n	8000958 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f006 fb73 	bl	800701c <malloc>
 8000936:	4603      	mov	r3, r0
 8000938:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <Update_File+0x168>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	492e      	ldr	r1, [pc, #184]	; (80009fc <Update_File+0x17c>)
 8000944:	69b8      	ldr	r0, [r7, #24]
 8000946:	f006 fc71 	bl	800722c <siprintf>
	    	Send_Uart(buf);
 800094a:	69b8      	ldr	r0, [r7, #24]
 800094c:	f7ff fe3a 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000950:	69b8      	ldr	r0, [r7, #24]
 8000952:	f006 fb6b 	bl	800702c <free>
 8000956:	e00f      	b.n	8000978 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f006 fb5f 	bl	800701c <malloc>
 800095e:	4603      	mov	r3, r0
 8000960:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4926      	ldr	r1, [pc, #152]	; (8000a00 <Update_File+0x180>)
 8000966:	69f8      	ldr	r0, [r7, #28]
 8000968:	f006 fc60 	bl	800722c <siprintf>
	    	Send_Uart(buf);
 800096c:	69f8      	ldr	r0, [r7, #28]
 800096e:	f7ff fe29 	bl	80005c4 <Send_Uart>
	    	free(buf);
 8000972:	69f8      	ldr	r0, [r7, #28]
 8000974:	f006 fb5a 	bl	800702c <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <Update_File+0x170>)
 800097a:	f006 f8e4 	bl	8006b46 <f_close>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <Update_File+0x168>)
 8000984:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <Update_File+0x168>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f006 fb44 	bl	800701c <malloc>
 8000994:	4603      	mov	r3, r0
 8000996:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <Update_File+0x168>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4918      	ldr	r1, [pc, #96]	; (8000a04 <Update_File+0x184>)
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	f006 fc42 	bl	800722c <siprintf>
	    	Send_Uart(buf);
 80009a8:	6938      	ldr	r0, [r7, #16]
 80009aa:	f7ff fe0b 	bl	80005c4 <Send_Uart>
	    	free(buf);
 80009ae:	6938      	ldr	r0, [r7, #16]
 80009b0:	f006 fb3c 	bl	800702c <free>
 80009b4:	e00f      	b.n	80009d6 <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f006 fb30 	bl	800701c <malloc>
 80009bc:	4603      	mov	r3, r0
 80009be:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4911      	ldr	r1, [pc, #68]	; (8000a08 <Update_File+0x188>)
 80009c4:	6978      	ldr	r0, [r7, #20]
 80009c6:	f006 fc31 	bl	800722c <siprintf>
	    	Send_Uart(buf);
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff fdfa 	bl	80005c4 <Send_Uart>
	    	free(buf);
 80009d0:	6978      	ldr	r0, [r7, #20]
 80009d2:	f006 fb2b 	bl	800702c <free>
	     }
	}
    return fresult;
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <Update_File+0x168>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200004ec 	.word	0x200004ec
 80009e8:	20000504 	.word	0x20000504
 80009ec:	08007a08 	.word	0x08007a08
 80009f0:	200002bc 	.word	0x200002bc
 80009f4:	08007a28 	.word	0x08007a28
 80009f8:	20000508 	.word	0x20000508
 80009fc:	08007c44 	.word	0x08007c44
 8000a00:	08007c6c 	.word	0x08007c6c
 8000a04:	08007b38 	.word	0x08007b38
 8000a08:	08007b60 	.word	0x08007b60

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fabe 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f84a 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f8fc 	bl	8000c14 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000a1c:	f000 f8b0 	bl	8000b80 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000a20:	f003 fcf6 	bl	8004410 <MX_FATFS_Init>
  MX_UART8_Init();
 8000a24:	f000 f8cc 	bl	8000bc0 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD("/");
 8000a28:	4819      	ldr	r0, [pc, #100]	; (8000a90 <main+0x84>)
 8000a2a:	f7ff fde1 	bl	80005f0 <Mount_SD>
  Format_SD();
 8000a2e:	f7ff fe25 	bl	800067c <Format_SD>
  Create_File("FILE1.TXT");
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <main+0x88>)
 8000a34:	f7ff fe88 	bl	8000748 <Create_File>
  Create_File("FILE2.TXT");
 8000a38:	4817      	ldr	r0, [pc, #92]	; (8000a98 <main+0x8c>)
 8000a3a:	f7ff fe85 	bl	8000748 <Create_File>
  Unmount_SD("/");
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <main+0x84>)
 8000a40:	f7ff fdfa 	bl	8000638 <Unmount_SD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Mount_SD("/");
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <main+0x84>)
 8000a46:	f7ff fdd3 	bl	80005f0 <Mount_SD>
		sprintf(buffer, "Hello ---> %d\n", indx);
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <main+0x90>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <main+0x94>)
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <main+0x98>)
 8000a54:	f006 fbea 	bl	800722c <siprintf>
		Update_File("FILE1.TXT", buffer);
 8000a58:	4912      	ldr	r1, [pc, #72]	; (8000aa4 <main+0x98>)
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <main+0x88>)
 8000a5c:	f7ff ff10 	bl	8000880 <Update_File>
		sprintf(buffer, "world ---> %d\n", indx);
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <main+0x90>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <main+0x9c>)
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <main+0x98>)
 8000a6a:	f006 fbdf 	bl	800722c <siprintf>
		Update_File("FILE2.TXT", buffer);
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <main+0x98>)
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <main+0x8c>)
 8000a72:	f7ff ff05 	bl	8000880 <Update_File>
		Unmount_SD("/");
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <main+0x84>)
 8000a78:	f7ff fdde 	bl	8000638 <Unmount_SD>

		indx++;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <main+0x90>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <main+0x90>)
 8000a84:	6013      	str	r3, [r2, #0]

		HAL_Delay(2000);
 8000a86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8a:	f000 faf3 	bl	8001074 <HAL_Delay>
		Mount_SD("/");
 8000a8e:	e7d9      	b.n	8000a44 <main+0x38>
 8000a90:	08007d58 	.word	0x08007d58
 8000a94:	08007d5c 	.word	0x08007d5c
 8000a98:	08007d68 	.word	0x08007d68
 8000a9c:	20000638 	.word	0x20000638
 8000aa0:	08007d74 	.word	0x08007d74
 8000aa4:	200005d4 	.word	0x200005d4
 8000aa8:	08007d84 	.word	0x08007d84

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fabe 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <SystemClock_Config+0xd0>)
 8000af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b20:	23a8      	movs	r3, #168	; 0xa8
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fd55 	bl	80015e0 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f8ae 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 ffb6 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b6a:	f000 f897 	bl	8000c9c <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000b86:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <MX_SDIO_SD_Init+0x3c>)
 8000b88:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <MX_SDIO_SD_Init+0x38>)
 8000baa:	220a      	movs	r2, #10
 8000bac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	2000050c 	.word	0x2000050c
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_UART8_Init+0x50>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_UART8_Init+0x4c>)
 8000bf8:	f002 fad5 	bl	80031a6 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000c02:	f000 f84b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000590 	.word	0x20000590
 8000c10:	40007c00 	.word	0x40007c00

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <HAL_SD_MspInit+0xc0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d14a      	bne.n	8000db0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_SD_MspInit+0xc4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d6e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d80:	230c      	movs	r3, #12
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_SD_MspInit+0xc8>)
 8000d8c:	f000 fa7c 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d90:	2304      	movs	r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000da0:	230c      	movs	r3, #12
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_SD_MspInit+0xcc>)
 8000dac:	f000 fa6c 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e22:	2303      	movs	r3, #3
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000e32:	2308      	movs	r3, #8
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000e3e:	f000 fa23 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40007c00 	.word	0x40007c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8c6 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f006 f874 	bl	8006fc8 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20030000 	.word	0x20030000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	2000063c 	.word	0x2000063c
 8000f14:	20000690 	.word	0x20000690

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f006 f833 	bl	8006fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fd4d 	bl	8000a0c <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f80:	08007ec8 	.word	0x08007ec8
  ldr r2, =_sbss
 8000f84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f88:	20000690 	.word	0x20000690

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f931 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fe70 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f93b 	bl	800126e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f911 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20000640 	.word	0x20000640

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000640 	.word	0x20000640

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5c 	bl	8001104 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e177      	b.n	8001594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8166 	bne.w	800158e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80c0 	beq.w	800158e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b66      	ldr	r3, [pc, #408]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a65      	ldr	r2, [pc, #404]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <HAL_GPIO_Init+0x328>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d037      	beq.n	80014c6 <HAL_GPIO_Init+0x23e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a57      	ldr	r2, [pc, #348]	; (80015b8 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0x23a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_GPIO_Init+0x334>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02b      	beq.n	80014be <HAL_GPIO_Init+0x236>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <HAL_GPIO_Init+0x338>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d025      	beq.n	80014ba <HAL_GPIO_Init+0x232>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <HAL_GPIO_Init+0x33c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01f      	beq.n	80014b6 <HAL_GPIO_Init+0x22e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x340>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x22a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x344>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x226>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_GPIO_Init+0x348>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x222>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <HAL_GPIO_Init+0x34c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x21e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x350>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x21a>
 800149e:	2309      	movs	r3, #9
 80014a0:	e012      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a2:	230a      	movs	r3, #10
 80014a4:	e010      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x328>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_GPIO_Init+0x354>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_GPIO_Init+0x354>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_GPIO_Init+0x354>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_GPIO_Init+0x354>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae84 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021c00 	.word	0x40021c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022400 	.word	0x40022400
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e267      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d075      	beq.n	80016ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00c      	beq.n	8001624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	2b08      	cmp	r3, #8
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001622:	d10b      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d05b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d157      	bne.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e242      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x74>
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6c      	ldr	r2, [pc, #432]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001678:	4b69      	ldr	r3, [pc, #420]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fce0 	bl	800105c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcdc 	bl	800105c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e207      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fccc 	bl	800105c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fcc8 	bl	800105c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1f3      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0xe8>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c7      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc81 	bl	800105c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc7d 	bl	800105c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a8      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fc60 	bl	800105c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc5c 	bl	800105c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e187      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc40 	bl	800105c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc3c 	bl	800105c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e167      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x200>
 80017fe:	e01b      	b.n	8001838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fc29 	bl	800105c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fc25 	bl	800105c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d907      	bls.n	800182c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e150      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	42470000 	.word	0x42470000
 8001828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ea      	bne.n	800180e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8097 	beq.w	8001974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b7d      	ldr	r3, [pc, #500]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a7c      	ldr	r2, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff fbe5 	bl	800105c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff fbe1 	bl	800105c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e10c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x2ea>
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x30c>
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ec:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a54      	ldr	r2, [pc, #336]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0304 	bic.w	r3, r3, #4
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fba6 	bl	800105c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fba2 	bl	800105c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0cb      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ee      	beq.n	8001914 <HAL_RCC_OscConfig+0x334>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb90 	bl	800105c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fb8c 	bl	800105c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b5      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a1 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b08      	cmp	r3, #8
 8001988:	d05c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d141      	bne.n	8001a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb60 	bl	800105c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb5c 	bl	800105c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e087      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb35 	bl	800105c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff fb31 	bl	800105c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e05c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x416>
 8001a14:	e054      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb1e 	bl	800105c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fb1a 	bl	800105c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e045      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
 8001a42:	e03d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e038      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d028      	beq.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d11a      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cc      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d90c      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d044      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d119      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e067      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4934      	ldr	r1, [pc, #208]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa4c 	bl	800105c <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa48 	bl	800105c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20c      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9ac 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08007dd8 	.word	0x08007dd8
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b090      	sub	sp, #64	; 0x40
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d00d      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	f200 80a1 	bhi.w	8001e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cce:	e09b      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cd4:	e09b      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cda:	e098      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d04:	2100      	movs	r1, #0
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d08:	fb03 f201 	mul.w	r2, r3, r1
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4a43      	ldr	r2, [pc, #268]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d16:	fba0 1202 	umull	r1, r2, r0, r2
 8001d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d22:	4413      	add	r3, r2
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	61fa      	str	r2, [r7, #28]
 8001d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d36:	f7fe fac3 	bl	80002c0 <__aeabi_uldivmod>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d42:	e053      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	617a      	str	r2, [r7, #20]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d56:	f04f 0b00 	mov.w	fp, #0
 8001d5a:	4652      	mov	r2, sl
 8001d5c:	465b      	mov	r3, fp
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ebb2 080a 	subs.w	r8, r2, sl
 8001d76:	eb63 090b 	sbc.w	r9, r3, fp
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d92:	eb63 0509 	sbc.w	r5, r3, r9
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	00eb      	lsls	r3, r5, #3
 8001da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da4:	00e2      	lsls	r2, r4, #3
 8001da6:	4614      	mov	r4, r2
 8001da8:	461d      	mov	r5, r3
 8001daa:	eb14 030a 	adds.w	r3, r4, sl
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	eb45 030b 	adc.w	r3, r5, fp
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	028b      	lsls	r3, r1, #10
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dcc:	4621      	mov	r1, r4
 8001dce:	028a      	lsls	r2, r1, #10
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	60fa      	str	r2, [r7, #12]
 8001ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de0:	f7fe fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3740      	adds	r7, #64	; 0x40
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	016e3600 	.word	0x016e3600

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0a9b      	lsrs	r3, r3, #10
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08007de8 	.word	0x08007de8

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e6c:	f7ff ffdc 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0b5b      	lsrs	r3, r3, #13
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4903      	ldr	r1, [pc, #12]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	08007de8 	.word	0x08007de8

08001e90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e022      	b.n	8001ee8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe ff1f 	bl	8000cf8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f814 	bl	8001ef0 <HAL_SD_InitCard>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00a      	b.n	8001ee8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b08e      	sub	sp, #56	; 0x38
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001f0c:	2376      	movs	r3, #118	; 0x76
 8001f0e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681d      	ldr	r5, [r3, #0]
 8001f14:	466c      	mov	r4, sp
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f001 fcfd 	bl	8003928 <SDIO_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04f      	b.n	8001fe0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_SD_InitCard+0xf8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fd35 	bl	80039ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_SD_InitCard+0xf8>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7ff f88c 	bl	8001074 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 ff03 	bl	8002d68 <SD_PowerON>
 8001f62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e02e      	b.n	8001fe0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fe22 	bl	8002bcc <SD_InitCard>
 8001f88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e01b      	b.n	8001fe0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fd94 	bl	8003ade <SDMMC_CmdBlockLength>
 8001fb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00f      	beq.n	8001fde <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_SD_InitCard+0xfc>)
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe8:	422580a0 	.word	0x422580a0
 8001fec:	004005ff 	.word	0x004005ff

08001ff0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b092      	sub	sp, #72	; 0x48
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001ffe:	f7ff f82d 	bl	800105c <HAL_GetTick>
 8002002:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1bd      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 81b0 	bne.w	8002390 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	441a      	add	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	429a      	cmp	r2, r3
 8002042:	d907      	bls.n	8002054 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e1a4      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2203      	movs	r2, #3
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	2b01      	cmp	r3, #1
 800206a:	d002      	beq.n	8002072 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	025b      	lsls	r3, r3, #9
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800207e:	2390      	movs	r3, #144	; 0x90
 8002080:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002082:	2302      	movs	r3, #2
 8002084:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800208a:	2301      	movs	r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f107 0214 	add.w	r2, r7, #20
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fcf4 	bl	8003a86 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d90a      	bls.n	80020ba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 fd58 	bl	8003b66 <SDMMC_CmdReadMultiBlock>
 80020b6:	6478      	str	r0, [r7, #68]	; 0x44
 80020b8:	e009      	b.n	80020ce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 fd2b 	bl	8003b22 <SDMMC_CmdReadSingleBlock>
 80020cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80020ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e151      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020fe:	e061      	b.n	80021c4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03c      	beq.n	8002188 <HAL_SD_ReadBlocks+0x198>
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d039      	beq.n	8002188 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002114:	2300      	movs	r3, #0
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
 8002118:	e033      	b.n	8002182 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f001 fc2d 	bl	800397e <SDIO_ReadFIFO>
 8002124:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	b2da      	uxtb	r2, r3
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	3301      	adds	r3, #1
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002136:	3b01      	subs	r3, #1
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b2da      	uxtb	r2, r3
 8002140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002142:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	3301      	adds	r3, #1
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800214a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214c:	3b01      	subs	r3, #1
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	0c1b      	lsrs	r3, r3, #16
 8002154:	b2da      	uxtb	r2, r3
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	3301      	adds	r3, #1
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	3b01      	subs	r3, #1
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	0e1b      	lsrs	r3, r3, #24
 800216a:	b2da      	uxtb	r2, r3
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	3301      	adds	r3, #1
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	3b01      	subs	r3, #1
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800217c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217e:	3301      	adds	r3, #1
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
 8002182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002184:	2b07      	cmp	r3, #7
 8002186:	d9c8      	bls.n	800211a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002188:	f7fe ff68 	bl	800105c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002194:	429a      	cmp	r2, r3
 8002196:	d902      	bls.n	800219e <HAL_SD_ReadBlocks+0x1ae>
 8002198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d112      	bne.n	80021c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a48      	ldr	r2, [pc, #288]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0ec      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ca:	f240 332a 	movw	r3, #810	; 0x32a
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d095      	beq.n	8002100 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d022      	beq.n	8002228 <HAL_SD_ReadBlocks+0x238>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d91f      	bls.n	8002228 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d01b      	beq.n	8002228 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fd1d 	bl	8003c34 <SDMMC_CmdStopTransfer>
 80021fa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80021fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d012      	beq.n	8002228 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800220e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ba      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	f043 0208 	orr.w	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0a0      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e086      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_SD_ReadBlocks+0x2d4>)
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e06c      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
 80022c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fb56 	bl	800397e <SDIO_ReadFIFO>
 80022d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	3301      	adds	r3, #1
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80022e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e4:	3b01      	subs	r3, #1
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	3301      	adds	r3, #1
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2da      	uxtb	r2, r3
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	3301      	adds	r3, #1
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002310:	3b01      	subs	r3, #1
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	0e1b      	lsrs	r3, r3, #24
 8002318:	b2da      	uxtb	r2, r3
 800231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	3301      	adds	r3, #1
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	3b01      	subs	r3, #1
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800232a:	f7fe fe97 	bl	800105c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002336:	429a      	cmp	r2, r3
 8002338:	d902      	bls.n	8002340 <HAL_SD_ReadBlocks+0x350>
 800233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233c:	2b00      	cmp	r3, #0
 800233e:	d112      	bne.n	8002366 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_SD_ReadBlocks+0x3b8>)
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e01b      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_SD_ReadBlocks+0x38a>
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1a6      	bne.n	80022c8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002382:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e006      	b.n	800239e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3748      	adds	r7, #72	; 0x48
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	004005ff 	.word	0x004005ff

080023ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b092      	sub	sp, #72	; 0x48
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80023ba:	f7fe fe4f 	bl	800105c <HAL_GetTick>
 80023be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e166      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f040 8159 	bne.w	800269e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d907      	bls.n	8002410 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e14d      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2203      	movs	r2, #3
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	2b01      	cmp	r3, #1
 8002426:	d002      	beq.n	800242e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800243a:	2390      	movs	r3, #144	; 0x90
 800243c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f107 0218 	add.w	r2, r7, #24
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f001 fb16 	bl	8003a86 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d90a      	bls.n	8002476 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fbbe 	bl	8003bee <SDMMC_CmdWriteMultiBlock>
 8002472:	6478      	str	r0, [r7, #68]	; 0x44
 8002474:	e009      	b.n	800248a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fb91 	bl	8003baa <SDMMC_CmdWriteSingleBlock>
 8002488:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a87      	ldr	r2, [pc, #540]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0fa      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024ba:	e065      	b.n	8002588 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_SD_WriteBlocks+0x1a0>
 80024ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03d      	beq.n	800254c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
 80024d4:	e037      	b.n	8002546 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	3301      	adds	r3, #1
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	3b01      	subs	r3, #1
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	3301      	adds	r3, #1
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80024fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fc:	3b01      	subs	r3, #1
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	3301      	adds	r3, #1
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002514:	3b01      	subs	r3, #1
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	061a      	lsls	r2, r3, #24
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	3301      	adds	r3, #1
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252c:	3b01      	subs	r3, #1
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f107 0214 	add.w	r2, r7, #20
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fa2c 	bl	8003998 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	3301      	adds	r3, #1
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
 8002546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002548:	2b07      	cmp	r3, #7
 800254a:	d9c4      	bls.n	80024d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800254c:	f7fe fd86 	bl	800105c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002558:	429a      	cmp	r2, r3
 800255a:	d902      	bls.n	8002562 <HAL_SD_WriteBlocks+0x1b6>
 800255c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a53      	ldr	r2, [pc, #332]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800256e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e091      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258e:	f240 331a 	movw	r3, #794	; 0x31a
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d091      	beq.n	80024bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d022      	beq.n	80025ec <HAL_SD_WriteBlocks+0x240>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d91f      	bls.n	80025ec <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d01b      	beq.n	80025ec <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 fb3b 	bl	8003c34 <SDMMC_CmdStopTransfer>
 80025be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e05f      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e045      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e02b      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_SD_WriteBlocks+0x308>)
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e011      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f240 523a 	movw	r2, #1338	; 0x53a
 8002690:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e006      	b.n	80026ac <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3748      	adds	r7, #72	; 0x48
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	004005ff 	.word	0x004005ff

080026b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	0f9b      	lsrs	r3, r3, #30
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e4:	0e1b      	lsrs	r3, r3, #24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b2da      	uxtb	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270e:	b2da      	uxtb	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	b29a      	uxth	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002736:	0bdb      	lsrs	r3, r3, #15
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002748:	0b9b      	lsrs	r3, r3, #14
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	0b5b      	lsrs	r3, r3, #13
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800276c:	0b1b      	lsrs	r3, r3, #12
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	2b00      	cmp	r3, #0
 8002786:	d163      	bne.n	8002850 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002798:	0f92      	lsrs	r2, r2, #30
 800279a:	431a      	orrs	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a4:	0edb      	lsrs	r3, r3, #27
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c8:	0d5b      	lsrs	r3, r3, #21
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	0bdb      	lsrs	r3, r3, #15
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	3302      	adds	r3, #2
 8002810:	2201      	movs	r2, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7a1b      	ldrb	r3, [r3, #8]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800283c:	0a52      	lsrs	r2, r2, #9
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
 800284e:	e031      	b.n	80028b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	2b01      	cmp	r3, #1
 8002856:	d11d      	bne.n	8002894 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	3301      	adds	r3, #1
 8002874:	029a      	lsls	r2, r3, #10
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	661a      	str	r2, [r3, #96]	; 0x60
 8002892:	e00f      	b.n	80028b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_SD_GetCardCSD+0x344>)
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e09d      	b.n	80029f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	0b9b      	lsrs	r3, r3, #14
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	09db      	lsrs	r3, r3, #7
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	0fdb      	lsrs	r3, r3, #31
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	0f5b      	lsrs	r3, r3, #29
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	b2da      	uxtb	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	0d9b      	lsrs	r3, r3, #22
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2da      	uxtb	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	0d5b      	lsrs	r3, r3, #21
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	0bdb      	lsrs	r3, r3, #15
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	0b9b      	lsrs	r3, r3, #14
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	b2da      	uxtb	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	0b1b      	lsrs	r3, r3, #12
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	004005ff 	.word	0x004005ff

08002a00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b08e      	sub	sp, #56	; 0x38
 8002a5c:	af04      	add	r7, sp, #16
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d02e      	beq.n	8002ad6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d106      	bne.n	8002a8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8c:	e029      	b.n	8002ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a94:	d10a      	bne.n	8002aac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa1c 	bl	8002ed4 <SD_WideBus_Enable>
 8002a9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aaa:	e01a      	b.n	8002ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa59 	bl	8002f6a <SD_WideBus_Disable>
 8002ab8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ac6:	e00c      	b.n	8002ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad4:	e005      	b.n	8002ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b00:	e01f      	b.n	8002b42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681d      	ldr	r5, [r3, #0]
 8002b28:	466c      	mov	r4, sp
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 fef3 	bl	8003928 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 ffc7 	bl	8003ade <SDMMC_CmdBlockLength>
 8002b50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3728      	adds	r7, #40	; 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	004005ff 	.word	0x004005ff

08002b8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f970 	bl	8002e84 <SD_SendStatus>
 8002ba4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002bc2:	693b      	ldr	r3, [r7, #16]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b094      	sub	sp, #80	; 0x50
 8002bd0:	af04      	add	r7, sp, #16
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fefa 	bl	80039d6 <SDIO_GetPowerState>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002be8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bec:	e0b8      	b.n	8002d60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d02f      	beq.n	8002c56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 f924 	bl	8003e48 <SDMMC_CmdSendCID>
 8002c00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SD_InitCard+0x40>
    {
      return errorstate;
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	e0a9      	b.n	8002d60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ff24 	bl	8003a60 <SDIO_GetResponse>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2104      	movs	r1, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 ff1b 	bl	8003a60 <SDIO_GetResponse>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2108      	movs	r1, #8
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 ff12 	bl	8003a60 <SDIO_GetResponse>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	210c      	movs	r1, #12
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 ff09 	bl	8003a60 <SDIO_GetResponse>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d00d      	beq.n	8002c7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f107 020e 	add.w	r2, r7, #14
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f92a 	bl	8003ec2 <SDMMC_CmdSetRelAdd>
 8002c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <SD_InitCard+0xae>
    {
      return errorstate;
 8002c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c78:	e072      	b.n	8002d60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d036      	beq.n	8002cf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f001 f8f4 	bl	8003e84 <SDMMC_CmdSendCSD>
 8002c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	e05b      	b.n	8002d60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fed6 	bl	8003a60 <SDIO_GetResponse>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fecd 	bl	8003a60 <SDIO_GetResponse>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fec4 	bl	8003a60 <SDIO_GetResponse>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	210c      	movs	r1, #12
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 febb 	bl	8003a60 <SDIO_GetResponse>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 feb2 	bl	8003a60 <SDIO_GetResponse>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	0d1a      	lsrs	r2, r3, #20
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fcd4 	bl	80026b8 <HAL_SD_GetCardCSD>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d1a:	e021      	b.n	8002d60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	2200      	movs	r2, #0
 8002d28:	461c      	mov	r4, r3
 8002d2a:	4615      	mov	r5, r2
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	462b      	mov	r3, r5
 8002d30:	4608      	mov	r0, r1
 8002d32:	f000 ffa1 	bl	8003c78 <SDMMC_CmdSelDesel>
 8002d36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <SD_InitCard+0x176>
  {
    return errorstate;
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	e00e      	b.n	8002d60 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681d      	ldr	r5, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	466c      	mov	r4, sp
 8002d4a:	f103 0210 	add.w	r2, r3, #16
 8002d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d54:	3304      	adds	r3, #4
 8002d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f000 fde5 	bl	8003928 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3740      	adds	r7, #64	; 0x40
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdb0      	pop	{r4, r5, r7, pc}

08002d68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 ff9c 	bl	8003cbe <SDMMC_CmdGoIdleState>
 8002d86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	e072      	b.n	8002e78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 ffaf 	bl	8003cfa <SDMMC_CmdOperCond>
 8002d9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ff85 	bl	8003cbe <SDMMC_CmdGoIdleState>
 8002db4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	e05b      	b.n	8002e78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d137      	bne.n	8002e3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 ffaf 	bl	8003d38 <SDMMC_CmdAppCommand>
 8002dda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d02d      	beq.n	8002e3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002de2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002de6:	e047      	b.n	8002e78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ffa2 	bl	8003d38 <SDMMC_CmdAppCommand>
 8002df4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <SD_PowerON+0x98>
    {
      return errorstate;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	e03b      	b.n	8002e78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	491e      	ldr	r1, [pc, #120]	; (8002e80 <SD_PowerON+0x118>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ffb8 	bl	8003d7c <SDMMC_CmdAppOperCommand>
 8002e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e18:	e02e      	b.n	8002e78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fe1d 	bl	8003a60 <SDIO_GetResponse>
 8002e26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	0fdb      	lsrs	r3, r3, #31
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <SD_PowerON+0xcc>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <SD_PowerON+0xce>
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]

    count++;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d802      	bhi.n	8002e4e <SD_PowerON+0xe6>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0cc      	beq.n	8002de8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d902      	bls.n	8002e5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5c:	e00c      	b.n	8002e78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002e6e:	e002      	b.n	8002e76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	c1100000 	.word	0xc1100000

08002e84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002e94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e98:	e018      	b.n	8002ecc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f001 f82c 	bl	8003f04 <SDMMC_CmdSendStatus>
 8002eac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	e009      	b.n	8002ecc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fdce 	bl	8003a60 <SDIO_GetResponse>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fdb8 	bl	8003a60 <SDIO_GetResponse>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efa:	d102      	bne.n	8002f02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f00:	e02f      	b.n	8002f62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f879 	bl	8003000 <SD_FindSCR>
 8002f0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	e023      	b.n	8002f62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01c      	beq.n	8002f5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f000 ff01 	bl	8003d38 <SDMMC_CmdAppCommand>
 8002f36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	e00f      	b.n	8002f62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 ff3a 	bl	8003dc2 <SDMMC_CmdBusWidth>
 8002f4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	e003      	b.n	8002f62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e001      	b.n	8002f62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fd6d 	bl	8003a60 <SDIO_GetResponse>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f90:	d102      	bne.n	8002f98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f96:	e02f      	b.n	8002ff8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f82e 	bl	8003000 <SD_FindSCR>
 8002fa4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	e023      	b.n	8002ff8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 feb6 	bl	8003d38 <SDMMC_CmdAppCommand>
 8002fcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	e00f      	b.n	8002ff8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 feef 	bl	8003dc2 <SDMMC_CmdBusWidth>
 8002fe4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	e003      	b.n	8002ff8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e001      	b.n	8002ff8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ff4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b08f      	sub	sp, #60	; 0x3c
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800300a:	f7fe f827 	bl	800105c <HAL_GetTick>
 800300e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2108      	movs	r1, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fd59 	bl	8003ade <SDMMC_CmdBlockLength>
 800302c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	e0b2      	b.n	800319e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f000 fe77 	bl	8003d38 <SDMMC_CmdAppCommand>
 800304a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	e0a3      	b.n	800319e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800305c:	2308      	movs	r3, #8
 800305e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003060:	2330      	movs	r3, #48	; 0x30
 8003062:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003064:	2302      	movs	r3, #2
 8003066:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f107 0210 	add.w	r2, r7, #16
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd03 	bl	8003a86 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 febe 	bl	8003e06 <SDMMC_CmdSendSCR>
 800308a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02a      	beq.n	80030e8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	e083      	b.n	800319e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00f      	beq.n	80030c4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f107 0208 	add.w	r2, r7, #8
 80030b0:	18d4      	adds	r4, r2, r3
 80030b2:	4608      	mov	r0, r1
 80030b4:	f000 fc63 	bl	800397e <SDIO_ReadFIFO>
 80030b8:	4603      	mov	r3, r0
 80030ba:	6023      	str	r3, [r4, #0]
      index++;
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	3301      	adds	r3, #1
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
 80030c2:	e006      	b.n	80030d2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d012      	beq.n	80030f8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80030d2:	f7fd ffc3 	bl	800105c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d102      	bne.n	80030e8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80030e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030e6:	e05a      	b.n	800319e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0cf      	beq.n	8003096 <SD_FindSCR+0x96>
 80030f6:	e000      	b.n	80030fa <SD_FindSCR+0xfa>
      break;
 80030f8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2208      	movs	r2, #8
 800310e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003110:	2308      	movs	r3, #8
 8003112:	e044      	b.n	800319e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2202      	movs	r2, #2
 8003128:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800312a:	2302      	movs	r3, #2
 800312c:	e037      	b.n	800319e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003144:	2320      	movs	r3, #32
 8003146:	e02a      	b.n	800319e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003150:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	061a      	lsls	r2, r3, #24
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800315e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003168:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0e1b      	lsrs	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	601a      	str	r2, [r3, #0]
    scr++;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	3304      	adds	r3, #4
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	061a      	lsls	r2, r3, #24
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003186:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003190:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	373c      	adds	r7, #60	; 0x3c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}

080031a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e03f      	b.n	8003238 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd fdfb 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2224      	movs	r2, #36	; 0x24
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f928 	bl	8003440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d17c      	bne.n	800335a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_UART_Transmit+0x2c>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e075      	b.n	800335c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit+0x3e>
 800327a:	2302      	movs	r3, #2
 800327c:	e06e      	b.n	800335c <HAL_UART_Transmit+0x11c>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2221      	movs	r2, #33	; 0x21
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003294:	f7fd fee2 	bl	800105c <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d108      	bne.n	80032c2 <HAL_UART_Transmit+0x82>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e003      	b.n	80032ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032d2:	e02a      	b.n	800332a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2200      	movs	r2, #0
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f840 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e036      	b.n	800335c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003302:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	3302      	adds	r3, #2
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e007      	b.n	800331c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1cf      	bne.n	80032d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f810 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e006      	b.n	800335c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b090      	sub	sp, #64	; 0x40
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	e050      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d04c      	beq.n	8003418 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
 8003384:	f7fd fe6a 	bl	800105c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003390:	429a      	cmp	r2, r3
 8003392:	d241      	bcs.n	8003418 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b4:	637a      	str	r2, [r7, #52]	; 0x34
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	613b      	str	r3, [r7, #16]
   return(result);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033e8:	623a      	str	r2, [r7, #32]
 80033ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	69f9      	ldr	r1, [r7, #28]
 80033ee:	6a3a      	ldr	r2, [r7, #32]
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e00f      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	429a      	cmp	r2, r3
 8003434:	d09f      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3740      	adds	r7, #64	; 0x40
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b0c0      	sub	sp, #256	; 0x100
 8003446:	af00      	add	r7, sp, #0
 8003448:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	ea40 0301 	orr.w	r3, r0, r1
 8003468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	431a      	orrs	r2, r3
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003498:	f021 010c 	bic.w	r1, r1, #12
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034a6:	430b      	orrs	r3, r1
 80034a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	6999      	ldr	r1, [r3, #24]
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	ea40 0301 	orr.w	r3, r0, r1
 80034c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8f      	ldr	r3, [pc, #572]	; (800370c <UART_SetConfig+0x2cc>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d005      	beq.n	80034e0 <UART_SetConfig+0xa0>
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8d      	ldr	r3, [pc, #564]	; (8003710 <UART_SetConfig+0x2d0>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7fe fcc2 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 80034e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034e8:	e003      	b.n	80034f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7fe fca9 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 80034ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	f040 810c 	bne.w	8003718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800350a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800350e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	1891      	adds	r1, r2, r2
 8003518:	65b9      	str	r1, [r7, #88]	; 0x58
 800351a:	415b      	adcs	r3, r3
 800351c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800351e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003522:	4621      	mov	r1, r4
 8003524:	eb12 0801 	adds.w	r8, r2, r1
 8003528:	4629      	mov	r1, r5
 800352a:	eb43 0901 	adc.w	r9, r3, r1
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003542:	4690      	mov	r8, r2
 8003544:	4699      	mov	r9, r3
 8003546:	4623      	mov	r3, r4
 8003548:	eb18 0303 	adds.w	r3, r8, r3
 800354c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003550:	462b      	mov	r3, r5
 8003552:	eb49 0303 	adc.w	r3, r9, r3
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003566:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800356a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800356e:	460b      	mov	r3, r1
 8003570:	18db      	adds	r3, r3, r3
 8003572:	653b      	str	r3, [r7, #80]	; 0x50
 8003574:	4613      	mov	r3, r2
 8003576:	eb42 0303 	adc.w	r3, r2, r3
 800357a:	657b      	str	r3, [r7, #84]	; 0x54
 800357c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003584:	f7fc fe9c 	bl	80002c0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4b61      	ldr	r3, [pc, #388]	; (8003714 <UART_SetConfig+0x2d4>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011c      	lsls	r4, r3, #4
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80035b0:	415b      	adcs	r3, r3
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035b8:	4641      	mov	r1, r8
 80035ba:	eb12 0a01 	adds.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb43 0b01 	adc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d8:	4692      	mov	sl, r2
 80035da:	469b      	mov	fp, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	eb1a 0303 	adds.w	r3, sl, r3
 80035e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e6:	464b      	mov	r3, r9
 80035e8:	eb4b 0303 	adc.w	r3, fp, r3
 80035ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003604:	460b      	mov	r3, r1
 8003606:	18db      	adds	r3, r3, r3
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
 800360a:	4613      	mov	r3, r2
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	647b      	str	r3, [r7, #68]	; 0x44
 8003612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800361a:	f7fc fe51 	bl	80002c0 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4611      	mov	r1, r2
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <UART_SetConfig+0x2d4>)
 8003626:	fba3 2301 	umull	r2, r3, r3, r1
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2264      	movs	r2, #100	; 0x64
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	1acb      	subs	r3, r1, r3
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <UART_SetConfig+0x2d4>)
 800363c:	fba3 2302 	umull	r2, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003648:	441c      	add	r4, r3
 800364a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003654:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	1891      	adds	r1, r2, r2
 8003662:	63b9      	str	r1, [r7, #56]	; 0x38
 8003664:	415b      	adcs	r3, r3
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800366c:	4641      	mov	r1, r8
 800366e:	1851      	adds	r1, r2, r1
 8003670:	6339      	str	r1, [r7, #48]	; 0x30
 8003672:	4649      	mov	r1, r9
 8003674:	414b      	adcs	r3, r1
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003684:	4659      	mov	r1, fp
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4651      	mov	r1, sl
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4642      	mov	r2, r8
 800369a:	189b      	adds	r3, r3, r2
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a0:	464b      	mov	r3, r9
 80036a2:	460a      	mov	r2, r1
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036c0:	460b      	mov	r3, r1
 80036c2:	18db      	adds	r3, r3, r3
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	4613      	mov	r3, r2
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036d6:	f7fc fdf3 	bl	80002c0 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <UART_SetConfig+0x2d4>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	3332      	adds	r3, #50	; 0x32
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <UART_SetConfig+0x2d4>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	f003 0207 	and.w	r2, r3, #7
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4422      	add	r2, r4
 8003706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003708:	e105      	b.n	8003916 <UART_SetConfig+0x4d6>
 800370a:	bf00      	nop
 800370c:	40011000 	.word	0x40011000
 8003710:	40011400 	.word	0x40011400
 8003714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371c:	2200      	movs	r2, #0
 800371e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800372a:	4642      	mov	r2, r8
 800372c:	464b      	mov	r3, r9
 800372e:	1891      	adds	r1, r2, r2
 8003730:	6239      	str	r1, [r7, #32]
 8003732:	415b      	adcs	r3, r3
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373a:	4641      	mov	r1, r8
 800373c:	1854      	adds	r4, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0501 	adc.w	r5, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	00eb      	lsls	r3, r5, #3
 800374e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003752:	00e2      	lsls	r2, r4, #3
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4643      	mov	r3, r8
 800375a:	18e3      	adds	r3, r4, r3
 800375c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003760:	464b      	mov	r3, r9
 8003762:	eb45 0303 	adc.w	r3, r5, r3
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003786:	4629      	mov	r1, r5
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003790:	4621      	mov	r1, r4
 8003792:	008a      	lsls	r2, r1, #2
 8003794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003798:	f7fc fd92 	bl	80002c0 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b60      	ldr	r3, [pc, #384]	; (8003924 <UART_SetConfig+0x4e4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	61b9      	str	r1, [r7, #24]
 80037c4:	415b      	adcs	r3, r3
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	4641      	mov	r1, r8
 80037ce:	1851      	adds	r1, r2, r1
 80037d0:	6139      	str	r1, [r7, #16]
 80037d2:	4649      	mov	r1, r9
 80037d4:	414b      	adcs	r3, r1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e4:	4659      	mov	r1, fp
 80037e6:	00cb      	lsls	r3, r1, #3
 80037e8:	4651      	mov	r1, sl
 80037ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ee:	4651      	mov	r1, sl
 80037f0:	00ca      	lsls	r2, r1, #3
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	4642      	mov	r2, r8
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003800:	464b      	mov	r3, r9
 8003802:	460a      	mov	r2, r1
 8003804:	eb42 0303 	adc.w	r3, r2, r3
 8003808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	67bb      	str	r3, [r7, #120]	; 0x78
 8003816:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003824:	4649      	mov	r1, r9
 8003826:	008b      	lsls	r3, r1, #2
 8003828:	4641      	mov	r1, r8
 800382a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382e:	4641      	mov	r1, r8
 8003830:	008a      	lsls	r2, r1, #2
 8003832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003836:	f7fc fd43 	bl	80002c0 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <UART_SetConfig+0x4e4>)
 8003840:	fba3 1302 	umull	r1, r3, r3, r2
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	2164      	movs	r1, #100	; 0x64
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	3332      	adds	r3, #50	; 0x32
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <UART_SetConfig+0x4e4>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385e:	441c      	add	r4, r3
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	673b      	str	r3, [r7, #112]	; 0x70
 8003868:	677a      	str	r2, [r7, #116]	; 0x74
 800386a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800386e:	4642      	mov	r2, r8
 8003870:	464b      	mov	r3, r9
 8003872:	1891      	adds	r1, r2, r2
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	415b      	adcs	r3, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800387e:	4641      	mov	r1, r8
 8003880:	1851      	adds	r1, r2, r1
 8003882:	6039      	str	r1, [r7, #0]
 8003884:	4649      	mov	r1, r9
 8003886:	414b      	adcs	r3, r1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003896:	4659      	mov	r1, fp
 8003898:	00cb      	lsls	r3, r1, #3
 800389a:	4651      	mov	r1, sl
 800389c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a0:	4651      	mov	r1, sl
 80038a2:	00ca      	lsls	r2, r1, #3
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	4642      	mov	r2, r8
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	663b      	str	r3, [r7, #96]	; 0x60
 80038c4:	667a      	str	r2, [r7, #100]	; 0x64
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038d2:	4649      	mov	r1, r9
 80038d4:	008b      	lsls	r3, r1, #2
 80038d6:	4641      	mov	r1, r8
 80038d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038dc:	4641      	mov	r1, r8
 80038de:	008a      	lsls	r2, r1, #2
 80038e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038e4:	f7fc fcec 	bl	80002c0 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <UART_SetConfig+0x4e4>)
 80038ee:	fba3 1302 	umull	r1, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2164      	movs	r1, #100	; 0x64
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <UART_SetConfig+0x4e4>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4422      	add	r2, r4
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	51eb851f 	.word	0x51eb851f

08003928 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003928:	b084      	sub	sp, #16
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	f107 001c 	add.w	r0, r7, #28
 8003936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800393e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003940:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003942:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003946:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800394a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800394e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003952:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	b004      	add	sp, #16
 800397c:	4770      	bx	lr

0800397e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0303 	and.w	r3, r3, #3
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a10:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003a16:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003a1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a2c:	f023 030f 	bic.w	r3, r3, #15
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	461a      	mov	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
}  
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003aac:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003ab2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003ab8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0

}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003aec:	2310      	movs	r3, #16
 8003aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff74 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	2110      	movs	r1, #16
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fa19 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b18:	69fb      	ldr	r3, [r7, #28]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b088      	sub	sp, #32
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003b30:	2311      	movs	r3, #17
 8003b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b34:	2340      	movs	r3, #64	; 0x40
 8003b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff52 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	2111      	movs	r1, #17
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f9f7 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b088      	sub	sp, #32
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003b74:	2312      	movs	r3, #18
 8003b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b78:	2340      	movs	r3, #64	; 0x40
 8003b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff30 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	2112      	movs	r1, #18
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f9d5 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b088      	sub	sp, #32
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003bb8:	2318      	movs	r3, #24
 8003bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff0e 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	2118      	movs	r1, #24
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9b3 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003be2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003be4:	69fb      	ldr	r3, [r7, #28]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b088      	sub	sp, #32
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c00:	2340      	movs	r3, #64	; 0x40
 8003c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff feec 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	2119      	movs	r1, #25
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f991 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c28:	69fb      	ldr	r3, [r7, #28]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003c40:	230c      	movs	r3, #12
 8003c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c44:	2340      	movs	r3, #64	; 0x40
 8003c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c52:	f107 0308 	add.w	r3, r7, #8
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff feca 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <SDMMC_CmdStopTransfer+0x40>)
 8003c60:	210c      	movs	r1, #12
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f970 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	05f5e100 	.word	0x05f5e100

08003c78 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003c88:	2307      	movs	r3, #7
 8003c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c98:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff fea6 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	2107      	movs	r1, #7
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f94b 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b088      	sub	sp, #32
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cdc:	f107 0308 	add.w	r3, r7, #8
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe85 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb65 	bl	80043b8 <SDMMC_GetCmdError>
 8003cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b088      	sub	sp, #32
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003d02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003d08:	2308      	movs	r3, #8
 8003d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d0c:	2340      	movs	r3, #64	; 0x40
 8003d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fe66 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 faf8 	bl	800431c <SDMMC_GetCmdResp7>
 8003d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003d46:	2337      	movs	r3, #55	; 0x37
 8003d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fe47 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	2137      	movs	r1, #55	; 0x37
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8ec 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d72:	69fb      	ldr	r3, [r7, #28]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003d92:	2329      	movs	r3, #41	; 0x29
 8003d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fe21 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f9ff 	bl	80041b4 <SDMMC_GetCmdResp3>
 8003db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003db8:	69fb      	ldr	r3, [r7, #28]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b088      	sub	sp, #32
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fe02 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	2106      	movs	r1, #6
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8a7 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b088      	sub	sp, #32
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003e12:	2333      	movs	r3, #51	; 0x33
 8003e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fde1 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	2133      	movs	r1, #51	; 0x33
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f886 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003e54:	2302      	movs	r3, #2
 8003e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdc0 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f956 	bl	8004124 <SDMMC_GetCmdResp2>
 8003e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003e92:	2309      	movs	r3, #9
 8003e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003e96:	23c0      	movs	r3, #192	; 0xc0
 8003e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ea4:	f107 0308 	add.w	r3, r7, #8
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fda1 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f937 	bl	8004124 <SDMMC_GetCmdResp2>
 8003eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ed4:	2340      	movs	r3, #64	; 0x40
 8003ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fd82 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f99c 	bl	8004230 <SDMMC_GetCmdResp6>
 8003ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003efa:	69fb      	ldr	r3, [r7, #28]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003f12:	230d      	movs	r3, #13
 8003f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fd61 	bl	80039f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	210d      	movs	r1, #13
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f806 	bl	8003f48 <SDMMC_GetCmdResp1>
 8003f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	460b      	mov	r3, r1
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f56:	4b70      	ldr	r3, [pc, #448]	; (8004118 <SDMMC_GetCmdResp1+0x1d0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a70      	ldr	r2, [pc, #448]	; (800411c <SDMMC_GetCmdResp1+0x1d4>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	0a5a      	lsrs	r2, r3, #9
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	61fa      	str	r2, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f78:	e0c9      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ef      	beq.n	8003f6a <SDMMC_GetCmdResp1+0x22>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e0b1      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0a6      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	22c5      	movs	r2, #197	; 0xc5
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fd3d 	bl	8003a46 <SDIO_GetCommandResponse>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d001      	beq.n	8003fda <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e099      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003fda:	2100      	movs	r1, #0
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fd3f 	bl	8003a60 <SDIO_GetResponse>
 8003fe2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4b4e      	ldr	r3, [pc, #312]	; (8004120 <SDMMC_GetCmdResp1+0x1d8>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e08d      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da02      	bge.n	8003ffe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ffc:	e087      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004008:	2340      	movs	r3, #64	; 0x40
 800400a:	e080      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	e079      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004028:	e071      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004038:	e069      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004048:	e061      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004058:	e059      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004068:	e051      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004078:	e049      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004088:	e041      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004098:	e039      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80040a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a8:	e031      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80040b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040b8:	e029      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80040c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80040c8:	e021      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80040d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040d8:	e019      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80040e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040e8:	e011      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80040f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040f8:	e009      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004104:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004108:	e001      	b.n	800410e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800410a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	fdffe008 	.word	0xfdffe008

08004124 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <SDMMC_GetCmdResp2+0x88>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <SDMMC_GetCmdResp2+0x8c>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0a5b      	lsrs	r3, r3, #9
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	60fa      	str	r2, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800414c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004150:	e026      	b.n	80041a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <SDMMC_GetCmdResp2+0x1e>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ea      	bne.n	8004142 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2204      	movs	r2, #4
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800417e:	2304      	movs	r3, #4
 8004180:	e00e      	b.n	80041a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004194:	2301      	movs	r3, #1
 8004196:	e003      	b.n	80041a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	22c5      	movs	r2, #197	; 0xc5
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000000 	.word	0x20000000
 80041b0:	10624dd3 	.word	0x10624dd3

080041b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <SDMMC_GetCmdResp3+0x74>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <SDMMC_GetCmdResp3+0x78>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0a5b      	lsrs	r3, r3, #9
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	60fa      	str	r2, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041e0:	e01b      	b.n	800421a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ef      	beq.n	80041d2 <SDMMC_GetCmdResp3+0x1e>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ea      	bne.n	80041d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800420e:	2304      	movs	r3, #4
 8004210:	e003      	b.n	800421a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	22c5      	movs	r2, #197	; 0xc5
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000
 800422c:	10624dd3 	.word	0x10624dd3

08004230 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	460b      	mov	r3, r1
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800423e:	4b35      	ldr	r3, [pc, #212]	; (8004314 <SDMMC_GetCmdResp6+0xe4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a35      	ldr	r2, [pc, #212]	; (8004318 <SDMMC_GetCmdResp6+0xe8>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0a5b      	lsrs	r3, r3, #9
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	61fa      	str	r2, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800425e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004262:	e052      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <SDMMC_GetCmdResp6+0x24>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ea      	bne.n	8004254 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2204      	movs	r2, #4
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004290:	2304      	movs	r3, #4
 8004292:	e03a      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e02f      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fbcb 	bl	8003a46 <SDIO_GetCommandResponse>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	7afb      	ldrb	r3, [r7, #11]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d001      	beq.n	80042be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e025      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	22c5      	movs	r2, #197	; 0xc5
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042c4:	2100      	movs	r1, #0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fbca 	bl	8003a60 <SDIO_GetResponse>
 80042cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e011      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f4:	e009      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004304:	e001      	b.n	800430a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000000 	.word	0x20000000
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004324:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <SDMMC_GetCmdResp7+0x94>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <SDMMC_GetCmdResp7+0x98>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0a5b      	lsrs	r3, r3, #9
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e5a      	subs	r2, r3, #1
 800433e:	60fa      	str	r2, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004348:	e02c      	b.n	80043a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ef      	beq.n	800433a <SDMMC_GetCmdResp7+0x1e>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ea      	bne.n	800433a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2204      	movs	r2, #4
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004376:	2304      	movs	r3, #4
 8004378:	e014      	b.n	80043a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800438c:	2301      	movs	r3, #1
 800438e:	e009      	b.n	80043a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2240      	movs	r2, #64	; 0x40
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
  
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000000 	.word	0x20000000
 80043b4:	10624dd3 	.word	0x10624dd3

080043b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <SDMMC_GetCmdError+0x50>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <SDMMC_GetCmdError+0x54>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a5b      	lsrs	r3, r3, #9
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80043e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043e4:	e009      	b.n	80043fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f1      	beq.n	80043d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	22c5      	movs	r2, #197	; 0xc5
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <MX_FATFS_Init+0x18>)
 8004416:	4805      	ldr	r0, [pc, #20]	; (800442c <MX_FATFS_Init+0x1c>)
 8004418:	f002 fdc6 	bl	8006fa8 <FATFS_LinkDriver>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <MX_FATFS_Init+0x20>)
 8004422:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000648 	.word	0x20000648
 800442c:	08007df0 	.word	0x08007df0
 8004430:	20000644 	.word	0x20000644

08004434 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004438:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800444e:	f000 f879 	bl	8004544 <BSP_SD_IsDetected>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e012      	b.n	8004482 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800445c:	480b      	ldr	r0, [pc, #44]	; (800448c <BSP_SD_Init+0x48>)
 800445e:	f7fd fd17 	bl	8001e90 <HAL_SD_Init>
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800446c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004470:	4806      	ldr	r0, [pc, #24]	; (800448c <BSP_SD_Init+0x48>)
 8004472:	f7fe faf1 	bl	8002a58 <HAL_SD_ConfigWideBusOperation>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004480:	79fb      	ldrb	r3, [r7, #7]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000050c 	.word	0x2000050c

08004490 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	4806      	ldr	r0, [pc, #24]	; (80044c8 <BSP_SD_ReadBlocks+0x38>)
 80044ae:	f7fd fd9f 	bl	8001ff0 <HAL_SD_ReadBlocks>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	2000050c 	.word	0x2000050c

080044cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	4806      	ldr	r0, [pc, #24]	; (8004504 <BSP_SD_WriteBlocks+0x38>)
 80044ea:	f7fd ff5f 	bl	80023ac <HAL_SD_WriteBlocks>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	2000050c 	.word	0x2000050c

08004508 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800450c:	4805      	ldr	r0, [pc, #20]	; (8004524 <BSP_SD_GetCardState+0x1c>)
 800450e:	f7fe fb3d 	bl	8002b8c <HAL_SD_GetCardState>
 8004512:	4603      	mov	r3, r0
 8004514:	2b04      	cmp	r3, #4
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
}
 800451e:	4618      	mov	r0, r3
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2000050c 	.word	0x2000050c

08004528 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4803      	ldr	r0, [pc, #12]	; (8004540 <BSP_SD_GetCardInfo+0x18>)
 8004534:	f7fe fa64 	bl	8002a00 <HAL_SD_GetCardInfo>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	2000050c 	.word	0x2000050c

08004544 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800454a:	2301      	movs	r3, #1
 800454c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	b2db      	uxtb	r3, r3
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <SD_CheckStatus+0x38>)
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004570:	f7ff ffca 	bl	8004508 <BSP_SD_GetCardState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <SD_CheckStatus+0x38>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <SD_CheckStatus+0x38>)
 8004588:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800458a:	4b03      	ldr	r3, [pc, #12]	; (8004598 <SD_CheckStatus+0x38>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b2db      	uxtb	r3, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20000009 	.word	0x20000009

0800459c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <SD_initialize+0x38>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80045ac:	f7ff ff4a 	bl	8004444 <BSP_SD_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ffd1 	bl	8004560 <SD_CheckStatus>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <SD_initialize+0x38>)
 80045c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80045c6:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <SD_initialize+0x38>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000009 	.word	0x20000009

080045d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ffbb 	bl	8004560 <SD_CheckStatus>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	68b8      	ldr	r0, [r7, #8]
 8004612:	f7ff ff3d 	bl	8004490 <BSP_SD_ReadBlocks>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800461c:	bf00      	nop
 800461e:	f7ff ff73 	bl	8004508 <BSP_SD_GetCardState>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1fa      	bne.n	800461e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4603      	mov	r3, r0
 8004644:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f7ff ff3a 	bl	80044cc <BSP_SD_WriteBlocks>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800465e:	bf00      	nop
 8004660:	f7ff ff52 	bl	8004508 <BSP_SD_GetCardState>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1fa      	bne.n	8004660 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	603a      	str	r2, [r7, #0]
 8004682:	71fb      	strb	r3, [r7, #7]
 8004684:	460b      	mov	r3, r1
 8004686:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800468e:	4b25      	ldr	r3, [pc, #148]	; (8004724 <SD_ioctl+0xac>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <SD_ioctl+0x28>
 800469c:	2303      	movs	r3, #3
 800469e:	e03c      	b.n	800471a <SD_ioctl+0xa2>

  switch (cmd)
 80046a0:	79bb      	ldrb	r3, [r7, #6]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d834      	bhi.n	8004710 <SD_ioctl+0x98>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <SD_ioctl+0x34>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046c5 	.word	0x080046c5
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046f7 	.word	0x080046f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046c2:	e028      	b.n	8004716 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff2d 	bl	8004528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046da:	e01c      	b.n	8004716 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff21 	bl	8004528 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046f4:	e00f      	b.n	8004716 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80046f6:	f107 030c 	add.w	r3, r7, #12
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff14 	bl	8004528 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	0a5a      	lsrs	r2, r3, #9
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800470e:	e002      	b.n	8004716 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004710:	2304      	movs	r3, #4
 8004712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800471a:	4618      	mov	r0, r3
 800471c:	3730      	adds	r7, #48	; 0x30
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000009 	.word	0x20000009

08004728 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <disk_status+0x30>)
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	79fa      	ldrb	r2, [r7, #7]
 8004740:	4905      	ldr	r1, [pc, #20]	; (8004758 <disk_status+0x30>)
 8004742:	440a      	add	r2, r1
 8004744:	7a12      	ldrb	r2, [r2, #8]
 8004746:	4610      	mov	r0, r2
 8004748:	4798      	blx	r3
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000674 	.word	0x20000674

0800475c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <disk_initialize+0x48>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d111      	bne.n	8004798 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <disk_initialize+0x48>)
 8004778:	2101      	movs	r1, #1
 800477a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <disk_initialize+0x48>)
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	79fa      	ldrb	r2, [r7, #7]
 800478a:	4906      	ldr	r1, [pc, #24]	; (80047a4 <disk_initialize+0x48>)
 800478c:	440a      	add	r2, r1
 800478e:	7a12      	ldrb	r2, [r2, #8]
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000674 	.word	0x20000674

080047a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <disk_read+0x3c>)
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	689c      	ldr	r4, [r3, #8]
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4a07      	ldr	r2, [pc, #28]	; (80047e4 <disk_read+0x3c>)
 80047c8:	4413      	add	r3, r2
 80047ca:	7a18      	ldrb	r0, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	47a0      	blx	r4
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000674 	.word	0x20000674

080047e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <disk_write+0x3c>)
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68dc      	ldr	r4, [r3, #12]
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	4a07      	ldr	r2, [pc, #28]	; (8004824 <disk_write+0x3c>)
 8004808:	4413      	add	r3, r2
 800480a:	7a18      	ldrb	r0, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	47a0      	blx	r4
 8004814:	4603      	mov	r3, r0
 8004816:	75fb      	strb	r3, [r7, #23]
  return res;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}
 8004822:	bf00      	nop
 8004824:	20000674 	.word	0x20000674

08004828 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	603a      	str	r2, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
 8004834:	460b      	mov	r3, r1
 8004836:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <disk_ioctl+0x38>)
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	79fa      	ldrb	r2, [r7, #7]
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <disk_ioctl+0x38>)
 8004848:	440a      	add	r2, r1
 800484a:	7a10      	ldrb	r0, [r2, #8]
 800484c:	79b9      	ldrb	r1, [r7, #6]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4798      	blx	r3
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]
  return res;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000674 	.word	0x20000674

08004864 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	b21a      	sxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b21b      	sxth	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	b21b      	sxth	r3, r3
 8004884:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004886:	89fb      	ldrh	r3, [r7, #14]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3303      	adds	r3, #3
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	3202      	adds	r2, #2
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	3201      	adds	r2, #1
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	887a      	ldrh	r2, [r7, #2]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	1c53      	adds	r3, r2, #1
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	6179      	str	r1, [r7, #20]
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3b01      	subs	r3, #1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f1      	bne.n	8004982 <mem_cpy+0x1a>
	}
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	617a      	str	r2, [r7, #20]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f3      	bne.n	80049ba <mem_set+0x10>
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	61fa      	str	r2, [r7, #28]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	61ba      	str	r2, [r7, #24]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	1acb      	subs	r3, r1, r3
 8004a0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <mem_cmp+0x40>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0eb      	beq.n	80049f8 <mem_cmp+0x18>

	return r;
 8004a20:	697b      	ldr	r3, [r7, #20]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a38:	e002      	b.n	8004a40 <chk_chr+0x12>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <chk_chr+0x26>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d1f2      	bne.n	8004a3a <chk_chr+0xc>
	return *str;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	781b      	ldrb	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e029      	b.n	8004acc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a78:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <chk_lock+0xb4>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01d      	beq.n	8004ac2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a86:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <chk_lock+0xb4>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4413      	add	r3, r2
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d116      	bne.n	8004ac6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <chk_lock+0xb4>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d10c      	bne.n	8004ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004aac:	4a1a      	ldr	r2, [pc, #104]	; (8004b18 <chk_lock+0xb4>)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d102      	bne.n	8004ac6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ac0:	e007      	b.n	8004ad2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d9d2      	bls.n	8004a78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d109      	bne.n	8004aec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <chk_lock+0x80>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d101      	bne.n	8004ae8 <chk_lock+0x84>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e010      	b.n	8004b0a <chk_lock+0xa6>
 8004ae8:	2312      	movs	r3, #18
 8004aea:	e00e      	b.n	8004b0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <chk_lock+0xa0>
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <chk_lock+0xb4>)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	4413      	add	r3, r2
 8004afa:	330c      	adds	r3, #12
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d101      	bne.n	8004b08 <chk_lock+0xa4>
 8004b04:	2310      	movs	r3, #16
 8004b06:	e000      	b.n	8004b0a <chk_lock+0xa6>
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000654 	.word	0x20000654

08004b1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e002      	b.n	8004b2e <enq_lock+0x12>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d806      	bhi.n	8004b42 <enq_lock+0x26>
 8004b34:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <enq_lock+0x40>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	4413      	add	r3, r2
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f2      	bne.n	8004b28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000654 	.word	0x20000654

08004b60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e01f      	b.n	8004bb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b70:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <inc_lock+0x118>)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	4413      	add	r3, r2
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d113      	bne.n	8004baa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b82:	4a3d      	ldr	r2, [pc, #244]	; (8004c78 <inc_lock+0x118>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	4413      	add	r3, r2
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d109      	bne.n	8004baa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <inc_lock+0x118>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d006      	beq.n	8004bb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d9dc      	bls.n	8004b70 <inc_lock+0x10>
 8004bb6:	e000      	b.n	8004bba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004bb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d132      	bne.n	8004c26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <inc_lock+0x6c>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d806      	bhi.n	8004be0 <inc_lock+0x80>
 8004bd2:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <inc_lock+0x118>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	4413      	add	r3, r2
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f2      	bne.n	8004bc6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d101      	bne.n	8004bea <inc_lock+0x8a>
 8004be6:	2300      	movs	r3, #0
 8004be8:	e040      	b.n	8004c6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4922      	ldr	r1, [pc, #136]	; (8004c78 <inc_lock+0x118>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	440b      	add	r3, r1
 8004bf6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	491e      	ldr	r1, [pc, #120]	; (8004c78 <inc_lock+0x118>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	440b      	add	r3, r1
 8004c04:	3304      	adds	r3, #4
 8004c06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	491a      	ldr	r1, [pc, #104]	; (8004c78 <inc_lock+0x118>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	440b      	add	r3, r1
 8004c14:	3308      	adds	r3, #8
 8004c16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <inc_lock+0x118>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4413      	add	r3, r2
 8004c20:	330c      	adds	r3, #12
 8004c22:	2200      	movs	r2, #0
 8004c24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <inc_lock+0xe0>
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <inc_lock+0x118>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	4413      	add	r3, r2
 8004c34:	330c      	adds	r3, #12
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <inc_lock+0xe0>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e015      	b.n	8004c6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d108      	bne.n	8004c58 <inc_lock+0xf8>
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <inc_lock+0x118>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	4413      	add	r3, r2
 8004c4e:	330c      	adds	r3, #12
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	e001      	b.n	8004c5c <inc_lock+0xfc>
 8004c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <inc_lock+0x118>)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	440b      	add	r3, r1
 8004c64:	330c      	adds	r3, #12
 8004c66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000654 	.word	0x20000654

08004c7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d825      	bhi.n	8004cdc <dec_lock+0x60>
		n = Files[i].ctr;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <dec_lock+0x74>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	4413      	add	r3, r2
 8004c98:	330c      	adds	r3, #12
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca4:	d101      	bne.n	8004caa <dec_lock+0x2e>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <dec_lock+0x3a>
 8004cb0:	89fb      	ldrh	r3, [r7, #14]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cb6:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <dec_lock+0x74>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	89fa      	ldrh	r2, [r7, #14]
 8004cc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <dec_lock+0x5a>
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <dec_lock+0x74>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	737b      	strb	r3, [r7, #13]
 8004cda:	e001      	b.n	8004ce0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cdc:	2302      	movs	r3, #2
 8004cde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004ce0:	7b7b      	ldrb	r3, [r7, #13]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000654 	.word	0x20000654

08004cf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e010      	b.n	8004d24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d02:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <clear_lock+0x44>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	4413      	add	r3, r2
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d105      	bne.n	8004d1e <clear_lock+0x2a>
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <clear_lock+0x44>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4413      	add	r3, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d9eb      	bls.n	8004d02 <clear_lock+0xe>
	}
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20000654 	.word	0x20000654

08004d3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d034      	beq.n	8004dba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7858      	ldrb	r0, [r3, #1]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d60:	2301      	movs	r3, #1
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	f7ff fd40 	bl	80047e8 <disk_write>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
 8004d72:	e022      	b.n	8004dba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	1ad2      	subs	r2, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d217      	bcs.n	8004dba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	e010      	b.n	8004db4 <sync_window+0x78>
					wsect += fs->fsize;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7858      	ldrb	r0, [r3, #1]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004da6:	2301      	movs	r3, #1
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	f7ff fd1d 	bl	80047e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d8eb      	bhi.n	8004d92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d01b      	beq.n	8004e14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ffad 	bl	8004d3c <sync_window>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7858      	ldrb	r0, [r3, #1]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004df6:	2301      	movs	r3, #1
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	f7ff fcd5 	bl	80047a8 <disk_read>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
 8004e08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ff87 	bl	8004d3c <sync_window>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d158      	bne.n	8004eea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d148      	bne.n	8004ed2 <sync_fs+0xb2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d144      	bne.n	8004ed2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3330      	adds	r3, #48	; 0x30
 8004e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fda9 	bl	80049aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3330      	adds	r3, #48	; 0x30
 8004e5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fd38 	bl	80048da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3330      	adds	r3, #48	; 0x30
 8004e6e:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <sync_fs+0xd4>)
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fd4d 	bl	8004910 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3330      	adds	r3, #48	; 0x30
 8004e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e7e:	491e      	ldr	r1, [pc, #120]	; (8004ef8 <sync_fs+0xd8>)
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fd45 	bl	8004910 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3330      	adds	r3, #48	; 0x30
 8004e8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7ff fd3b 	bl	8004910 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3330      	adds	r3, #48	; 0x30
 8004e9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7ff fd31 	bl	8004910 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7858      	ldrb	r0, [r3, #1]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f7ff fc8e 	bl	80047e8 <disk_write>
			fs->fsi_flag = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	785b      	ldrb	r3, [r3, #1]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fca4 	bl	8004828 <disk_ioctl>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <sync_fs+0xca>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	41615252 	.word	0x41615252
 8004ef8:	61417272 	.word	0x61417272

08004efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3b02      	subs	r3, #2
 8004f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	3b02      	subs	r3, #2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d301      	bcc.n	8004f1c <clust2sect+0x20>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e008      	b.n	8004f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	461a      	mov	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	fb03 f202 	mul.w	r2, r3, r2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	4413      	add	r3, r2
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d904      	bls.n	8004f5a <get_fat+0x20>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e08f      	b.n	8005080 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d062      	beq.n	8005034 <get_fat+0xfa>
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	dc7c      	bgt.n	800506c <get_fat+0x132>
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d002      	beq.n	8004f7c <get_fat+0x42>
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d042      	beq.n	8005000 <get_fat+0xc6>
 8004f7a:	e077      	b.n	800506c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	0a5b      	lsrs	r3, r3, #9
 8004f92:	4413      	add	r3, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f7ff ff14 	bl	8004dc4 <move_window>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d167      	bne.n	8005072 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	60fa      	str	r2, [r7, #12]
 8004fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0a5b      	lsrs	r3, r3, #9
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6938      	ldr	r0, [r7, #16]
 8004fc4:	f7ff fefe 	bl	8004dc4 <move_window>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d153      	bne.n	8005076 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <get_fat+0xbc>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	e002      	b.n	8004ffc <get_fat+0xc2>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	617b      	str	r3, [r7, #20]
			break;
 8004ffe:	e03f      	b.n	8005080 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	4413      	add	r3, r2
 800500a:	4619      	mov	r1, r3
 800500c:	6938      	ldr	r0, [r7, #16]
 800500e:	f7ff fed9 	bl	8004dc4 <move_window>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d130      	bne.n	800507a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005026:	4413      	add	r3, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc1b 	bl	8004864 <ld_word>
 800502e:	4603      	mov	r3, r0
 8005030:	617b      	str	r3, [r7, #20]
			break;
 8005032:	e025      	b.n	8005080 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	4413      	add	r3, r2
 800503e:	4619      	mov	r1, r3
 8005040:	6938      	ldr	r0, [r7, #16]
 8005042:	f7ff febf 	bl	8004dc4 <move_window>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d118      	bne.n	800507e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800505a:	4413      	add	r3, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fc19 	bl	8004894 <ld_dword>
 8005062:	4603      	mov	r3, r0
 8005064:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005068:	617b      	str	r3, [r7, #20]
			break;
 800506a:	e009      	b.n	8005080 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e006      	b.n	8005080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005072:	bf00      	nop
 8005074:	e004      	b.n	8005080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800507e:	bf00      	nop
		}
	}

	return val;
 8005080:	697b      	ldr	r3, [r7, #20]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800508a:	b590      	push	{r4, r7, lr}
 800508c:	b089      	sub	sp, #36	; 0x24
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005096:	2302      	movs	r3, #2
 8005098:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b01      	cmp	r3, #1
 800509e:	f240 80d2 	bls.w	8005246 <put_fat+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	f080 80cc 	bcs.w	8005246 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	f000 8096 	beq.w	80051e4 <put_fat+0x15a>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	f300 80cd 	bgt.w	8005258 <put_fat+0x1ce>
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d002      	beq.n	80050c8 <put_fat+0x3e>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d06e      	beq.n	80051a4 <put_fat+0x11a>
 80050c6:	e0c7      	b.n	8005258 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4413      	add	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1a      	ldr	r2, [r3, #32]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	4413      	add	r3, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fe6e 	bl	8004dc4 <move_window>
 80050e8:	4603      	mov	r3, r0
 80050ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050ec:	7ffb      	ldrb	r3, [r7, #31]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 80ab 	bne.w	800524a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	61b9      	str	r1, [r7, #24]
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	4413      	add	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <put_fat+0xa4>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b25b      	sxtb	r3, r3
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b25a      	sxtb	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	b25b      	sxtb	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b25b      	sxtb	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e001      	b.n	8005132 <put_fat+0xa8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1a      	ldr	r2, [r3, #32]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	0a5b      	lsrs	r3, r3, #9
 8005144:	4413      	add	r3, r2
 8005146:	4619      	mov	r1, r3
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff fe3b 	bl	8004dc4 <move_window>
 800514e:	4603      	mov	r3, r0
 8005150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005152:	7ffb      	ldrb	r3, [r7, #31]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d17a      	bne.n	800524e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	4413      	add	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <put_fat+0xf0>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	b2db      	uxtb	r3, r3
 8005178:	e00e      	b.n	8005198 <put_fat+0x10e>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b25b      	sxtb	r3, r3
 8005180:	f023 030f 	bic.w	r3, r3, #15
 8005184:	b25a      	sxtb	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	b25b      	sxtb	r3, r3
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	b25b      	sxtb	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b25b      	sxtb	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	70da      	strb	r2, [r3, #3]
			break;
 80051a2:	e059      	b.n	8005258 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	4413      	add	r3, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fe07 	bl	8004dc4 <move_window>
 80051b6:	4603      	mov	r3, r0
 80051b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d148      	bne.n	8005252 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80051ce:	4413      	add	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	b292      	uxth	r2, r2
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fb7f 	bl	80048da <st_word>
			fs->wflag = 1;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	70da      	strb	r2, [r3, #3]
			break;
 80051e2:	e039      	b.n	8005258 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	4413      	add	r3, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fde7 	bl	8004dc4 <move_window>
 80051f6:	4603      	mov	r3, r0
 80051f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d12a      	bne.n	8005256 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005214:	4413      	add	r3, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fb3c 	bl	8004894 <ld_dword>
 800521c:	4603      	mov	r3, r0
 800521e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005222:	4323      	orrs	r3, r4
 8005224:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005234:	4413      	add	r3, r2
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fb69 	bl	8004910 <st_dword>
			fs->wflag = 1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	70da      	strb	r2, [r3, #3]
			break;
 8005244:	e008      	b.n	8005258 <put_fat+0x1ce>
		}
	}
 8005246:	bf00      	nop
 8005248:	e006      	b.n	8005258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800524a:	bf00      	nop
 800524c:	e004      	b.n	8005258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800524e:	bf00      	nop
 8005250:	e002      	b.n	8005258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005256:	bf00      	nop
	return res;
 8005258:	7ffb      	ldrb	r3, [r7, #31]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}

08005262 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b088      	sub	sp, #32
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d904      	bls.n	8005288 <remove_chain+0x26>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	d301      	bcc.n	800528c <remove_chain+0x2a>
 8005288:	2302      	movs	r3, #2
 800528a:	e04b      	b.n	8005324 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	69b8      	ldr	r0, [r7, #24]
 800529a:	f7ff fef6 	bl	800508a <put_fat>
 800529e:	4603      	mov	r3, r0
 80052a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052a2:	7ffb      	ldrb	r3, [r7, #31]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <remove_chain+0x4a>
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
 80052aa:	e03b      	b.n	8005324 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fe43 	bl	8004f3a <get_fat>
 80052b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d031      	beq.n	8005320 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <remove_chain+0x64>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e02e      	b.n	8005324 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d101      	bne.n	80052d2 <remove_chain+0x70>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e028      	b.n	8005324 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80052d2:	2200      	movs	r2, #0
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f7ff fed7 	bl	800508a <put_fat>
 80052dc:	4603      	mov	r3, r0
 80052de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <remove_chain+0x88>
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	e01c      	b.n	8005324 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	3b02      	subs	r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d20b      	bcs.n	8005310 <remove_chain+0xae>
			fs->free_clst++;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	791b      	ldrb	r3, [r3, #4]
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3c6      	bcc.n	80052ac <remove_chain+0x4a>
 800531e:	e000      	b.n	8005322 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005320:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <create_chain+0x2c>
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	429a      	cmp	r2, r3
 8005356:	d31b      	bcc.n	8005390 <create_chain+0x64>
 8005358:	2301      	movs	r3, #1
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e018      	b.n	8005390 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fdea 	bl	8004f3a <get_fat>
 8005366:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d801      	bhi.n	8005372 <create_chain+0x46>
 800536e:	2301      	movs	r3, #1
 8005370:	e070      	b.n	8005454 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d101      	bne.n	800537e <create_chain+0x52>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	e06a      	b.n	8005454 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	429a      	cmp	r2, r3
 8005386:	d201      	bcs.n	800538c <create_chain+0x60>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	e063      	b.n	8005454 <create_chain+0x128>
		scl = clst;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3301      	adds	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d307      	bcc.n	80053b4 <create_chain+0x88>
				ncl = 2;
 80053a4:	2302      	movs	r3, #2
 80053a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d901      	bls.n	80053b4 <create_chain+0x88>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e04f      	b.n	8005454 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fdbf 	bl	8004f3a <get_fat>
 80053bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d003      	beq.n	80053d2 <create_chain+0xa6>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d101      	bne.n	80053d6 <create_chain+0xaa>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e03e      	b.n	8005454 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d1da      	bne.n	8005394 <create_chain+0x68>
 80053de:	2300      	movs	r3, #0
 80053e0:	e038      	b.n	8005454 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	69f9      	ldr	r1, [r7, #28]
 80053ea:	6938      	ldr	r0, [r7, #16]
 80053ec:	f7ff fe4d 	bl	800508a <put_fat>
 80053f0:	4603      	mov	r3, r0
 80053f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <create_chain+0xe2>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f7ff fe40 	bl	800508a <put_fat>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d116      	bne.n	8005442 <create_chain+0x116>
		fs->last_clst = ncl;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	3b02      	subs	r3, #2
 8005424:	429a      	cmp	r2, r3
 8005426:	d804      	bhi.n	8005432 <create_chain+0x106>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	791b      	ldrb	r3, [r3, #4]
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	711a      	strb	r2, [r3, #4]
 8005440:	e007      	b.n	8005452 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <create_chain+0x122>
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
 800544c:	e000      	b.n	8005450 <create_chain+0x124>
 800544e:	2301      	movs	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005452:	69fb      	ldr	r3, [r7, #28]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	3304      	adds	r3, #4
 8005472:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	8952      	ldrh	r2, [r2, #10]
 800547c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005480:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	613a      	str	r2, [r7, #16]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <clmt_clust+0x3a>
 8005492:	2300      	movs	r3, #0
 8005494:	e010      	b.n	80054b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d307      	bcc.n	80054ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3304      	adds	r3, #4
 80054aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054ac:	e7e9      	b.n	8005482 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80054ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054da:	d204      	bcs.n	80054e6 <dir_sdi+0x22>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80054e6:	2302      	movs	r3, #2
 80054e8:	e063      	b.n	80055b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <dir_sdi+0x46>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d902      	bls.n	800550a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10c      	bne.n	800552a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	8912      	ldrh	r2, [r2, #8]
 8005518:	4293      	cmp	r3, r2
 800551a:	d301      	bcc.n	8005520 <dir_sdi+0x5c>
 800551c:	2302      	movs	r3, #2
 800551e:	e048      	b.n	80055b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	61da      	str	r2, [r3, #28]
 8005528:	e029      	b.n	800557e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	895b      	ldrh	r3, [r3, #10]
 800552e:	025b      	lsls	r3, r3, #9
 8005530:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005532:	e019      	b.n	8005568 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fcfe 	bl	8004f3a <get_fat>
 800553e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d101      	bne.n	800554c <dir_sdi+0x88>
 8005548:	2301      	movs	r3, #1
 800554a:	e032      	b.n	80055b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d904      	bls.n	800555c <dir_sdi+0x98>
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	429a      	cmp	r2, r3
 800555a:	d301      	bcc.n	8005560 <dir_sdi+0x9c>
 800555c:	2302      	movs	r3, #2
 800555e:	e028      	b.n	80055b2 <dir_sdi+0xee>
			ofs -= csz;
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d2e1      	bcs.n	8005534 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005570:	6979      	ldr	r1, [r7, #20]
 8005572:	6938      	ldr	r0, [r7, #16]
 8005574:	f7ff fcc2 	bl	8004efc <clust2sect>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <dir_sdi+0xcc>
 800558c:	2302      	movs	r3, #2
 800558e:	e010      	b.n	80055b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	0a5b      	lsrs	r3, r3, #9
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	3320      	adds	r3, #32
 80055d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <dir_next+0x28>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e0:	d301      	bcc.n	80055e6 <dir_next+0x2c>
 80055e2:	2304      	movs	r3, #4
 80055e4:	e0aa      	b.n	800573c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 8098 	bne.w	8005722 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	8912      	ldrh	r2, [r2, #8]
 800560c:	4293      	cmp	r3, r2
 800560e:	f0c0 8088 	bcc.w	8005722 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	61da      	str	r2, [r3, #28]
 8005618:	2304      	movs	r3, #4
 800561a:	e08f      	b.n	800573c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	0a5b      	lsrs	r3, r3, #9
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	8952      	ldrh	r2, [r2, #10]
 8005624:	3a01      	subs	r2, #1
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d17a      	bne.n	8005722 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7ff fc80 	bl	8004f3a <get_fat>
 800563a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d801      	bhi.n	8005646 <dir_next+0x8c>
 8005642:	2302      	movs	r3, #2
 8005644:	e07a      	b.n	800573c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d101      	bne.n	8005652 <dir_next+0x98>
 800564e:	2301      	movs	r3, #1
 8005650:	e074      	b.n	800573c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	429a      	cmp	r2, r3
 800565a:	d358      	bcc.n	800570e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
 8005668:	2304      	movs	r3, #4
 800566a:	e067      	b.n	800573c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff fe59 	bl	800532c <create_chain>
 800567a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <dir_next+0xcc>
 8005682:	2307      	movs	r3, #7
 8005684:	e05a      	b.n	800573c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <dir_next+0xd6>
 800568c:	2302      	movs	r3, #2
 800568e:	e055      	b.n	800573c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d101      	bne.n	800569c <dir_next+0xe2>
 8005698:	2301      	movs	r3, #1
 800569a:	e04f      	b.n	800573c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fb4d 	bl	8004d3c <sync_window>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <dir_next+0xf2>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e047      	b.n	800573c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3330      	adds	r3, #48	; 0x30
 80056b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff f977 	bl	80049aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	6979      	ldr	r1, [r7, #20]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fc1a 	bl	8004efc <clust2sect>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80056ce:	e012      	b.n	80056f6 <dir_next+0x13c>
						fs->wflag = 1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fb30 	bl	8004d3c <sync_window>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <dir_next+0x12c>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e02a      	b.n	800573c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	895b      	ldrh	r3, [r3, #10]
 80056fa:	461a      	mov	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4293      	cmp	r3, r2
 8005700:	d3e6      	bcc.n	80056d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad2      	subs	r2, r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fbf0 	bl	8004efc <clust2sect>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005754:	2100      	movs	r1, #0
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff feb4 	bl	80054c4 <dir_sdi>
 800575c:	4603      	mov	r3, r0
 800575e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d12b      	bne.n	80057be <dir_alloc+0x7a>
		n = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4619      	mov	r1, r3
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff fb27 	bl	8004dc4 <move_window>
 8005776:	4603      	mov	r3, r0
 8005778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11d      	bne.n	80057bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2be5      	cmp	r3, #229	; 0xe5
 8005788:	d004      	beq.n	8005794 <dir_alloc+0x50>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3301      	adds	r3, #1
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d102      	bne.n	80057a8 <dir_alloc+0x64>
 80057a2:	e00c      	b.n	80057be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80057a8:	2101      	movs	r1, #1
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ff05 	bl	80055ba <dir_next>
 80057b0:	4603      	mov	r3, r0
 80057b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0d7      	beq.n	800576a <dir_alloc+0x26>
 80057ba:	e000      	b.n	80057be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80057bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d101      	bne.n	80057c8 <dir_alloc+0x84>
 80057c4:	2307      	movs	r3, #7
 80057c6:	75fb      	strb	r3, [r7, #23]
	return res;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	331a      	adds	r3, #26
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f83f 	bl	8004864 <ld_word>
 80057e6:	4603      	mov	r3, r0
 80057e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d109      	bne.n	8005806 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff f834 	bl	8004864 <ld_word>
 80057fc:	4603      	mov	r3, r0
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005806:	68fb      	ldr	r3, [r7, #12]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	331a      	adds	r3, #26
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	b292      	uxth	r2, r2
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff f857 	bl	80048da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d109      	bne.n	8005848 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f103 0214 	add.w	r2, r3, #20
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b29b      	uxth	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f7ff f849 	bl	80048da <st_word>
	}
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800585a:	2304      	movs	r3, #4
 800585c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005864:	e03c      	b.n	80058e0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4619      	mov	r1, r3
 800586c:	6938      	ldr	r0, [r7, #16]
 800586e:	f7ff faa9 	bl	8004dc4 <move_window>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d136      	bne.n	80058ea <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800588a:	2304      	movs	r3, #4
 800588c:	75fb      	strb	r3, [r7, #23]
 800588e:	e031      	b.n	80058f4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	330b      	adds	r3, #11
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800589c:	73bb      	strb	r3, [r7, #14]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7bba      	ldrb	r2, [r7, #14]
 80058a2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2be5      	cmp	r3, #229	; 0xe5
 80058a8:	d011      	beq.n	80058ce <dir_read+0x7e>
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b2e      	cmp	r3, #46	; 0x2e
 80058ae:	d00e      	beq.n	80058ce <dir_read+0x7e>
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d00b      	beq.n	80058ce <dir_read+0x7e>
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	f023 0320 	bic.w	r3, r3, #32
 80058bc:	2b08      	cmp	r3, #8
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00f      	beq.n	80058ee <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80058ce:	2100      	movs	r1, #0
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fe72 	bl	80055ba <dir_next>
 80058d6:	4603      	mov	r3, r0
 80058d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d108      	bne.n	80058f2 <dir_read+0xa2>
	while (dp->sect) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1be      	bne.n	8005866 <dir_read+0x16>
 80058e8:	e004      	b.n	80058f4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <dir_read+0xa4>
				break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80058f2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <dir_read+0xb0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	61da      	str	r2, [r3, #28]
	return res;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fdd2 	bl	80054c4 <dir_sdi>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <dir_find+0x24>
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	e03e      	b.n	80059ac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	4619      	mov	r1, r3
 8005934:	6938      	ldr	r0, [r7, #16]
 8005936:	f7ff fa45 	bl	8004dc4 <move_window>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d12f      	bne.n	80059a4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <dir_find+0x4e>
 8005952:	2304      	movs	r3, #4
 8005954:	75fb      	strb	r3, [r7, #23]
 8005956:	e028      	b.n	80059aa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	330b      	adds	r3, #11
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005964:	b2da      	uxtb	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	330b      	adds	r3, #11
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <dir_find+0x86>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a18      	ldr	r0, [r3, #32]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3324      	adds	r3, #36	; 0x24
 8005982:	220b      	movs	r2, #11
 8005984:	4619      	mov	r1, r3
 8005986:	f7ff f82b 	bl	80049e0 <mem_cmp>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005990:	2100      	movs	r1, #0
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe11 	bl	80055ba <dir_next>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0c5      	beq.n	800592e <dir_find+0x24>
 80059a2:	e002      	b.n	80059aa <dir_find+0xa0>
		if (res != FR_OK) break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80059a8:	bf00      	nop

	return res;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80059c2:	2101      	movs	r1, #1
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff febd 	bl	8005744 <dir_alloc>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11c      	bne.n	8005a0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4619      	mov	r1, r3
 80059da:	68b8      	ldr	r0, [r7, #8]
 80059dc:	f7ff f9f2 	bl	8004dc4 <move_window>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d111      	bne.n	8005a0e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	2220      	movs	r2, #32
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe ffd9 	bl	80049aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a18      	ldr	r0, [r3, #32]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	220b      	movs	r2, #11
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7fe ffb0 	bl	8004968 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff f9c9 	bl	8004dc4 <move_window>
 8005a32:	4603      	mov	r3, r0
 8005a34:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	22e5      	movs	r2, #229	; 0xe5
 8005a42:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d04e      	beq.n	8005b0a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005a74:	e021      	b.n	8005aba <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	6179      	str	r1, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d100      	bne.n	8005a8e <get_fileinfo+0x3a>
 8005a8c:	e015      	b.n	8005aba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	d101      	bne.n	8005a98 <get_fileinfo+0x44>
 8005a94:	23e5      	movs	r3, #229	; 0xe5
 8005a96:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d106      	bne.n	8005aac <get_fileinfo+0x58>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	613a      	str	r2, [r7, #16]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	222e      	movs	r2, #46	; 0x2e
 8005aaa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	613a      	str	r2, [r7, #16]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b0a      	cmp	r3, #10
 8005abe:	d9da      	bls.n	8005a76 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3309      	adds	r3, #9
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	7ada      	ldrb	r2, [r3, #11]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	331c      	adds	r3, #28
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fed9 	bl	8004894 <ld_dword>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	3316      	adds	r3, #22
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fed0 	bl	8004894 <ld_dword>
 8005af4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	80da      	strh	r2, [r3, #6]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	809a      	strh	r2, [r3, #4]
 8005b08:	e000      	b.n	8005b0c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005b0a:	bf00      	nop
}
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005b2a:	220b      	movs	r2, #11
 8005b2c:	2120      	movs	r1, #32
 8005b2e:	68b8      	ldr	r0, [r7, #8]
 8005b30:	f7fe ff3b 	bl	80049aa <mem_set>
	si = i = 0; ni = 8;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	61fa      	str	r2, [r7, #28]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005b4e:	7efb      	ldrb	r3, [r7, #27]
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d94e      	bls.n	8005bf2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005b54:	7efb      	ldrb	r3, [r7, #27]
 8005b56:	2b2f      	cmp	r3, #47	; 0x2f
 8005b58:	d006      	beq.n	8005b68 <create_name+0x54>
 8005b5a:	7efb      	ldrb	r3, [r7, #27]
 8005b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b5e:	d110      	bne.n	8005b82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b60:	e002      	b.n	8005b68 <create_name+0x54>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3301      	adds	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b2f      	cmp	r3, #47	; 0x2f
 8005b72:	d0f6      	beq.n	8005b62 <create_name+0x4e>
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b7e:	d0f0      	beq.n	8005b62 <create_name+0x4e>
			break;
 8005b80:	e038      	b.n	8005bf4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005b82:	7efb      	ldrb	r3, [r7, #27]
 8005b84:	2b2e      	cmp	r3, #46	; 0x2e
 8005b86:	d003      	beq.n	8005b90 <create_name+0x7c>
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d30c      	bcc.n	8005baa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b0b      	cmp	r3, #11
 8005b94:	d002      	beq.n	8005b9c <create_name+0x88>
 8005b96:	7efb      	ldrb	r3, [r7, #27]
 8005b98:	2b2e      	cmp	r3, #46	; 0x2e
 8005b9a:	d001      	beq.n	8005ba0 <create_name+0x8c>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	e044      	b.n	8005c2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	230b      	movs	r3, #11
 8005ba6:	617b      	str	r3, [r7, #20]
			continue;
 8005ba8:	e022      	b.n	8005bf0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005baa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da04      	bge.n	8005bbc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005bb2:	7efb      	ldrb	r3, [r7, #27]
 8005bb4:	3b80      	subs	r3, #128	; 0x80
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <create_name+0x120>)
 8005bb8:	5cd3      	ldrb	r3, [r2, r3]
 8005bba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005bbc:	7efb      	ldrb	r3, [r7, #27]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	481d      	ldr	r0, [pc, #116]	; (8005c38 <create_name+0x124>)
 8005bc2:	f7fe ff34 	bl	8004a2e <chk_chr>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <create_name+0xbc>
 8005bcc:	2306      	movs	r3, #6
 8005bce:	e02c      	b.n	8005c2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005bd0:	7efb      	ldrb	r3, [r7, #27]
 8005bd2:	2b60      	cmp	r3, #96	; 0x60
 8005bd4:	d905      	bls.n	8005be2 <create_name+0xce>
 8005bd6:	7efb      	ldrb	r3, [r7, #27]
 8005bd8:	2b7a      	cmp	r3, #122	; 0x7a
 8005bda:	d802      	bhi.n	8005be2 <create_name+0xce>
 8005bdc:	7efb      	ldrb	r3, [r7, #27]
 8005bde:	3b20      	subs	r3, #32
 8005be0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	613a      	str	r2, [r7, #16]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4413      	add	r3, r2
 8005bec:	7efa      	ldrb	r2, [r7, #27]
 8005bee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005bf0:	e7a6      	b.n	8005b40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bf2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <create_name+0xf4>
 8005c04:	2306      	movs	r3, #6
 8005c06:	e010      	b.n	8005c2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2be5      	cmp	r3, #229	; 0xe5
 8005c0e:	d102      	bne.n	8005c16 <create_name+0x102>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2205      	movs	r2, #5
 8005c14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005c16:	7efb      	ldrb	r3, [r7, #27]
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d801      	bhi.n	8005c20 <create_name+0x10c>
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	e000      	b.n	8005c22 <create_name+0x10e>
 8005c20:	2200      	movs	r2, #0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	330b      	adds	r3, #11
 8005c26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	08007e04 	.word	0x08007e04
 8005c38:	08007d94 	.word	0x08007d94

08005c3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c50:	e002      	b.n	8005c58 <follow_path+0x1c>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c5e:	d0f8      	beq.n	8005c52 <follow_path+0x16>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b5c      	cmp	r3, #92	; 0x5c
 8005c66:	d0f4      	beq.n	8005c52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b1f      	cmp	r3, #31
 8005c74:	d80a      	bhi.n	8005c8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005c7e:	2100      	movs	r1, #0
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fc1f 	bl	80054c4 <dir_sdi>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]
 8005c8a:	e043      	b.n	8005d14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff3f 	bl	8005b14 <create_name>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d134      	bne.n	8005d0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fe32 	bl	800590a <dir_find>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005cb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d127      	bne.n	8005d0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d122      	bne.n	8005d0e <follow_path+0xd2>
 8005cc8:	2305      	movs	r3, #5
 8005cca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ccc:	e01f      	b.n	8005d0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11c      	bne.n	8005d12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	799b      	ldrb	r3, [r3, #6]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ce4:	2305      	movs	r3, #5
 8005ce6:	75fb      	strb	r3, [r7, #23]
 8005ce8:	e014      	b.n	8005d14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff fd68 	bl	80057d2 <ld_clust>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d08:	e7c0      	b.n	8005c8c <follow_path+0x50>
			if (res != FR_OK) break;
 8005d0a:	bf00      	nop
 8005d0c:	e002      	b.n	8005d14 <follow_path+0xd8>
				break;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d12:	bf00      	nop
			}
		}
	}

	return res;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b087      	sub	sp, #28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d031      	beq.n	8005d98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e002      	b.n	8005d42 <get_ldnumber+0x24>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d903      	bls.n	8005d52 <get_ldnumber+0x34>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b3a      	cmp	r3, #58	; 0x3a
 8005d50:	d1f4      	bne.n	8005d3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b3a      	cmp	r3, #58	; 0x3a
 8005d58:	d11c      	bne.n	8005d94 <get_ldnumber+0x76>
			tp = *path;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	60fa      	str	r2, [r7, #12]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	3b30      	subs	r3, #48	; 0x30
 8005d6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d80e      	bhi.n	8005d90 <get_ldnumber+0x72>
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d10a      	bne.n	8005d90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <get_ldnumber+0x72>
					vol = (int)i;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3301      	adds	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	e002      	b.n	8005d9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d98:	693b      	ldr	r3, [r7, #16]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	70da      	strb	r2, [r3, #3]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fe fffe 	bl	8004dc4 <move_window>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <check_fs+0x2a>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	e038      	b.n	8005e44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3330      	adds	r3, #48	; 0x30
 8005dd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fd42 	bl	8004864 <ld_word>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <check_fs+0x48>
 8005dec:	2303      	movs	r3, #3
 8005dee:	e029      	b.n	8005e44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005df6:	2be9      	cmp	r3, #233	; 0xe9
 8005df8:	d009      	beq.n	8005e0e <check_fs+0x66>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e00:	2beb      	cmp	r3, #235	; 0xeb
 8005e02:	d11e      	bne.n	8005e42 <check_fs+0x9a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e0a:	2b90      	cmp	r3, #144	; 0x90
 8005e0c:	d119      	bne.n	8005e42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3330      	adds	r3, #48	; 0x30
 8005e12:	3336      	adds	r3, #54	; 0x36
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fd3d 	bl	8004894 <ld_dword>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <check_fs+0xa4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <check_fs+0x82>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e00c      	b.n	8005e44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3330      	adds	r3, #48	; 0x30
 8005e2e:	3352      	adds	r3, #82	; 0x52
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fd2f 	bl	8004894 <ld_dword>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4a05      	ldr	r2, [pc, #20]	; (8005e50 <check_fs+0xa8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <check_fs+0x9a>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e42:	2302      	movs	r3, #2
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	00544146 	.word	0x00544146
 8005e50:	33544146 	.word	0x33544146

08005e54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b096      	sub	sp, #88	; 0x58
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff ff58 	bl	8005d1e <get_ldnumber>
 8005e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da01      	bge.n	8005e7a <find_volume+0x26>
 8005e76:	230b      	movs	r3, #11
 8005e78:	e22d      	b.n	80062d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e7a:	4aa1      	ldr	r2, [pc, #644]	; (8006100 <find_volume+0x2ac>)
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <find_volume+0x3a>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	e223      	b.n	80062d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01a      	beq.n	8005eda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe fc3d 	bl	8004728 <disk_status>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <find_volume+0x82>
 8005ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	e1ff      	b.n	80062d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e1fd      	b.n	80062d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fc35 	bl	800475c <disk_initialize>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1e6      	b.n	80062d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <find_volume+0xca>
 8005f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	e1db      	b.n	80062d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f26:	f7ff ff3f 	bl	8005da8 <check_fs>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d149      	bne.n	8005fcc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f38:	2300      	movs	r3, #0
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3c:	e01e      	b.n	8005f7c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f4c:	4413      	add	r3, r2
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	3304      	adds	r3, #4
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d006      	beq.n	8005f68 <find_volume+0x114>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fc98 	bl	8004894 <ld_dword>
 8005f64:	4602      	mov	r2, r0
 8005f66:	e000      	b.n	8005f6a <find_volume+0x116>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	3358      	adds	r3, #88	; 0x58
 8005f70:	443b      	add	r3, r7
 8005f72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	3301      	adds	r3, #1
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d9dd      	bls.n	8005f3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f82:	2300      	movs	r3, #0
 8005f84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <find_volume+0x13e>
 8005f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	3358      	adds	r3, #88	; 0x58
 8005f98:	443b      	add	r3, r7
 8005f9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <find_volume+0x15e>
 8005fa6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005faa:	f7ff fefd 	bl	8005da8 <check_fs>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	e000      	b.n	8005fb4 <find_volume+0x160>
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d905      	bls.n	8005fcc <find_volume+0x178>
 8005fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d9e2      	bls.n	8005f92 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d101      	bne.n	8005fd8 <find_volume+0x184>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e17e      	b.n	80062d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d901      	bls.n	8005fe4 <find_volume+0x190>
 8005fe0:	230d      	movs	r3, #13
 8005fe2:	e178      	b.n	80062d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	3330      	adds	r3, #48	; 0x30
 8005fe8:	330b      	adds	r3, #11
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fc3a 	bl	8004864 <ld_word>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff6:	d001      	beq.n	8005ffc <find_volume+0x1a8>
 8005ff8:	230d      	movs	r3, #13
 8005ffa:	e16c      	b.n	80062d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	3330      	adds	r3, #48	; 0x30
 8006000:	3316      	adds	r3, #22
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe fc2e 	bl	8004864 <ld_word>
 8006008:	4603      	mov	r3, r0
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <find_volume+0x1cc>
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	3330      	adds	r3, #48	; 0x30
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fc3b 	bl	8004894 <ld_dword>
 800601e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006024:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	789b      	ldrb	r3, [r3, #2]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d005      	beq.n	8006044 <find_volume+0x1f0>
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	789b      	ldrb	r3, [r3, #2]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d001      	beq.n	8006044 <find_volume+0x1f0>
 8006040:	230d      	movs	r3, #13
 8006042:	e148      	b.n	80062d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	461a      	mov	r2, r3
 800604a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604c:	fb02 f303 	mul.w	r3, r2, r3
 8006050:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b29a      	uxth	r2, r3
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	895b      	ldrh	r3, [r3, #10]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <find_volume+0x224>
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	895b      	ldrh	r3, [r3, #10]
 800606a:	461a      	mov	r2, r3
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	895b      	ldrh	r3, [r3, #10]
 8006070:	3b01      	subs	r3, #1
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <find_volume+0x228>
 8006078:	230d      	movs	r3, #13
 800607a:	e12c      	b.n	80062d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	3330      	adds	r3, #48	; 0x30
 8006080:	3311      	adds	r3, #17
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fbee 	bl	8004864 <ld_word>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	891b      	ldrh	r3, [r3, #8]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <find_volume+0x24e>
 800609e:	230d      	movs	r3, #13
 80060a0:	e119      	b.n	80062d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	3330      	adds	r3, #48	; 0x30
 80060a6:	3313      	adds	r3, #19
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fbdb 	bl	8004864 <ld_word>
 80060ae:	4603      	mov	r3, r0
 80060b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80060b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <find_volume+0x272>
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	3330      	adds	r3, #48	; 0x30
 80060bc:	3320      	adds	r3, #32
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fbe8 	bl	8004894 <ld_dword>
 80060c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	3330      	adds	r3, #48	; 0x30
 80060ca:	330e      	adds	r3, #14
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe fbc9 	bl	8004864 <ld_word>
 80060d2:	4603      	mov	r3, r0
 80060d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <find_volume+0x28c>
 80060dc:	230d      	movs	r3, #13
 80060de:	e0fa      	b.n	80062d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e4:	4413      	add	r3, r2
 80060e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e8:	8912      	ldrh	r2, [r2, #8]
 80060ea:	0912      	lsrs	r2, r2, #4
 80060ec:	b292      	uxth	r2, r2
 80060ee:	4413      	add	r3, r2
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d204      	bcs.n	8006104 <find_volume+0x2b0>
 80060fa:	230d      	movs	r3, #13
 80060fc:	e0eb      	b.n	80062d6 <find_volume+0x482>
 80060fe:	bf00      	nop
 8006100:	2000064c 	.word	0x2000064c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610c:	8952      	ldrh	r2, [r2, #10]
 800610e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <find_volume+0x2ca>
 800611a:	230d      	movs	r3, #13
 800611c:	e0db      	b.n	80062d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800611e:	2303      	movs	r3, #3
 8006120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800612a:	4293      	cmp	r3, r2
 800612c:	d802      	bhi.n	8006134 <find_volume+0x2e0>
 800612e:	2302      	movs	r3, #2
 8006130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	f640 72f5 	movw	r2, #4085	; 0xff5
 800613a:	4293      	cmp	r3, r2
 800613c:	d802      	bhi.n	8006144 <find_volume+0x2f0>
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006150:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006152:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006156:	441a      	add	r2, r3
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800615c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	441a      	add	r2, r3
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006166:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800616a:	2b03      	cmp	r3, #3
 800616c:	d11e      	bne.n	80061ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	3330      	adds	r3, #48	; 0x30
 8006172:	332a      	adds	r3, #42	; 0x2a
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fb75 	bl	8004864 <ld_word>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <find_volume+0x330>
 8006180:	230d      	movs	r3, #13
 8006182:	e0a8      	b.n	80062d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	891b      	ldrh	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <find_volume+0x33c>
 800618c:	230d      	movs	r3, #13
 800618e:	e0a2      	b.n	80062d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	3330      	adds	r3, #48	; 0x30
 8006194:	332c      	adds	r3, #44	; 0x2c
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fb7c 	bl	8004894 <ld_dword>
 800619c:	4602      	mov	r2, r0
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	e01f      	b.n	80061ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	891b      	ldrh	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <find_volume+0x364>
 80061b4:	230d      	movs	r3, #13
 80061b6:	e08e      	b.n	80062d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061be:	441a      	add	r2, r3
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d103      	bne.n	80061d4 <find_volume+0x380>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	e00a      	b.n	80061ea <find_volume+0x396>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	695a      	ldr	r2, [r3, #20]
 80061d8:	4613      	mov	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4413      	add	r3, r2
 80061de:	085a      	lsrs	r2, r3, #1
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d201      	bcs.n	8006200 <find_volume+0x3ac>
 80061fc:	230d      	movs	r3, #13
 80061fe:	e06a      	b.n	80062d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	611a      	str	r2, [r3, #16]
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800621a:	2b03      	cmp	r3, #3
 800621c:	d149      	bne.n	80062b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	3330      	adds	r3, #48	; 0x30
 8006222:	3330      	adds	r3, #48	; 0x30
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fb1d 	bl	8004864 <ld_word>
 800622a:	4603      	mov	r3, r0
 800622c:	2b01      	cmp	r3, #1
 800622e:	d140      	bne.n	80062b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	3301      	adds	r3, #1
 8006234:	4619      	mov	r1, r3
 8006236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006238:	f7fe fdc4 	bl	8004dc4 <move_window>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d137      	bne.n	80062b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	2200      	movs	r2, #0
 8006246:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	3330      	adds	r3, #48	; 0x30
 800624c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fb07 	bl	8004864 <ld_word>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800625e:	429a      	cmp	r2, r3
 8006260:	d127      	bne.n	80062b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	3330      	adds	r3, #48	; 0x30
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fb14 	bl	8004894 <ld_dword>
 800626c:	4603      	mov	r3, r0
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <find_volume+0x48c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d11e      	bne.n	80062b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	3330      	adds	r3, #48	; 0x30
 8006278:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe fb09 	bl	8004894 <ld_dword>
 8006282:	4603      	mov	r3, r0
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <find_volume+0x490>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d113      	bne.n	80062b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	3330      	adds	r3, #48	; 0x30
 800628e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fafe 	bl	8004894 <ld_dword>
 8006298:	4602      	mov	r2, r0
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	3330      	adds	r3, #48	; 0x30
 80062a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe faf4 	bl	8004894 <ld_dword>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80062b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <find_volume+0x494>)
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	3301      	adds	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <find_volume+0x494>)
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <find_volume+0x494>)
 80062c8:	881a      	ldrh	r2, [r3, #0]
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d0:	f7fe fd10 	bl	8004cf4 <clear_lock>
#endif
	return FR_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3758      	adds	r7, #88	; 0x58
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	41615252 	.word	0x41615252
 80062e4:	61417272 	.word	0x61417272
 80062e8:	20000650 	.word	0x20000650

080062ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062f6:	2309      	movs	r3, #9
 80062f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01c      	beq.n	800633a <validate+0x4e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d018      	beq.n	800633a <validate+0x4e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d013      	beq.n	800633a <validate+0x4e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	889a      	ldrh	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	88db      	ldrh	r3, [r3, #6]
 800631c:	429a      	cmp	r2, r3
 800631e:	d10c      	bne.n	800633a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe f9fe 	bl	8004728 <disk_status>
 800632c:	4603      	mov	r3, r0
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <validate+0x4e>
			res = FR_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <validate+0x5a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	e000      	b.n	8006348 <validate+0x5c>
 8006346:	2300      	movs	r3, #0
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	6013      	str	r3, [r2, #0]
	return res;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800636a:	f107 0310 	add.w	r3, r7, #16
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fcd5 	bl	8005d1e <get_ldnumber>
 8006374:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da01      	bge.n	8006380 <f_mount+0x28>
 800637c:	230b      	movs	r3, #11
 800637e:	e02b      	b.n	80063d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006380:	4a17      	ldr	r2, [pc, #92]	; (80063e0 <f_mount+0x88>)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006388:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006390:	69b8      	ldr	r0, [r7, #24]
 8006392:	f7fe fcaf 	bl	8004cf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	490d      	ldr	r1, [pc, #52]	; (80063e0 <f_mount+0x88>)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <f_mount+0x66>
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d001      	beq.n	80063c2 <f_mount+0x6a>
 80063be:	2300      	movs	r3, #0
 80063c0:	e00a      	b.n	80063d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063c2:	f107 010c 	add.w	r1, r7, #12
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	2200      	movs	r2, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fd41 	bl	8005e54 <find_volume>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2000064c 	.word	0x2000064c

080063e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b098      	sub	sp, #96	; 0x60
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <f_open+0x18>
 80063f8:	2309      	movs	r3, #9
 80063fa:	e1ad      	b.n	8006758 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006402:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006404:	79fa      	ldrb	r2, [r7, #7]
 8006406:	f107 0110 	add.w	r1, r7, #16
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fd20 	bl	8005e54 <find_volume>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800641a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8191 	bne.w	8006746 <f_open+0x362>
		dj.obj.fs = fs;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	f107 0314 	add.w	r3, r7, #20
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fc03 	bl	8005c3c <follow_path>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800643c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006440:	2b00      	cmp	r3, #0
 8006442:	d11a      	bne.n	800647a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006444:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006448:	b25b      	sxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	da03      	bge.n	8006456 <f_open+0x72>
				res = FR_INVALID_NAME;
 800644e:	2306      	movs	r3, #6
 8006450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006454:	e011      	b.n	800647a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe faf8 	bl	8004a64 <chk_lock>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	f003 031c 	and.w	r3, r3, #28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d07f      	beq.n	8006584 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006488:	2b00      	cmp	r3, #0
 800648a:	d017      	beq.n	80064bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800648c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006490:	2b04      	cmp	r3, #4
 8006492:	d10e      	bne.n	80064b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006494:	f7fe fb42 	bl	8004b1c <enq_lock>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <f_open+0xc8>
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fa86 	bl	80059b4 <dir_register>
 80064a8:	4603      	mov	r3, r0
 80064aa:	e000      	b.n	80064ae <f_open+0xca>
 80064ac:	2312      	movs	r3, #18
 80064ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	f043 0308 	orr.w	r3, r3, #8
 80064b8:	71fb      	strb	r3, [r7, #7]
 80064ba:	e010      	b.n	80064de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064bc:	7ebb      	ldrb	r3, [r7, #26]
 80064be:	f003 0311 	and.w	r3, r3, #17
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <f_open+0xea>
					res = FR_DENIED;
 80064c6:	2307      	movs	r3, #7
 80064c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80064cc:	e007      	b.n	80064de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <f_open+0xfa>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d168      	bne.n	80065b8 <f_open+0x1d4>
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d063      	beq.n	80065b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80064f0:	f7fd ffa0 	bl	8004434 <get_fattime>
 80064f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	330e      	adds	r3, #14
 80064fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fa07 	bl	8004910 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	3316      	adds	r3, #22
 8006506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fa01 	bl	8004910 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	330b      	adds	r3, #11
 8006512:	2220      	movs	r2, #32
 8006514:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff f958 	bl	80057d2 <ld_clust>
 8006522:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006528:	2200      	movs	r2, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff f970 	bl	8005810 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	331c      	adds	r3, #28
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe f9ea 	bl	8004910 <st_dword>
					fs->wflag = 1;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2201      	movs	r2, #1
 8006540:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d037      	beq.n	80065b8 <f_open+0x1d4>
						dw = fs->winsect;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	2200      	movs	r2, #0
 8006554:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fe83 	bl	8005262 <remove_chain>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006566:	2b00      	cmp	r3, #0
 8006568:	d126      	bne.n	80065b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fc28 	bl	8004dc4 <move_window>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800657e:	3a01      	subs	r2, #1
 8006580:	60da      	str	r2, [r3, #12]
 8006582:	e019      	b.n	80065b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006588:	2b00      	cmp	r3, #0
 800658a:	d115      	bne.n	80065b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800658c:	7ebb      	ldrb	r3, [r7, #26]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006596:	2304      	movs	r3, #4
 8006598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800659c:	e00c      	b.n	80065b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <f_open+0x1d4>
 80065a8:	7ebb      	ldrb	r3, [r7, #26]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <f_open+0x1d4>
						res = FR_DENIED;
 80065b2:	2307      	movs	r3, #7
 80065b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80065b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d128      	bne.n	8006612 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80065da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	f107 0314 	add.w	r3, r7, #20
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fab1 	bl	8004b60 <inc_lock>
 80065fe:	4602      	mov	r2, r0
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <f_open+0x22e>
 800660c:	2302      	movs	r3, #2
 800660e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 8095 	bne.w	8006746 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff f8d5 	bl	80057d2 <ld_clust>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	331c      	adds	r3, #28
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe f92e 	bl	8004894 <ld_dword>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	88da      	ldrh	r2, [r3, #6]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	79fa      	ldrb	r2, [r7, #7]
 8006656:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3330      	adds	r3, #48	; 0x30
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe f998 	bl	80049aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d060      	beq.n	8006746 <f_open+0x362>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05c      	beq.n	8006746 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	895b      	ldrh	r3, [r3, #10]
 8006698:	025b      	lsls	r3, r3, #9
 800669a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	657b      	str	r3, [r7, #84]	; 0x54
 80066a8:	e016      	b.n	80066d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fc43 	bl	8004f3a <get_fat>
 80066b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80066b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d802      	bhi.n	80066c2 <f_open+0x2de>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80066c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d102      	bne.n	80066d0 <f_open+0x2ec>
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	657b      	str	r3, [r7, #84]	; 0x54
 80066d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <f_open+0x304>
 80066e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d8e0      	bhi.n	80066aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d127      	bne.n	8006746 <f_open+0x362>
 80066f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d022      	beq.n	8006746 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fbf9 	bl	8004efc <clust2sect>
 800670a:	6478      	str	r0, [r7, #68]	; 0x44
 800670c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <f_open+0x336>
						res = FR_INT_ERR;
 8006712:	2302      	movs	r3, #2
 8006714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006718:	e015      	b.n	8006746 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800671a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671c:	0a5a      	lsrs	r2, r3, #9
 800671e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	7858      	ldrb	r0, [r3, #1]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	2301      	movs	r3, #1
 8006736:	f7fe f837 	bl	80047a8 <disk_read>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <f_open+0x362>
 8006740:	2301      	movs	r3, #1
 8006742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <f_open+0x370>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006758:	4618      	mov	r0, r3
 800675a:	3760      	adds	r7, #96	; 0x60
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f107 0210 	add.w	r2, r7, #16
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fdb3 	bl	80062ec <validate>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800678c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d107      	bne.n	80067a4 <f_write+0x44>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7d5b      	ldrb	r3, [r3, #21]
 8006798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800679c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <f_write+0x4a>
 80067a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067a8:	e14b      	b.n	8006a42 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	7d1b      	ldrb	r3, [r3, #20]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <f_write+0x5a>
 80067b6:	2307      	movs	r3, #7
 80067b8:	e143      	b.n	8006a42 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	f080 812d 	bcs.w	8006a26 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80067d4:	e127      	b.n	8006a26 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 80e3 	bne.w	80069aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	0a5b      	lsrs	r3, r3, #9
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	8952      	ldrh	r2, [r2, #10]
 80067ee:	3a01      	subs	r2, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d143      	bne.n	8006882 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11a      	bne.n	8006844 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fd8a 	bl	800532c <create_chain>
 8006818:	62b8      	str	r0, [r7, #40]	; 0x28
 800681a:	e013      	b.n	8006844 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f7fe fe16 	bl	800545c <clmt_clust>
 8006830:	62b8      	str	r0, [r7, #40]	; 0x28
 8006832:	e007      	b.n	8006844 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f7fe fd75 	bl	800532c <create_chain>
 8006842:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80f2 	beq.w	8006a30 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	2b01      	cmp	r3, #1
 8006850:	d104      	bne.n	800685c <f_write+0xfc>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2202      	movs	r2, #2
 8006856:	755a      	strb	r2, [r3, #21]
 8006858:	2302      	movs	r3, #2
 800685a:	e0f2      	b.n	8006a42 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d104      	bne.n	800686e <f_write+0x10e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	755a      	strb	r2, [r3, #21]
 800686a:	2301      	movs	r3, #1
 800686c:	e0e9      	b.n	8006a42 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006872:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <f_write+0x122>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006880:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	7d1b      	ldrb	r3, [r3, #20]
 8006886:	b25b      	sxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	da18      	bge.n	80068be <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	7858      	ldrb	r0, [r3, #1]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	2301      	movs	r3, #1
 800689c:	f7fd ffa4 	bl	80047e8 <disk_write>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <f_write+0x150>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	755a      	strb	r2, [r3, #21]
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0c8      	b.n	8006a42 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7d1b      	ldrb	r3, [r3, #20]
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe fb18 	bl	8004efc <clust2sect>
 80068cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <f_write+0x17e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2202      	movs	r2, #2
 80068d8:	755a      	strb	r2, [r3, #21]
 80068da:	2302      	movs	r3, #2
 80068dc:	e0b1      	b.n	8006a42 <f_write+0x2e2>
			sect += csect;
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	4413      	add	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	0a5b      	lsrs	r3, r3, #9
 80068ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d03c      	beq.n	800696c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	4413      	add	r3, r2
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	8952      	ldrh	r2, [r2, #10]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d905      	bls.n	800690c <f_write+0x1ac>
					cc = fs->csize - csect;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	895b      	ldrh	r3, [r3, #10]
 8006904:	461a      	mov	r2, r3
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	7858      	ldrb	r0, [r3, #1]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	f7fd ff67 	bl	80047e8 <disk_write>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <f_write+0x1ca>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	755a      	strb	r2, [r3, #21]
 8006926:	2301      	movs	r3, #1
 8006928:	e08b      	b.n	8006a42 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	429a      	cmp	r2, r3
 8006936:	d915      	bls.n	8006964 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1a      	ldr	r2, [r3, #32]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	025b      	lsls	r3, r3, #9
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006950:	4619      	mov	r1, r3
 8006952:	f7fe f809 	bl	8004968 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	7d1b      	ldrb	r3, [r3, #20]
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	025b      	lsls	r3, r3, #9
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800696a:	e03f      	b.n	80069ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d016      	beq.n	80069a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800697e:	429a      	cmp	r2, r3
 8006980:	d210      	bcs.n	80069a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	7858      	ldrb	r0, [r3, #1]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800698c:	2301      	movs	r3, #1
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f7fd ff0a 	bl	80047a8 <disk_read>
 8006994:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	755a      	strb	r2, [r3, #21]
 80069a0:	2301      	movs	r3, #1
 80069a2:	e04e      	b.n	8006a42 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d901      	bls.n	80069c4 <f_write+0x264>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	4413      	add	r3, r2
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	69f9      	ldr	r1, [r7, #28]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fd ffc5 	bl	8004968 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	7d1b      	ldrb	r3, [r3, #20]
 80069e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	4413      	add	r3, r2
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bf38      	it	cc
 8006a0c:	461a      	movcc	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	441a      	add	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f aed4 	bne.w	80067d6 <f_write+0x76>
 8006a2e:	e000      	b.n	8006a32 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a30:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	7d1b      	ldrb	r3, [r3, #20]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3730      	adds	r7, #48	; 0x30
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fc46 	bl	80062ec <validate>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d168      	bne.n	8006b3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7d1b      	ldrb	r3, [r3, #20]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d062      	beq.n	8006b3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7d1b      	ldrb	r3, [r3, #20]
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da15      	bge.n	8006aac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	7858      	ldrb	r0, [r3, #1]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1a      	ldr	r2, [r3, #32]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f7fd feaa 	bl	80047e8 <disk_write>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <f_sync+0x54>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e04f      	b.n	8006b3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7d1b      	ldrb	r3, [r3, #20]
 8006aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006aac:	f7fd fcc2 	bl	8004434 <get_fattime>
 8006ab0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe f982 	bl	8004dc4 <move_window>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d138      	bne.n	8006b3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	330b      	adds	r3, #11
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	330b      	adds	r3, #11
 8006ada:	f042 0220 	orr.w	r2, r2, #32
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	f7fe fe8f 	bl	8005810 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f103 021c 	add.w	r2, r3, #28
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fd ff06 	bl	8004910 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3316      	adds	r3, #22
 8006b08:	6939      	ldr	r1, [r7, #16]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fd ff00 	bl	8004910 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3312      	adds	r3, #18
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd fedf 	bl	80048da <st_word>
					fs->wflag = 1;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe f97b 	bl	8004e20 <sync_fs>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	7d1b      	ldrb	r3, [r3, #20]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff ff7b 	bl	8006a4a <f_sync>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d118      	bne.n	8006b90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f107 0208 	add.w	r2, r7, #8
 8006b64:	4611      	mov	r1, r2
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fbc0 	bl	80062ec <validate>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe f87e 	bl	8004c7c <dec_lock>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <f_opendir+0x14>
 8006baa:	2309      	movs	r3, #9
 8006bac:	e064      	b.n	8006c78 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006bb2:	f107 010c 	add.w	r1, r7, #12
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f94a 	bl	8005e54 <find_volume>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d14f      	bne.n	8006c6a <f_opendir+0xd0>
		obj->fs = fs;
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff f831 	bl	8005c3c <follow_path>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d13d      	bne.n	8006c60 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	db12      	blt.n	8006c16 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	799b      	ldrb	r3, [r3, #6]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fe fde4 	bl	80057d2 <ld_clust>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	609a      	str	r2, [r3, #8]
 8006c10:	e001      	b.n	8006c16 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006c12:	2305      	movs	r3, #5
 8006c14:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d121      	bne.n	8006c60 <f_opendir+0xc6>
				obj->id = fs->id;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88da      	ldrh	r2, [r3, #6]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006c24:	2100      	movs	r1, #0
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fe fc4c 	bl	80054c4 <dir_sdi>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d114      	bne.n	8006c60 <f_opendir+0xc6>
					if (obj->sclust) {
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fd ff8d 	bl	8004b60 <inc_lock>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <f_opendir+0xc6>
 8006c54:	2312      	movs	r3, #18
 8006c56:	75fb      	strb	r3, [r7, #23]
 8006c58:	e002      	b.n	8006c60 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d101      	bne.n	8006c6a <f_opendir+0xd0>
 8006c66:	2305      	movs	r3, #5
 8006c68:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <f_opendir+0xdc>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f107 0208 	add.w	r2, r7, #8
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fb2b 	bl	80062ec <validate>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d110      	bne.n	8006cc2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd ffe5 	bl	8004c7c <dec_lock>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fb04 	bl	80062ec <validate>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d126      	bne.n	8006d3c <f_readdir+0x70>
		if (!fno) {
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fe fbe4 	bl	80054c4 <dir_sdi>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
 8006d00:	e01c      	b.n	8006d3c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006d02:	2100      	movs	r1, #0
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe fda3 	bl	8005850 <dir_read>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d101      	bne.n	8006d18 <f_readdir+0x4c>
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10e      	bne.n	8006d3c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fe fe97 	bl	8005a54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fe fc46 	bl	80055ba <dir_next>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d101      	bne.n	8006d3c <f_readdir+0x70>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b090      	sub	sp, #64	; 0x40
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8006d50:	f107 010c 	add.w	r1, r7, #12
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	2200      	movs	r2, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff f87b 	bl	8005e54 <find_volume>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8006d64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11f      	bne.n	8006dac <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fe ff61 	bl	8005c3c <follow_path>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8006d80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d111      	bne.n	8006dac <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006d88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da03      	bge.n	8006d9a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8006d92:	2306      	movs	r3, #6
 8006d94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d98:	e008      	b.n	8006dac <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <f_stat+0x66>
 8006da0:	f107 030c 	add.w	r3, r7, #12
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fe54 	bl	8005a54 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006dac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3740      	adds	r7, #64	; 0x40
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b09e      	sub	sp, #120	; 0x78
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006dc4:	f107 010c 	add.w	r1, r7, #12
 8006dc8:	1d3b      	adds	r3, r7, #4
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff f841 	bl	8005e54 <find_volume>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8006ddc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 808e 	bne.w	8006f02 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe ff24 	bl	8005c3c <follow_path>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8006dfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d108      	bne.n	8006e14 <f_unlink+0x5c>
 8006e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e06:	2102      	movs	r1, #2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fe2b 	bl	8004a64 <chk_lock>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006e14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d172      	bne.n	8006f02 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006e1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e20:	b25b      	sxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da03      	bge.n	8006e2e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006e26:	2306      	movs	r3, #6
 8006e28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006e2c:	e008      	b.n	8006e40 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006e2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006e3a:	2307      	movs	r3, #7
 8006e3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8006e40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d134      	bne.n	8006eb2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fcbf 	bl	80057d2 <ld_clust>
 8006e54:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006e56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d027      	beq.n	8006eb2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8006e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e68:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006e6a:	f107 0310 	add.w	r3, r7, #16
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fb27 	bl	80054c4 <dir_sdi>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8006e7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d116      	bne.n	8006eb2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8006e84:	f107 0310 	add.w	r3, r7, #16
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fce0 	bl	8005850 <dir_read>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006e96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <f_unlink+0xec>
 8006e9e:	2307      	movs	r3, #7
 8006ea0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d102      	bne.n	8006eb2 <f_unlink+0xfa>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8006eb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d123      	bne.n	8006f02 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fdaa 	bl	8005a18 <dir_remove>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006eca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <f_unlink+0x134>
 8006ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8006ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006edc:	2200      	movs	r2, #0
 8006ede:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe f9be 	bl	8005262 <remove_chain>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006eec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <f_unlink+0x14a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd ff92 	bl	8004e20 <sync_fs>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006f02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3778      	adds	r7, #120	; 0x78
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f26:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f28:	7a5b      	ldrb	r3, [r3, #9]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d131      	bne.n	8006f94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f32:	7a5b      	ldrb	r3, [r3, #9]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f3e:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f40:	7a5b      	ldrb	r3, [r3, #9]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f50:	7a5b      	ldrb	r3, [r3, #9]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	79fa      	ldrb	r2, [r7, #7]
 8006f5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f60:	7a5b      	ldrb	r3, [r3, #9]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	b2d1      	uxtb	r1, r2
 8006f68:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <FATFS_LinkDriverEx+0x94>)
 8006f6a:	7251      	strb	r1, [r2, #9]
 8006f6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	3330      	adds	r3, #48	; 0x30
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	223a      	movs	r2, #58	; 0x3a
 8006f7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3302      	adds	r3, #2
 8006f84:	222f      	movs	r2, #47	; 0x2f
 8006f86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000674 	.word	0x20000674

08006fa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ffaa 	bl	8006f10 <FATFS_LinkDriverEx>
 8006fbc:	4603      	mov	r3, r0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <__errno>:
 8006fc8:	4b01      	ldr	r3, [pc, #4]	; (8006fd0 <__errno+0x8>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	2000000c 	.word	0x2000000c

08006fd4 <__libc_init_array>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4d0d      	ldr	r5, [pc, #52]	; (800700c <__libc_init_array+0x38>)
 8006fd8:	4c0d      	ldr	r4, [pc, #52]	; (8007010 <__libc_init_array+0x3c>)
 8006fda:	1b64      	subs	r4, r4, r5
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	2600      	movs	r6, #0
 8006fe0:	42a6      	cmp	r6, r4
 8006fe2:	d109      	bne.n	8006ff8 <__libc_init_array+0x24>
 8006fe4:	4d0b      	ldr	r5, [pc, #44]	; (8007014 <__libc_init_array+0x40>)
 8006fe6:	4c0c      	ldr	r4, [pc, #48]	; (8007018 <__libc_init_array+0x44>)
 8006fe8:	f000 fc9e 	bl	8007928 <_init>
 8006fec:	1b64      	subs	r4, r4, r5
 8006fee:	10a4      	asrs	r4, r4, #2
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	42a6      	cmp	r6, r4
 8006ff4:	d105      	bne.n	8007002 <__libc_init_array+0x2e>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffc:	4798      	blx	r3
 8006ffe:	3601      	adds	r6, #1
 8007000:	e7ee      	b.n	8006fe0 <__libc_init_array+0xc>
 8007002:	f855 3b04 	ldr.w	r3, [r5], #4
 8007006:	4798      	blx	r3
 8007008:	3601      	adds	r6, #1
 800700a:	e7f2      	b.n	8006ff2 <__libc_init_array+0x1e>
 800700c:	08007ec0 	.word	0x08007ec0
 8007010:	08007ec0 	.word	0x08007ec0
 8007014:	08007ec0 	.word	0x08007ec0
 8007018:	08007ec4 	.word	0x08007ec4

0800701c <malloc>:
 800701c:	4b02      	ldr	r3, [pc, #8]	; (8007028 <malloc+0xc>)
 800701e:	4601      	mov	r1, r0
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	f000 b87f 	b.w	8007124 <_malloc_r>
 8007026:	bf00      	nop
 8007028:	2000000c 	.word	0x2000000c

0800702c <free>:
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <free+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f000 b80b 	b.w	800704c <_free_r>
 8007036:	bf00      	nop
 8007038:	2000000c 	.word	0x2000000c

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <_free_r>:
 800704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800704e:	2900      	cmp	r1, #0
 8007050:	d044      	beq.n	80070dc <_free_r+0x90>
 8007052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007056:	9001      	str	r0, [sp, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f1a1 0404 	sub.w	r4, r1, #4
 800705e:	bfb8      	it	lt
 8007060:	18e4      	addlt	r4, r4, r3
 8007062:	f000 f903 	bl	800726c <__malloc_lock>
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <_free_r+0x94>)
 8007068:	9801      	ldr	r0, [sp, #4]
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x30>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007078:	f000 b8fe 	b.w	8007278 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x46>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1961      	adds	r1, r4, r5
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1949      	addeq	r1, r1, r5
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x22>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x50>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x46>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1855      	adds	r5, r2, r1
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x70>
 80070a4:	6824      	ldr	r4, [r4, #0]
 80070a6:	4421      	add	r1, r4
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x26>
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4421      	add	r1, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x26>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x78>
 80070be:	230c      	movs	r3, #12
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x26>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1961      	adds	r1, r4, r5
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7ca      	b.n	8007072 <_free_r+0x26>
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	20000680 	.word	0x20000680

080070e4 <sbrk_aligned>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4e0e      	ldr	r6, [pc, #56]	; (8007120 <sbrk_aligned+0x3c>)
 80070e8:	460c      	mov	r4, r1
 80070ea:	6831      	ldr	r1, [r6, #0]
 80070ec:	4605      	mov	r5, r0
 80070ee:	b911      	cbnz	r1, 80070f6 <sbrk_aligned+0x12>
 80070f0:	f000 f88c 	bl	800720c <_sbrk_r>
 80070f4:	6030      	str	r0, [r6, #0]
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 f887 	bl	800720c <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d00a      	beq.n	8007118 <sbrk_aligned+0x34>
 8007102:	1cc4      	adds	r4, r0, #3
 8007104:	f024 0403 	bic.w	r4, r4, #3
 8007108:	42a0      	cmp	r0, r4
 800710a:	d007      	beq.n	800711c <sbrk_aligned+0x38>
 800710c:	1a21      	subs	r1, r4, r0
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f87c 	bl	800720c <_sbrk_r>
 8007114:	3001      	adds	r0, #1
 8007116:	d101      	bne.n	800711c <sbrk_aligned+0x38>
 8007118:	f04f 34ff 	mov.w	r4, #4294967295
 800711c:	4620      	mov	r0, r4
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	20000684 	.word	0x20000684

08007124 <_malloc_r>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	1ccd      	adds	r5, r1, #3
 800712a:	f025 0503 	bic.w	r5, r5, #3
 800712e:	3508      	adds	r5, #8
 8007130:	2d0c      	cmp	r5, #12
 8007132:	bf38      	it	cc
 8007134:	250c      	movcc	r5, #12
 8007136:	2d00      	cmp	r5, #0
 8007138:	4607      	mov	r7, r0
 800713a:	db01      	blt.n	8007140 <_malloc_r+0x1c>
 800713c:	42a9      	cmp	r1, r5
 800713e:	d905      	bls.n	800714c <_malloc_r+0x28>
 8007140:	230c      	movs	r3, #12
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	2600      	movs	r6, #0
 8007146:	4630      	mov	r0, r6
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	4e2e      	ldr	r6, [pc, #184]	; (8007208 <_malloc_r+0xe4>)
 800714e:	f000 f88d 	bl	800726c <__malloc_lock>
 8007152:	6833      	ldr	r3, [r6, #0]
 8007154:	461c      	mov	r4, r3
 8007156:	bb34      	cbnz	r4, 80071a6 <_malloc_r+0x82>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	f7ff ffc2 	bl	80070e4 <sbrk_aligned>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	4604      	mov	r4, r0
 8007164:	d14d      	bne.n	8007202 <_malloc_r+0xde>
 8007166:	6834      	ldr	r4, [r6, #0]
 8007168:	4626      	mov	r6, r4
 800716a:	2e00      	cmp	r6, #0
 800716c:	d140      	bne.n	80071f0 <_malloc_r+0xcc>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4631      	mov	r1, r6
 8007172:	4638      	mov	r0, r7
 8007174:	eb04 0803 	add.w	r8, r4, r3
 8007178:	f000 f848 	bl	800720c <_sbrk_r>
 800717c:	4580      	cmp	r8, r0
 800717e:	d13a      	bne.n	80071f6 <_malloc_r+0xd2>
 8007180:	6821      	ldr	r1, [r4, #0]
 8007182:	3503      	adds	r5, #3
 8007184:	1a6d      	subs	r5, r5, r1
 8007186:	f025 0503 	bic.w	r5, r5, #3
 800718a:	3508      	adds	r5, #8
 800718c:	2d0c      	cmp	r5, #12
 800718e:	bf38      	it	cc
 8007190:	250c      	movcc	r5, #12
 8007192:	4629      	mov	r1, r5
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa5 	bl	80070e4 <sbrk_aligned>
 800719a:	3001      	adds	r0, #1
 800719c:	d02b      	beq.n	80071f6 <_malloc_r+0xd2>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	442b      	add	r3, r5
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	e00e      	b.n	80071c4 <_malloc_r+0xa0>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	1b52      	subs	r2, r2, r5
 80071aa:	d41e      	bmi.n	80071ea <_malloc_r+0xc6>
 80071ac:	2a0b      	cmp	r2, #11
 80071ae:	d916      	bls.n	80071de <_malloc_r+0xba>
 80071b0:	1961      	adds	r1, r4, r5
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6025      	str	r5, [r4, #0]
 80071b6:	bf18      	it	ne
 80071b8:	6059      	strne	r1, [r3, #4]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	bf08      	it	eq
 80071be:	6031      	streq	r1, [r6, #0]
 80071c0:	5162      	str	r2, [r4, r5]
 80071c2:	604b      	str	r3, [r1, #4]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f104 060b 	add.w	r6, r4, #11
 80071ca:	f000 f855 	bl	8007278 <__malloc_unlock>
 80071ce:	f026 0607 	bic.w	r6, r6, #7
 80071d2:	1d23      	adds	r3, r4, #4
 80071d4:	1af2      	subs	r2, r6, r3
 80071d6:	d0b6      	beq.n	8007146 <_malloc_r+0x22>
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	50a3      	str	r3, [r4, r2]
 80071dc:	e7b3      	b.n	8007146 <_malloc_r+0x22>
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	bf0c      	ite	eq
 80071e4:	6032      	streq	r2, [r6, #0]
 80071e6:	605a      	strne	r2, [r3, #4]
 80071e8:	e7ec      	b.n	80071c4 <_malloc_r+0xa0>
 80071ea:	4623      	mov	r3, r4
 80071ec:	6864      	ldr	r4, [r4, #4]
 80071ee:	e7b2      	b.n	8007156 <_malloc_r+0x32>
 80071f0:	4634      	mov	r4, r6
 80071f2:	6876      	ldr	r6, [r6, #4]
 80071f4:	e7b9      	b.n	800716a <_malloc_r+0x46>
 80071f6:	230c      	movs	r3, #12
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4638      	mov	r0, r7
 80071fc:	f000 f83c 	bl	8007278 <__malloc_unlock>
 8007200:	e7a1      	b.n	8007146 <_malloc_r+0x22>
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	e7de      	b.n	80071c4 <_malloc_r+0xa0>
 8007206:	bf00      	nop
 8007208:	20000680 	.word	0x20000680

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7f9 fe48 	bl	8000eac <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000688 	.word	0x20000688

0800722c <siprintf>:
 800722c:	b40e      	push	{r1, r2, r3}
 800722e:	b500      	push	{lr}
 8007230:	b09c      	sub	sp, #112	; 0x70
 8007232:	ab1d      	add	r3, sp, #116	; 0x74
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <siprintf+0x38>)
 800723e:	9107      	str	r1, [sp, #28]
 8007240:	9104      	str	r1, [sp, #16]
 8007242:	4909      	ldr	r1, [pc, #36]	; (8007268 <siprintf+0x3c>)
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	9105      	str	r1, [sp, #20]
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	a902      	add	r1, sp, #8
 8007250:	f000 f874 	bl	800733c <_svfiprintf_r>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	b01c      	add	sp, #112	; 0x70
 800725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007260:	b003      	add	sp, #12
 8007262:	4770      	bx	lr
 8007264:	2000000c 	.word	0x2000000c
 8007268:	ffff0208 	.word	0xffff0208

0800726c <__malloc_lock>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__malloc_lock+0x8>)
 800726e:	f000 baf9 	b.w	8007864 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	2000068c 	.word	0x2000068c

08007278 <__malloc_unlock>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__malloc_unlock+0x8>)
 800727a:	f000 baf4 	b.w	8007866 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	2000068c 	.word	0x2000068c

08007284 <__ssputs_r>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	688e      	ldr	r6, [r1, #8]
 800728a:	429e      	cmp	r6, r3
 800728c:	4682      	mov	sl, r0
 800728e:	460c      	mov	r4, r1
 8007290:	4690      	mov	r8, r2
 8007292:	461f      	mov	r7, r3
 8007294:	d838      	bhi.n	8007308 <__ssputs_r+0x84>
 8007296:	898a      	ldrh	r2, [r1, #12]
 8007298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800729c:	d032      	beq.n	8007304 <__ssputs_r+0x80>
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	6909      	ldr	r1, [r1, #16]
 80072a2:	eba5 0901 	sub.w	r9, r5, r1
 80072a6:	6965      	ldr	r5, [r4, #20]
 80072a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072b0:	3301      	adds	r3, #1
 80072b2:	444b      	add	r3, r9
 80072b4:	106d      	asrs	r5, r5, #1
 80072b6:	429d      	cmp	r5, r3
 80072b8:	bf38      	it	cc
 80072ba:	461d      	movcc	r5, r3
 80072bc:	0553      	lsls	r3, r2, #21
 80072be:	d531      	bpl.n	8007324 <__ssputs_r+0xa0>
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7ff ff2f 	bl	8007124 <_malloc_r>
 80072c6:	4606      	mov	r6, r0
 80072c8:	b950      	cbnz	r0, 80072e0 <__ssputs_r+0x5c>
 80072ca:	230c      	movs	r3, #12
 80072cc:	f8ca 3000 	str.w	r3, [sl]
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	6921      	ldr	r1, [r4, #16]
 80072e2:	464a      	mov	r2, r9
 80072e4:	f000 fac0 	bl	8007868 <memcpy>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	6126      	str	r6, [r4, #16]
 80072f6:	6165      	str	r5, [r4, #20]
 80072f8:	444e      	add	r6, r9
 80072fa:	eba5 0509 	sub.w	r5, r5, r9
 80072fe:	6026      	str	r6, [r4, #0]
 8007300:	60a5      	str	r5, [r4, #8]
 8007302:	463e      	mov	r6, r7
 8007304:	42be      	cmp	r6, r7
 8007306:	d900      	bls.n	800730a <__ssputs_r+0x86>
 8007308:	463e      	mov	r6, r7
 800730a:	6820      	ldr	r0, [r4, #0]
 800730c:	4632      	mov	r2, r6
 800730e:	4641      	mov	r1, r8
 8007310:	f000 fab8 	bl	8007884 <memmove>
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	1b9b      	subs	r3, r3, r6
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	4433      	add	r3, r6
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	2000      	movs	r0, #0
 8007322:	e7db      	b.n	80072dc <__ssputs_r+0x58>
 8007324:	462a      	mov	r2, r5
 8007326:	f000 fac7 	bl	80078b8 <_realloc_r>
 800732a:	4606      	mov	r6, r0
 800732c:	2800      	cmp	r0, #0
 800732e:	d1e1      	bne.n	80072f4 <__ssputs_r+0x70>
 8007330:	6921      	ldr	r1, [r4, #16]
 8007332:	4650      	mov	r0, sl
 8007334:	f7ff fe8a 	bl	800704c <_free_r>
 8007338:	e7c7      	b.n	80072ca <__ssputs_r+0x46>
	...

0800733c <_svfiprintf_r>:
 800733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	4698      	mov	r8, r3
 8007342:	898b      	ldrh	r3, [r1, #12]
 8007344:	061b      	lsls	r3, r3, #24
 8007346:	b09d      	sub	sp, #116	; 0x74
 8007348:	4607      	mov	r7, r0
 800734a:	460d      	mov	r5, r1
 800734c:	4614      	mov	r4, r2
 800734e:	d50e      	bpl.n	800736e <_svfiprintf_r+0x32>
 8007350:	690b      	ldr	r3, [r1, #16]
 8007352:	b963      	cbnz	r3, 800736e <_svfiprintf_r+0x32>
 8007354:	2140      	movs	r1, #64	; 0x40
 8007356:	f7ff fee5 	bl	8007124 <_malloc_r>
 800735a:	6028      	str	r0, [r5, #0]
 800735c:	6128      	str	r0, [r5, #16]
 800735e:	b920      	cbnz	r0, 800736a <_svfiprintf_r+0x2e>
 8007360:	230c      	movs	r3, #12
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e0d1      	b.n	800750e <_svfiprintf_r+0x1d2>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	616b      	str	r3, [r5, #20]
 800736e:	2300      	movs	r3, #0
 8007370:	9309      	str	r3, [sp, #36]	; 0x24
 8007372:	2320      	movs	r3, #32
 8007374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007378:	f8cd 800c 	str.w	r8, [sp, #12]
 800737c:	2330      	movs	r3, #48	; 0x30
 800737e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007528 <_svfiprintf_r+0x1ec>
 8007382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007386:	f04f 0901 	mov.w	r9, #1
 800738a:	4623      	mov	r3, r4
 800738c:	469a      	mov	sl, r3
 800738e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007392:	b10a      	cbz	r2, 8007398 <_svfiprintf_r+0x5c>
 8007394:	2a25      	cmp	r2, #37	; 0x25
 8007396:	d1f9      	bne.n	800738c <_svfiprintf_r+0x50>
 8007398:	ebba 0b04 	subs.w	fp, sl, r4
 800739c:	d00b      	beq.n	80073b6 <_svfiprintf_r+0x7a>
 800739e:	465b      	mov	r3, fp
 80073a0:	4622      	mov	r2, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	4638      	mov	r0, r7
 80073a6:	f7ff ff6d 	bl	8007284 <__ssputs_r>
 80073aa:	3001      	adds	r0, #1
 80073ac:	f000 80aa 	beq.w	8007504 <_svfiprintf_r+0x1c8>
 80073b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b2:	445a      	add	r2, fp
 80073b4:	9209      	str	r2, [sp, #36]	; 0x24
 80073b6:	f89a 3000 	ldrb.w	r3, [sl]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80a2 	beq.w	8007504 <_svfiprintf_r+0x1c8>
 80073c0:	2300      	movs	r3, #0
 80073c2:	f04f 32ff 	mov.w	r2, #4294967295
 80073c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ca:	f10a 0a01 	add.w	sl, sl, #1
 80073ce:	9304      	str	r3, [sp, #16]
 80073d0:	9307      	str	r3, [sp, #28]
 80073d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073d6:	931a      	str	r3, [sp, #104]	; 0x68
 80073d8:	4654      	mov	r4, sl
 80073da:	2205      	movs	r2, #5
 80073dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e0:	4851      	ldr	r0, [pc, #324]	; (8007528 <_svfiprintf_r+0x1ec>)
 80073e2:	f7f8 ff1d 	bl	8000220 <memchr>
 80073e6:	9a04      	ldr	r2, [sp, #16]
 80073e8:	b9d8      	cbnz	r0, 8007422 <_svfiprintf_r+0xe6>
 80073ea:	06d0      	lsls	r0, r2, #27
 80073ec:	bf44      	itt	mi
 80073ee:	2320      	movmi	r3, #32
 80073f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f4:	0711      	lsls	r1, r2, #28
 80073f6:	bf44      	itt	mi
 80073f8:	232b      	movmi	r3, #43	; 0x2b
 80073fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007402:	2b2a      	cmp	r3, #42	; 0x2a
 8007404:	d015      	beq.n	8007432 <_svfiprintf_r+0xf6>
 8007406:	9a07      	ldr	r2, [sp, #28]
 8007408:	4654      	mov	r4, sl
 800740a:	2000      	movs	r0, #0
 800740c:	f04f 0c0a 	mov.w	ip, #10
 8007410:	4621      	mov	r1, r4
 8007412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007416:	3b30      	subs	r3, #48	; 0x30
 8007418:	2b09      	cmp	r3, #9
 800741a:	d94e      	bls.n	80074ba <_svfiprintf_r+0x17e>
 800741c:	b1b0      	cbz	r0, 800744c <_svfiprintf_r+0x110>
 800741e:	9207      	str	r2, [sp, #28]
 8007420:	e014      	b.n	800744c <_svfiprintf_r+0x110>
 8007422:	eba0 0308 	sub.w	r3, r0, r8
 8007426:	fa09 f303 	lsl.w	r3, r9, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	46a2      	mov	sl, r4
 8007430:	e7d2      	b.n	80073d8 <_svfiprintf_r+0x9c>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	1d19      	adds	r1, r3, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	9103      	str	r1, [sp, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfbb      	ittet	lt
 800743e:	425b      	neglt	r3, r3
 8007440:	f042 0202 	orrlt.w	r2, r2, #2
 8007444:	9307      	strge	r3, [sp, #28]
 8007446:	9307      	strlt	r3, [sp, #28]
 8007448:	bfb8      	it	lt
 800744a:	9204      	strlt	r2, [sp, #16]
 800744c:	7823      	ldrb	r3, [r4, #0]
 800744e:	2b2e      	cmp	r3, #46	; 0x2e
 8007450:	d10c      	bne.n	800746c <_svfiprintf_r+0x130>
 8007452:	7863      	ldrb	r3, [r4, #1]
 8007454:	2b2a      	cmp	r3, #42	; 0x2a
 8007456:	d135      	bne.n	80074c4 <_svfiprintf_r+0x188>
 8007458:	9b03      	ldr	r3, [sp, #12]
 800745a:	1d1a      	adds	r2, r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	9203      	str	r2, [sp, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	bfb8      	it	lt
 8007464:	f04f 33ff 	movlt.w	r3, #4294967295
 8007468:	3402      	adds	r4, #2
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007538 <_svfiprintf_r+0x1fc>
 8007470:	7821      	ldrb	r1, [r4, #0]
 8007472:	2203      	movs	r2, #3
 8007474:	4650      	mov	r0, sl
 8007476:	f7f8 fed3 	bl	8000220 <memchr>
 800747a:	b140      	cbz	r0, 800748e <_svfiprintf_r+0x152>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	eba0 000a 	sub.w	r0, r0, sl
 8007482:	fa03 f000 	lsl.w	r0, r3, r0
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	4303      	orrs	r3, r0
 800748a:	3401      	adds	r4, #1
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007492:	4826      	ldr	r0, [pc, #152]	; (800752c <_svfiprintf_r+0x1f0>)
 8007494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007498:	2206      	movs	r2, #6
 800749a:	f7f8 fec1 	bl	8000220 <memchr>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d038      	beq.n	8007514 <_svfiprintf_r+0x1d8>
 80074a2:	4b23      	ldr	r3, [pc, #140]	; (8007530 <_svfiprintf_r+0x1f4>)
 80074a4:	bb1b      	cbnz	r3, 80074ee <_svfiprintf_r+0x1b2>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	3307      	adds	r3, #7
 80074aa:	f023 0307 	bic.w	r3, r3, #7
 80074ae:	3308      	adds	r3, #8
 80074b0:	9303      	str	r3, [sp, #12]
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	4433      	add	r3, r6
 80074b6:	9309      	str	r3, [sp, #36]	; 0x24
 80074b8:	e767      	b.n	800738a <_svfiprintf_r+0x4e>
 80074ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80074be:	460c      	mov	r4, r1
 80074c0:	2001      	movs	r0, #1
 80074c2:	e7a5      	b.n	8007410 <_svfiprintf_r+0xd4>
 80074c4:	2300      	movs	r3, #0
 80074c6:	3401      	adds	r4, #1
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	4619      	mov	r1, r3
 80074cc:	f04f 0c0a 	mov.w	ip, #10
 80074d0:	4620      	mov	r0, r4
 80074d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d6:	3a30      	subs	r2, #48	; 0x30
 80074d8:	2a09      	cmp	r2, #9
 80074da:	d903      	bls.n	80074e4 <_svfiprintf_r+0x1a8>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0c5      	beq.n	800746c <_svfiprintf_r+0x130>
 80074e0:	9105      	str	r1, [sp, #20]
 80074e2:	e7c3      	b.n	800746c <_svfiprintf_r+0x130>
 80074e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80074e8:	4604      	mov	r4, r0
 80074ea:	2301      	movs	r3, #1
 80074ec:	e7f0      	b.n	80074d0 <_svfiprintf_r+0x194>
 80074ee:	ab03      	add	r3, sp, #12
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	462a      	mov	r2, r5
 80074f4:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <_svfiprintf_r+0x1f8>)
 80074f6:	a904      	add	r1, sp, #16
 80074f8:	4638      	mov	r0, r7
 80074fa:	f3af 8000 	nop.w
 80074fe:	1c42      	adds	r2, r0, #1
 8007500:	4606      	mov	r6, r0
 8007502:	d1d6      	bne.n	80074b2 <_svfiprintf_r+0x176>
 8007504:	89ab      	ldrh	r3, [r5, #12]
 8007506:	065b      	lsls	r3, r3, #25
 8007508:	f53f af2c 	bmi.w	8007364 <_svfiprintf_r+0x28>
 800750c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800750e:	b01d      	add	sp, #116	; 0x74
 8007510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007514:	ab03      	add	r3, sp, #12
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	462a      	mov	r2, r5
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <_svfiprintf_r+0x1f8>)
 800751c:	a904      	add	r1, sp, #16
 800751e:	4638      	mov	r0, r7
 8007520:	f000 f87a 	bl	8007618 <_printf_i>
 8007524:	e7eb      	b.n	80074fe <_svfiprintf_r+0x1c2>
 8007526:	bf00      	nop
 8007528:	08007e84 	.word	0x08007e84
 800752c:	08007e8e 	.word	0x08007e8e
 8007530:	00000000 	.word	0x00000000
 8007534:	08007285 	.word	0x08007285
 8007538:	08007e8a 	.word	0x08007e8a

0800753c <_printf_common>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	4616      	mov	r6, r2
 8007542:	4699      	mov	r9, r3
 8007544:	688a      	ldr	r2, [r1, #8]
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754c:	4293      	cmp	r3, r2
 800754e:	bfb8      	it	lt
 8007550:	4613      	movlt	r3, r2
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007558:	4607      	mov	r7, r0
 800755a:	460c      	mov	r4, r1
 800755c:	b10a      	cbz	r2, 8007562 <_printf_common+0x26>
 800755e:	3301      	adds	r3, #1
 8007560:	6033      	str	r3, [r6, #0]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	0699      	lsls	r1, r3, #26
 8007566:	bf42      	ittt	mi
 8007568:	6833      	ldrmi	r3, [r6, #0]
 800756a:	3302      	addmi	r3, #2
 800756c:	6033      	strmi	r3, [r6, #0]
 800756e:	6825      	ldr	r5, [r4, #0]
 8007570:	f015 0506 	ands.w	r5, r5, #6
 8007574:	d106      	bne.n	8007584 <_printf_common+0x48>
 8007576:	f104 0a19 	add.w	sl, r4, #25
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	6832      	ldr	r2, [r6, #0]
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	42ab      	cmp	r3, r5
 8007582:	dc26      	bgt.n	80075d2 <_printf_common+0x96>
 8007584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007588:	1e13      	subs	r3, r2, #0
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	bf18      	it	ne
 800758e:	2301      	movne	r3, #1
 8007590:	0692      	lsls	r2, r2, #26
 8007592:	d42b      	bmi.n	80075ec <_printf_common+0xb0>
 8007594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007598:	4649      	mov	r1, r9
 800759a:	4638      	mov	r0, r7
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d01e      	beq.n	80075e0 <_printf_common+0xa4>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	68e5      	ldr	r5, [r4, #12]
 80075a6:	6832      	ldr	r2, [r6, #0]
 80075a8:	f003 0306 	and.w	r3, r3, #6
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	bf08      	it	eq
 80075b0:	1aad      	subeq	r5, r5, r2
 80075b2:	68a3      	ldr	r3, [r4, #8]
 80075b4:	6922      	ldr	r2, [r4, #16]
 80075b6:	bf0c      	ite	eq
 80075b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075bc:	2500      	movne	r5, #0
 80075be:	4293      	cmp	r3, r2
 80075c0:	bfc4      	itt	gt
 80075c2:	1a9b      	subgt	r3, r3, r2
 80075c4:	18ed      	addgt	r5, r5, r3
 80075c6:	2600      	movs	r6, #0
 80075c8:	341a      	adds	r4, #26
 80075ca:	42b5      	cmp	r5, r6
 80075cc:	d11a      	bne.n	8007604 <_printf_common+0xc8>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e008      	b.n	80075e4 <_printf_common+0xa8>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4652      	mov	r2, sl
 80075d6:	4649      	mov	r1, r9
 80075d8:	4638      	mov	r0, r7
 80075da:	47c0      	blx	r8
 80075dc:	3001      	adds	r0, #1
 80075de:	d103      	bne.n	80075e8 <_printf_common+0xac>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e8:	3501      	adds	r5, #1
 80075ea:	e7c6      	b.n	800757a <_printf_common+0x3e>
 80075ec:	18e1      	adds	r1, r4, r3
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	2030      	movs	r0, #48	; 0x30
 80075f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f6:	4422      	add	r2, r4
 80075f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007600:	3302      	adds	r3, #2
 8007602:	e7c7      	b.n	8007594 <_printf_common+0x58>
 8007604:	2301      	movs	r3, #1
 8007606:	4622      	mov	r2, r4
 8007608:	4649      	mov	r1, r9
 800760a:	4638      	mov	r0, r7
 800760c:	47c0      	blx	r8
 800760e:	3001      	adds	r0, #1
 8007610:	d0e6      	beq.n	80075e0 <_printf_common+0xa4>
 8007612:	3601      	adds	r6, #1
 8007614:	e7d9      	b.n	80075ca <_printf_common+0x8e>
	...

08007618 <_printf_i>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	7e0f      	ldrb	r7, [r1, #24]
 800761e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007620:	2f78      	cmp	r7, #120	; 0x78
 8007622:	4691      	mov	r9, r2
 8007624:	4680      	mov	r8, r0
 8007626:	460c      	mov	r4, r1
 8007628:	469a      	mov	sl, r3
 800762a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800762e:	d807      	bhi.n	8007640 <_printf_i+0x28>
 8007630:	2f62      	cmp	r7, #98	; 0x62
 8007632:	d80a      	bhi.n	800764a <_printf_i+0x32>
 8007634:	2f00      	cmp	r7, #0
 8007636:	f000 80d8 	beq.w	80077ea <_printf_i+0x1d2>
 800763a:	2f58      	cmp	r7, #88	; 0x58
 800763c:	f000 80a3 	beq.w	8007786 <_printf_i+0x16e>
 8007640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007648:	e03a      	b.n	80076c0 <_printf_i+0xa8>
 800764a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800764e:	2b15      	cmp	r3, #21
 8007650:	d8f6      	bhi.n	8007640 <_printf_i+0x28>
 8007652:	a101      	add	r1, pc, #4	; (adr r1, 8007658 <_printf_i+0x40>)
 8007654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007658:	080076b1 	.word	0x080076b1
 800765c:	080076c5 	.word	0x080076c5
 8007660:	08007641 	.word	0x08007641
 8007664:	08007641 	.word	0x08007641
 8007668:	08007641 	.word	0x08007641
 800766c:	08007641 	.word	0x08007641
 8007670:	080076c5 	.word	0x080076c5
 8007674:	08007641 	.word	0x08007641
 8007678:	08007641 	.word	0x08007641
 800767c:	08007641 	.word	0x08007641
 8007680:	08007641 	.word	0x08007641
 8007684:	080077d1 	.word	0x080077d1
 8007688:	080076f5 	.word	0x080076f5
 800768c:	080077b3 	.word	0x080077b3
 8007690:	08007641 	.word	0x08007641
 8007694:	08007641 	.word	0x08007641
 8007698:	080077f3 	.word	0x080077f3
 800769c:	08007641 	.word	0x08007641
 80076a0:	080076f5 	.word	0x080076f5
 80076a4:	08007641 	.word	0x08007641
 80076a8:	08007641 	.word	0x08007641
 80076ac:	080077bb 	.word	0x080077bb
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	602a      	str	r2, [r5, #0]
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0a3      	b.n	800780c <_printf_i+0x1f4>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	6829      	ldr	r1, [r5, #0]
 80076c8:	0606      	lsls	r6, r0, #24
 80076ca:	f101 0304 	add.w	r3, r1, #4
 80076ce:	d50a      	bpl.n	80076e6 <_printf_i+0xce>
 80076d0:	680e      	ldr	r6, [r1, #0]
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	da03      	bge.n	80076e0 <_printf_i+0xc8>
 80076d8:	232d      	movs	r3, #45	; 0x2d
 80076da:	4276      	negs	r6, r6
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e0:	485e      	ldr	r0, [pc, #376]	; (800785c <_printf_i+0x244>)
 80076e2:	230a      	movs	r3, #10
 80076e4:	e019      	b.n	800771a <_printf_i+0x102>
 80076e6:	680e      	ldr	r6, [r1, #0]
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076ee:	bf18      	it	ne
 80076f0:	b236      	sxthne	r6, r6
 80076f2:	e7ef      	b.n	80076d4 <_printf_i+0xbc>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	1d19      	adds	r1, r3, #4
 80076fa:	6029      	str	r1, [r5, #0]
 80076fc:	0601      	lsls	r1, r0, #24
 80076fe:	d501      	bpl.n	8007704 <_printf_i+0xec>
 8007700:	681e      	ldr	r6, [r3, #0]
 8007702:	e002      	b.n	800770a <_printf_i+0xf2>
 8007704:	0646      	lsls	r6, r0, #25
 8007706:	d5fb      	bpl.n	8007700 <_printf_i+0xe8>
 8007708:	881e      	ldrh	r6, [r3, #0]
 800770a:	4854      	ldr	r0, [pc, #336]	; (800785c <_printf_i+0x244>)
 800770c:	2f6f      	cmp	r7, #111	; 0x6f
 800770e:	bf0c      	ite	eq
 8007710:	2308      	moveq	r3, #8
 8007712:	230a      	movne	r3, #10
 8007714:	2100      	movs	r1, #0
 8007716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800771a:	6865      	ldr	r5, [r4, #4]
 800771c:	60a5      	str	r5, [r4, #8]
 800771e:	2d00      	cmp	r5, #0
 8007720:	bfa2      	ittt	ge
 8007722:	6821      	ldrge	r1, [r4, #0]
 8007724:	f021 0104 	bicge.w	r1, r1, #4
 8007728:	6021      	strge	r1, [r4, #0]
 800772a:	b90e      	cbnz	r6, 8007730 <_printf_i+0x118>
 800772c:	2d00      	cmp	r5, #0
 800772e:	d04d      	beq.n	80077cc <_printf_i+0x1b4>
 8007730:	4615      	mov	r5, r2
 8007732:	fbb6 f1f3 	udiv	r1, r6, r3
 8007736:	fb03 6711 	mls	r7, r3, r1, r6
 800773a:	5dc7      	ldrb	r7, [r0, r7]
 800773c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007740:	4637      	mov	r7, r6
 8007742:	42bb      	cmp	r3, r7
 8007744:	460e      	mov	r6, r1
 8007746:	d9f4      	bls.n	8007732 <_printf_i+0x11a>
 8007748:	2b08      	cmp	r3, #8
 800774a:	d10b      	bne.n	8007764 <_printf_i+0x14c>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	07de      	lsls	r6, r3, #31
 8007750:	d508      	bpl.n	8007764 <_printf_i+0x14c>
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	6861      	ldr	r1, [r4, #4]
 8007756:	4299      	cmp	r1, r3
 8007758:	bfde      	ittt	le
 800775a:	2330      	movle	r3, #48	; 0x30
 800775c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007764:	1b52      	subs	r2, r2, r5
 8007766:	6122      	str	r2, [r4, #16]
 8007768:	f8cd a000 	str.w	sl, [sp]
 800776c:	464b      	mov	r3, r9
 800776e:	aa03      	add	r2, sp, #12
 8007770:	4621      	mov	r1, r4
 8007772:	4640      	mov	r0, r8
 8007774:	f7ff fee2 	bl	800753c <_printf_common>
 8007778:	3001      	adds	r0, #1
 800777a:	d14c      	bne.n	8007816 <_printf_i+0x1fe>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	b004      	add	sp, #16
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	4835      	ldr	r0, [pc, #212]	; (800785c <_printf_i+0x244>)
 8007788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800778c:	6829      	ldr	r1, [r5, #0]
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	f851 6b04 	ldr.w	r6, [r1], #4
 8007794:	6029      	str	r1, [r5, #0]
 8007796:	061d      	lsls	r5, r3, #24
 8007798:	d514      	bpl.n	80077c4 <_printf_i+0x1ac>
 800779a:	07df      	lsls	r7, r3, #31
 800779c:	bf44      	itt	mi
 800779e:	f043 0320 	orrmi.w	r3, r3, #32
 80077a2:	6023      	strmi	r3, [r4, #0]
 80077a4:	b91e      	cbnz	r6, 80077ae <_printf_i+0x196>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f023 0320 	bic.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	2310      	movs	r3, #16
 80077b0:	e7b0      	b.n	8007714 <_printf_i+0xfc>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	2378      	movs	r3, #120	; 0x78
 80077bc:	4828      	ldr	r0, [pc, #160]	; (8007860 <_printf_i+0x248>)
 80077be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077c2:	e7e3      	b.n	800778c <_printf_i+0x174>
 80077c4:	0659      	lsls	r1, r3, #25
 80077c6:	bf48      	it	mi
 80077c8:	b2b6      	uxthmi	r6, r6
 80077ca:	e7e6      	b.n	800779a <_printf_i+0x182>
 80077cc:	4615      	mov	r5, r2
 80077ce:	e7bb      	b.n	8007748 <_printf_i+0x130>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	6826      	ldr	r6, [r4, #0]
 80077d4:	6961      	ldr	r1, [r4, #20]
 80077d6:	1d18      	adds	r0, r3, #4
 80077d8:	6028      	str	r0, [r5, #0]
 80077da:	0635      	lsls	r5, r6, #24
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	d501      	bpl.n	80077e4 <_printf_i+0x1cc>
 80077e0:	6019      	str	r1, [r3, #0]
 80077e2:	e002      	b.n	80077ea <_printf_i+0x1d2>
 80077e4:	0670      	lsls	r0, r6, #25
 80077e6:	d5fb      	bpl.n	80077e0 <_printf_i+0x1c8>
 80077e8:	8019      	strh	r1, [r3, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	6123      	str	r3, [r4, #16]
 80077ee:	4615      	mov	r5, r2
 80077f0:	e7ba      	b.n	8007768 <_printf_i+0x150>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	602a      	str	r2, [r5, #0]
 80077f8:	681d      	ldr	r5, [r3, #0]
 80077fa:	6862      	ldr	r2, [r4, #4]
 80077fc:	2100      	movs	r1, #0
 80077fe:	4628      	mov	r0, r5
 8007800:	f7f8 fd0e 	bl	8000220 <memchr>
 8007804:	b108      	cbz	r0, 800780a <_printf_i+0x1f2>
 8007806:	1b40      	subs	r0, r0, r5
 8007808:	6060      	str	r0, [r4, #4]
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	6123      	str	r3, [r4, #16]
 800780e:	2300      	movs	r3, #0
 8007810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007814:	e7a8      	b.n	8007768 <_printf_i+0x150>
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	462a      	mov	r2, r5
 800781a:	4649      	mov	r1, r9
 800781c:	4640      	mov	r0, r8
 800781e:	47d0      	blx	sl
 8007820:	3001      	adds	r0, #1
 8007822:	d0ab      	beq.n	800777c <_printf_i+0x164>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	079b      	lsls	r3, r3, #30
 8007828:	d413      	bmi.n	8007852 <_printf_i+0x23a>
 800782a:	68e0      	ldr	r0, [r4, #12]
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	4298      	cmp	r0, r3
 8007830:	bfb8      	it	lt
 8007832:	4618      	movlt	r0, r3
 8007834:	e7a4      	b.n	8007780 <_printf_i+0x168>
 8007836:	2301      	movs	r3, #1
 8007838:	4632      	mov	r2, r6
 800783a:	4649      	mov	r1, r9
 800783c:	4640      	mov	r0, r8
 800783e:	47d0      	blx	sl
 8007840:	3001      	adds	r0, #1
 8007842:	d09b      	beq.n	800777c <_printf_i+0x164>
 8007844:	3501      	adds	r5, #1
 8007846:	68e3      	ldr	r3, [r4, #12]
 8007848:	9903      	ldr	r1, [sp, #12]
 800784a:	1a5b      	subs	r3, r3, r1
 800784c:	42ab      	cmp	r3, r5
 800784e:	dcf2      	bgt.n	8007836 <_printf_i+0x21e>
 8007850:	e7eb      	b.n	800782a <_printf_i+0x212>
 8007852:	2500      	movs	r5, #0
 8007854:	f104 0619 	add.w	r6, r4, #25
 8007858:	e7f5      	b.n	8007846 <_printf_i+0x22e>
 800785a:	bf00      	nop
 800785c:	08007e95 	.word	0x08007e95
 8007860:	08007ea6 	.word	0x08007ea6

08007864 <__retarget_lock_acquire_recursive>:
 8007864:	4770      	bx	lr

08007866 <__retarget_lock_release_recursive>:
 8007866:	4770      	bx	lr

08007868 <memcpy>:
 8007868:	440a      	add	r2, r1
 800786a:	4291      	cmp	r1, r2
 800786c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007870:	d100      	bne.n	8007874 <memcpy+0xc>
 8007872:	4770      	bx	lr
 8007874:	b510      	push	{r4, lr}
 8007876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800787a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787e:	4291      	cmp	r1, r2
 8007880:	d1f9      	bne.n	8007876 <memcpy+0xe>
 8007882:	bd10      	pop	{r4, pc}

08007884 <memmove>:
 8007884:	4288      	cmp	r0, r1
 8007886:	b510      	push	{r4, lr}
 8007888:	eb01 0402 	add.w	r4, r1, r2
 800788c:	d902      	bls.n	8007894 <memmove+0x10>
 800788e:	4284      	cmp	r4, r0
 8007890:	4623      	mov	r3, r4
 8007892:	d807      	bhi.n	80078a4 <memmove+0x20>
 8007894:	1e43      	subs	r3, r0, #1
 8007896:	42a1      	cmp	r1, r4
 8007898:	d008      	beq.n	80078ac <memmove+0x28>
 800789a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078a2:	e7f8      	b.n	8007896 <memmove+0x12>
 80078a4:	4402      	add	r2, r0
 80078a6:	4601      	mov	r1, r0
 80078a8:	428a      	cmp	r2, r1
 80078aa:	d100      	bne.n	80078ae <memmove+0x2a>
 80078ac:	bd10      	pop	{r4, pc}
 80078ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078b6:	e7f7      	b.n	80078a8 <memmove+0x24>

080078b8 <_realloc_r>:
 80078b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078bc:	4680      	mov	r8, r0
 80078be:	4614      	mov	r4, r2
 80078c0:	460e      	mov	r6, r1
 80078c2:	b921      	cbnz	r1, 80078ce <_realloc_r+0x16>
 80078c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	4611      	mov	r1, r2
 80078ca:	f7ff bc2b 	b.w	8007124 <_malloc_r>
 80078ce:	b92a      	cbnz	r2, 80078dc <_realloc_r+0x24>
 80078d0:	f7ff fbbc 	bl	800704c <_free_r>
 80078d4:	4625      	mov	r5, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	f000 f81b 	bl	8007916 <_malloc_usable_size_r>
 80078e0:	4284      	cmp	r4, r0
 80078e2:	4607      	mov	r7, r0
 80078e4:	d802      	bhi.n	80078ec <_realloc_r+0x34>
 80078e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ea:	d812      	bhi.n	8007912 <_realloc_r+0x5a>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fc18 	bl	8007124 <_malloc_r>
 80078f4:	4605      	mov	r5, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0ed      	beq.n	80078d6 <_realloc_r+0x1e>
 80078fa:	42bc      	cmp	r4, r7
 80078fc:	4622      	mov	r2, r4
 80078fe:	4631      	mov	r1, r6
 8007900:	bf28      	it	cs
 8007902:	463a      	movcs	r2, r7
 8007904:	f7ff ffb0 	bl	8007868 <memcpy>
 8007908:	4631      	mov	r1, r6
 800790a:	4640      	mov	r0, r8
 800790c:	f7ff fb9e 	bl	800704c <_free_r>
 8007910:	e7e1      	b.n	80078d6 <_realloc_r+0x1e>
 8007912:	4635      	mov	r5, r6
 8007914:	e7df      	b.n	80078d6 <_realloc_r+0x1e>

08007916 <_malloc_usable_size_r>:
 8007916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791a:	1f18      	subs	r0, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfbc      	itt	lt
 8007920:	580b      	ldrlt	r3, [r1, r0]
 8007922:	18c0      	addlt	r0, r0, r3
 8007924:	4770      	bx	lr
	...

08007928 <_init>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	bf00      	nop
 800792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792e:	bc08      	pop	{r3}
 8007930:	469e      	mov	lr, r3
 8007932:	4770      	bx	lr

08007934 <_fini>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr
